{
  
    
        "post0": {
            "title": "Desert Island Discs - Famous people and their musical tastes",
            "content": "Authors: . Helen Duncan | Bill Finnegan | Luke Hare | Camila Rangel Smith | Sam Van Stroud | . Reviewers: . Ed Chalstrey | Markus Hauru | . Summary: . Desert Island Discs is a long-running BBC radio programme and has become an invaluable archive of notable people and musical tastes over the past eight decades. This data story combines a new public dataset of all the guests and their musical selections extracted from the BBC archive with open datasets on people and music from Wikipedia and Spotify. We explore aspects of the people and music over time as well as the relationships between people and music through network analysis. . Background . In 1942, a new programme appeared on the airwaves of the BBC that was created and presented by Roy Plomley. The format was simple – a guest shared eight songs that they would want to be stuck with for the rest of their life if exiled to a desert island. After a hiatus from 1946 to 1951, the programme returned with some new innovations: at the end of each episode the castaway chooses a book, a luxury, and one song to save from the waves. The show was hosted by Plomley until his death in 1985, followed by Michael Parkinson, Sue Lawley, Kirsty Young, and Lauren Laverne. . Now considered a cultural touchstone, there have been over 3,200 episodes of Desert Island Discs. An invitation to be castaway is a sign of success in your field, whether that is art, academia, business, government or sport. Most episodes feature a single castaway, but sometimes multiple guests are castaway together, especially double acts like Morecambe and Wise or Ant and Dec. 8% of castaways have appeared on the show more than once, with national treasure David Attenborough sharing a record four appearances with comedian/actor Arthur Askey. . Data . Andrew Gustar, who conducts statistical research into music history, compiled a dataset of castaways and discs from the BBC Radio 4 archive. This data, which is now available online, was the basis for Andrew&#39;s analysis exploring the most popular songs and artists, as well as the gender of the castaways. This data story includes information about an additional 60 episodes from February 2020 to August 2021 (gathered from Wikipedia and the BBC website). It also combines the episode data with additional information about people and music. For people, we are using Wikidata, a repository of structured data from Wikipedia. For music, we are using Spotify to get genre and other information about selected tunes. . Rather get into the details of how we pulled this dataset together, we want to keep this data story focused on the data analysis. The source code for the wikipeople package is available on Github, and the package is also on PyPI. It also takes a few hours to run all the requests for all the castaways and discs in our dataset, so we’ve done this once, and published the resulting dataset online. You can reproduce our work or just download the combined data at Humanities Commons. . Python setup . Let&#39;s get started by importing the packages that we&#39;ll need for this story. . import ast import collections import itertools import matplotlib.pyplot as plt import networkx as nx import numpy as np import pandas as pd import pycountry as pc import pycountry_convert as pcc import seaborn as sns from scipy import stats sns.set() . Loading the data . hc_data_url = ( &quot;https://hcommons.org/deposits/download/hc:42512/CONTENT/desert_island_discs.xlsx&quot; ) castaways_df = pd.read_excel( hc_data_url, sheet_name=&quot;castaways&quot;, parse_dates=[&quot;date&quot;, &quot;date_of_birth&quot;], index_col=0, ) # castaways, discs, spotify_data castaways_df[&quot;year&quot;] = [i.year for i in castaways_df[&quot;date&quot;].dt.date] castaways_df.head(1) . episode_ref date castaway_ref name std_name gender profession country_of_citizenship place_of_birth country_of_birth date_of_birth favTrack luxury book wiki_link link year . 0 2828 | 1942-01-29 | 2855 | Vic Oliver | vic oliver | male | [&#39;actor&#39;, &#39;performing artist&#39;, &#39;artist&#39;, &#39;prof... | Austria-Hungary | Vienna | Austria | 1898-07-08 | NA by NA | NaN | NaN | https://en.wikipedia.org/wiki/Vic_Oliver | https://www.bbc.co.uk/programmes/p009y0nq | 1942 | . Episodes . Our dataset runs from January 1942 through to August 2021, when the programme took a break for the summer. We can use the episode and castaway reference numbers to get the totals for each. . print(castaways_df[&quot;episode_ref&quot;].nunique()) print(castaways_df[&quot;castaway_ref&quot;].nunique()) castaway_count = castaways_df[&quot;castaway_ref&quot;].value_counts().to_frame() print(len(castaway_count[(castaway_count[&quot;castaway_ref&quot;] &gt; 1)])) . 3211 2950 241 . So over the course of 3,211 episodes, we&#39;ve had 2,950 castaways, with 241 people appearing on the programme more than once. . hosts = [ (&quot;Roy Plomley&quot;, &quot;29/01/1942&quot;, &quot;11/05/1985&quot;), (&quot;Michael Parkinson&quot;, &quot;05/01/1986&quot;, &quot;13/03/1988&quot;), (&quot;Sue Lawley&quot;, &quot;27/03/1988&quot;, &quot;27/08/2006&quot;), (&quot;Kirsty Young&quot;, &quot;01/10/2006&quot;, &quot;28/09/2018&quot;), (&quot;Lauren Laverne&quot;, &quot;05/10/2018&quot;, None), ] fig = plt.figure(figsize=(12, 3), dpi=100) n_bins = castaways_df.year.max() - castaways_df.year.min() + 1 bins = np.linspace(castaways_df.year.min(), castaways_df.year.max() + 1, n_bins + 1) plt.hist(castaways_df.year, bins=bins, color=sns.color_palette(&quot;Paired&quot;, 10)[5]) _, ymax = plt.ylim() for host in hosts: year = pd.to_datetime(host[1], infer_datetime_format=True).year plt.plot([year, year], [0, ymax * 1.2], color=&quot;black&quot;, ls=&quot;solid&quot;) if host[0] == &quot;Michael Parkinson&quot;: plt.annotate(host[0].replace(&quot; &quot;, &quot; n&quot;), xy=(year - 8, ymax)) else: plt.annotate(host[0].replace(&quot; &quot;, &quot; n&quot;), xy=(year + 0.5, ymax)) plt.xlabel(&quot;Year&quot;, fontweight=&quot;bold&quot;) plt.ylabel(&quot;Number of shows&quot;, fontweight=&quot;bold&quot;) plt.grid(False) plt.show() . Plotting the episodes, you can immediately see the long run of the programme, minus a small hiatus after WWII. This plot also illustrates the long period of time that Plomley served as host, which accounts for the majority of episodes. . Castaways . Plotting functions . In order to look at the castaways who have been on the show in more detail, lets define some functions. These will help us to aggregate episodes in the same year, and then plot summary metrics as a function of year. . def normalize_rows(df): df = df.div(df.sum(axis=1), axis=0) df = df.fillna(0) return df def cumulative_columns(df): &quot;&quot;&quot; Loop through columns and calculate running totals per row. &quot;&quot;&quot; # for each column (except the first) for i, col in enumerate(df): if i == 0: continue # add the previous column to this column df[col] += df[df.columns[i - 1]] return df def moving_average(df, n=3): df = df.rolling(window=n).mean() # moving average df = df.dropna(how=&quot;all&quot;) # drop lost columns return df def make_timeplot( df, ymin=0, horiz_line_y=0, leg_title=&quot;&quot;, y_title=&quot;Fraction of Castaways&quot; ): c = sns.color_palette(&quot;Paired&quot;, max(4, len(df.columns))) plt.figure(figsize=(10, 3), dpi=100) plt.gca().set_facecolor(c[0]) xs = df.index for i, col in enumerate(reversed(df.columns)): plt.fill_between( xs, df[col], interpolate=False, color=c[i], label=col, alpha=1.0 ) if horiz_line_y &gt; 0: plt.plot( plt.xlim(), [horiz_line_y, horiz_line_y], color=&quot;black&quot;, ls=((0, (10, 5))), lw=1.5, ) plt.xlabel(&quot;Year&quot;, fontsize=10, fontweight=&quot;bold&quot;) plt.ylabel(y_title, fontsize=10, fontweight=&quot;bold&quot;) plt.xticks(fontsize=10) plt.yticks(fontsize=10) plt.xlim(df.index[0], df.index[-1]) plt.ylim(ymin, 1) leg = plt.legend( loc=&quot;upper left&quot;, bbox_to_anchor=(1.01, 1.01), fontsize=10, facecolor=&quot;white&quot;, frameon=True, framealpha=1, edgecolor=&quot;white&quot;, ) leg.set_title( leg_title, prop={&quot;size&quot;: 10, &quot;weight&quot;: &quot;bold&quot;, &quot;family&quot;: &quot;sans-serif&quot;} ) leg._legend_box.align = &quot;left&quot; plt.show() . Gender . Now we have these functions to make the plots we need, we can first take a look at the distribution of gender through time. . gender_df = pd.pivot_table( castaways_df, columns=&quot;gender&quot;, index=&quot;year&quot;, values=&quot;date&quot;, aggfunc=&quot;count&quot; ) gender_df = normalize_rows(gender_df) gender_df = gender_df[[&quot;male&quot;, &quot;female&quot;]] gender_df = cumulative_columns(gender_df) make_timeplot(gender_df, horiz_line_y=0.5, leg_title=&quot;Gender&quot;) . Okay, there are a few things to notice here. The first is that, throughout the bulk of the show&#39;s long history, there have been significantly more male castaways than female. But the plot is very spikey, demonstrating that from year to year the gender ratio of castaways on the show fluctuates by an appreciable amount. Since we are interested in looking at trends over several years, and not differences between consecutive years, lets try smoothing this plot by using a moving average of 5 years. . make_timeplot(moving_average(gender_df, n=5), horiz_line_y=0.5, leg_title=&quot;Gender&quot;) . The smoothed plot confirms the observation that the show has had significantly more males than females. . Around 1950, it looks as though there was a much more equal split between men and women. However, this conclusion is drawn a bit hurriedly. If we look at the number of episodes per year around this time, we see that the show was actually off the air for several years around this period. There was also a year (1946), where only one episode aired, and the castaway was female (actress Barbara Mullen). As we are giving each year equal visual weight with our plot, the show looks more balanced in terms of gender at it&#39;s inception than it was. . From the beginning of the show, up until the early 2010s, there were about 3/4 male castaways and 1/4 female castaways. A little after 2010, we see a qualitative shift, and the split between males and females quickly becomes much more even. The suddenness of this change suggests it was a active decision taken by the producers of the show. The fact that this happened relatively recently is perhaps surprising. . print(&quot;Percentages of different genders, integrated over time&quot;) round(castaways_df[&quot;gender&quot;].value_counts(dropna=False) / len(castaways_df) * 100, 1) . Percentages of different genders, integrated over time . male 68.6 female 29.7 NaN 1.6 transgender female 0.1 Name: gender, dtype: float64 . Finally, it&#39;s worth noting that since Wikipedia does not have information on every castaway, we are missing information on some castaways. In this case, we don&#39;t have a gender for 1.6% of castaways. . Age . We might also wonder whether the age of castaways (at the time of them appearing on the show) has changed over time. For example, might recent guests on the show be younger to appeal to a younger demographic of listeners? . Using the date of birth of the castaway from Wikidata, and the broadcast date of the episode, we can calculate how old the castaways were when they were on the show. . cols_of_interest = [&quot;name&quot;, &quot;std_name&quot;, &quot;gender&quot;, &quot;date&quot;, &quot;date_of_birth&quot;, &quot;year&quot;] castaways_age_df = castaways_df[cols_of_interest].assign( age=lambda x: ( (x[&quot;date&quot;].dt.year - pd.to_datetime(castaways_df[&quot;date_of_birth&quot;]).dt.year) - (x[&quot;date&quot;].dt.month &lt; pd.to_datetime(castaways_df[&quot;date_of_birth&quot;]).dt.month) ) ) castaways_age_df.head(1) . name std_name gender date date_of_birth year age . 0 Vic Oliver | vic oliver | male | 1942-01-29 | 1898-07-08 | 1942 | 43.0 | . castaways_age_df.loc[castaways_age_df[&quot;age&quot;] == castaways_age_df[&quot;age&quot;].max()] . name std_name gender date date_of_birth year age . 1455 Sir Robert Mayer | robert mayer | male | 1979-06-05 | 1879-06-05 | 1979 | 100.0 | . 2258 Kathleen Hale | kathleen hale | female | 1998-06-05 | 1898-05-24 | 1998 | 100.0 | . castaways_age_df.loc[castaways_age_df[&quot;age&quot;] == castaways_age_df[&quot;age&quot;].min()] . name std_name gender date date_of_birth year age . 1024 Quentin Poole | quentin poole | male | 1970-12-28 | 1957-01-01 | 1970 | 13.0 | . The youngest castaway was musician Quentin Poole, who at the age of 13 appeared on the 1970 Christmas episode when he was the head chorister at King&#39;s College Cambridge. Businessman, philanthropist and patron of music Sir Robert Mayer appeared on the programme on his 100th birthday. . teens = castaways_age_df[castaways_age_df[&quot;age&quot;] &lt; 20] teens.head(10) . name std_name gender date date_of_birth year age . 84 Petula Clark | petula clark | female | 1951-05-02 | 1932-11-15 | 1951 | 18.0 | . 313 Janette Scott | janette scott | female | 1956-12-24 | 1938-12-14 | 1956 | 18.0 | . 736 Hayley Mills | hayley mills | female | 1965-05-10 | 1946-04-18 | 1965 | 19.0 | . 1024 Quentin Poole | quentin poole | male | 1970-12-28 | 1957-01-01 | 1970 | 13.0 | . older = castaways_age_df[castaways_age_df[&quot;age&quot;] &gt; 95] older.head(10) . name std_name gender date date_of_birth year age . 1455 Sir Robert Mayer | robert mayer | male | 1979-06-05 | 1879-06-05 | 1979 | 100.0 | . 1497 Commissioner Catherine Bramwell-Booth | commissioner catherine bramwell-booth | female | 1980-04-11 | 1883-07-20 | 1980 | 96.0 | . 1712 George Abbott | george abbott | male | 1984-09-07 | 1887-06-25 | 1984 | 97.0 | . 1885 Athene Seyler | athene seyler | female | 1989-03-19 | 1889-05-31 | 1989 | 99.0 | . 1903 Gwen Ffrangcon-Davies | gwen ffrangcon-davies | female | 1989-09-01 | 1891-01-25 | 1989 | 98.0 | . 2258 Kathleen Hale | kathleen hale | female | 1998-06-05 | 1898-05-24 | 1998 | 100.0 | . 2889 Jeremy Hutchinson | jeremy hutchinson | male | 2013-10-25 | 1915-03-28 | 2013 | 98.0 | . 2961 Harry Rabinowitz | harry rabinowitz | male | 2015-07-03 | 1916-03-26 | 2015 | 99.0 | . From the two dataframes, teens and older, we can see there have been 4 castaways under the age of 20, and 8 over the age of 95. There have been no teenaged castaways for over 51 years, and the last castaway over 95 was broadcast seven years ago. . av_age_m = castaways_age_df[castaways_age_df[&quot;gender&quot;] == &quot;male&quot;][&quot;age&quot;].mean() av_age_f = castaways_age_df[castaways_age_df[&quot;gender&quot;] == &quot;female&quot;][&quot;age&quot;].mean() print( f&quot;The average age of the male castaways is {av_age_m:.1f} and the average age of the female castaways is {av_age_f:.1f}&quot; ) . The average age of the male castaways is 53.5 and the average age of the female castaways is 53.7 . A quick calculation shows that the average age for male and female castaways is very similar, around 53 and a half years old. . We now will segment the castaways by decade to explore trends in age over time. . def kdeplot_med(data, **kwargs): data = data.dropna(subset=[kwargs[&quot;x&quot;]]) _ax = plt.gca() density = stats.gaussian_kde(data[kwargs[&quot;x&quot;]].dropna()) _, ymax = _ax.get_ybound() _ax.axvline( data[kwargs[&quot;x&quot;]].median(), color=kwargs[&quot;color&quot;], ymax=(density(data[kwargs[&quot;x&quot;]].median())[0] / ymax), ) _ax.annotate( int(data[kwargs[&quot;x&quot;]].median()), (data[kwargs[&quot;x&quot;]].median() + 1, density(data[kwargs[&quot;x&quot;]].median())[0] * 0.65), xycoords=&quot;data&quot;, fontweight=&quot;bold&quot;, ) return _ax . sns.set_theme(style=&quot;white&quot;, rc={&quot;axes.facecolor&quot;: (0, 0, 0, 0)}) g = sns.FacetGrid( castaways_age_df.assign(decade=lambda x: (x[&quot;year&quot;] // 10) * 10), palette=&quot;Paired&quot;, hue=&quot;decade&quot;, row=&quot;decade&quot;, aspect=7, height=1.0, ) BW = 0.9 g.map_dataframe( sns.kdeplot, x=&quot;age&quot;, fill=True, alpha=1, bw_adjust=BW, clip_on=False, ) g.map_dataframe(sns.kdeplot, x=&quot;age&quot;, color=&quot;black&quot;, bw_adjust=BW) g.map_dataframe( kdeplot_med, x=&quot;age&quot;, fill=True, alpha=1, bw_adjust=BW, clip_on=False, color=&quot;black&quot; ) def label1(k, color, label): ax = plt.gca() ax.text( 0, 0.2, label + &quot;s&quot;, fontweight=&quot;bold&quot;, color=&quot;black&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, transform=ax.transAxes, ) g.map(label1, &quot;age&quot;) g.set_ylabels(&quot;&quot;) g.set_xlabels(&quot;Age&quot;) g.fig.subplots_adjust(hspace=-0.5) g.set_titles(&quot;&quot;) g.set(yticks=[]) g.despine(left=True) plt.show() . Looking at the range of ages by decade, the plot above indicates that the castaways are aging over time: the media age has increased from the early 40s in the 1940s to late 50s in the 2020s. For comparison, the median age of the British population increased from 34.9 in 1950 to 40.2 in 2015. . A great example of how the guests (and audience?) are aging is castaway Sir Cliff Richard. The pop singer first appeared on the show at the age of 20 in 1960 (favourite song: Rock Around the Clock by Bill Haley and his Comets, book: The Swiss Family Robinson by Johann Wyss, luxury: guitar) and returned for the 2020 Christmas epsiode at the age of 80 (favourite song: It Is Well by Sheila Walsh featuring Cliff Richard, book: Wuthering Heights by Emily Brontë, luxury: a Gibson acoustic guitar). . castaways_df.query(&quot;std_name == &#39;cliff richard&#39;&quot;) . episode_ref date castaway_ref name std_name gender profession country_of_citizenship place_of_birth country_of_birth date_of_birth favTrack luxury book wiki_link link year . 511 2654 | 1960-10-31 | 484 | Cliff Richard | cliff richard | male | [&#39;film actor&#39;, &#39;actor&#39;, &#39;performing artist&#39;, &#39;... | United Kingdom | Lucknow | India | 1940-10-14 | Rock Around The Clock by Bill Haley and His Co... | Guitar | The Swiss Family Robinson - Johann Wyss | https://en.wikipedia.org/wiki/Cliff_Richard | https://www.bbc.co.uk/programmes/p009y6z4 | 1960 | . 3190 3259 | 2020-12-20 | 484 | Sir Cliff Richard | cliff richard | NaN | NaN | NaN | NaN | NaN | NaT | NaN | Wuthering Heights¬†by¬†Emily Bront√´ | A Gibson¬†acoustic guitar | https://en.wikipedia.org/wiki/Sir_Cliff_Richard | https://www.bbc.co.uk/programmes/m000qhg8 | 2020 | . Country of birth . From Wikipedia, we can also ask for information about the country of birth for the castaways on the show. For visual clarity, we have used the pycountry package to get the continent of each country, breaking the United Kingdom out into its own category due to the majority of castaways being born in the UK. This information is not always available, as reflected by the &quot;other&quot; category on the plot. . def get_continent(country): &quot;&quot;&quot; Fuzzy search for Continent based on input country, treating GB separately &quot;&quot;&quot; # first search for country try: code = pc.countries.search_fuzzy(country)[0].alpha_2 except: code = &quot;&quot; if code == &quot;&quot;: return &quot;Unknown&quot; if code == &quot;GB&quot;: return &quot;UK&quot; # next get continent code from country code continent_code = pcc.country_alpha2_to_continent_code(code) return continent_code . castaways_df[&quot;continent_of_birth&quot;] = castaways_df.country_of_birth.apply(get_continent) birth_df = pd.pivot_table( castaways_df, columns=&quot;continent_of_birth&quot;, index=&quot;year&quot;, values=&quot;date&quot;, aggfunc=&quot;count&quot;, ) birth_df = normalize_rows(birth_df) birth_df = birth_df[[&quot;UK&quot;, &quot;EU&quot;, &quot;NA&quot;, &quot;AF&quot;, &quot;AS&quot;, &quot;SA&quot;, &quot;OC&quot;, &quot;Unknown&quot;]] birth_df = cumulative_columns(birth_df) make_timeplot(moving_average(birth_df, n=5), ymin=0.0, leg_title=&quot;Country of Birth&quot;) . Looking as a function of time, there are no drastic changes in the country of birth of castaways on the show. The fraction of castaways who have this information missing seems to have been slightly reduced since the beginning of the show. This could reflect changes in the notability of guests, or perhaps the increasing prevalence of information on Wikipedia. . For a BBC radio programme, perhaps it isn&#39;t a surprise that most castaways are from the UK, with other English-speaking countries with cultural connections (Australia, USA) being very prominent. In fact, the large number of castaways from the USA from the start of the show might make sense in the context of castaway profession. . Profession . We can also ask Wikipedia for information about professions that the castaways have, in order to get a better idea of which roles in society are reflected on the show. . We obtain from Wikipedia a list of professions of decreasing granularity for each castaway. As such, the data isn&#39;t all comparable without some initial work. For example, Vic Oliver is at the highest level of granularity an actor (as far as Wikipedia is concerned), but he is also a performing artist, an artist, and ultimately a professional. . castaways_df.std_name.iloc[0], castaways_df.profession.iloc[0] . (&#39;vic oliver&#39;, &#34;[&#39;actor&#39;, &#39;performing artist&#39;, &#39;artist&#39;, &#39;professional&#39;]&#34;) . Since the number of possible professions that Wikipedia has knowledge of is too large to easily digest in a plot, we need to group similar professions into broad enough categories for visualisation. Do do this, we next define some functions to cluster professions, aiming to have the most granular profession for each castaway, while still maintaining a manageable number of possible categories. These functions are a little ad hoc, and rely on some parameters that have been manually selected to achieve sensible results. A more sophisticated approach could reduce the need for this. . def reduce(prof_list, common_professions): &quot;&quot;&quot; Given a list of professions for a single castaway, try and return the most granular profession for this castaway if it is common enough. &quot;&quot;&quot; # no options available, just take whatever profession is left if len(prof_list) == 1 or &quot;professional&quot; in prof_list[1]: return [prof_list[0]] # take the most granular profession if it is common for prof in prof_list: if prof in common_professions and prof != &quot;professional&quot;: return [prof] # if none are common, restrict the set of professions to cluster else: return prof_list[1:] def cluster_step(profession_lists, n=10): &quot;&quot;&quot; At each step, take the n most common professions that appear globally, and attempt to match castaways to one of these professions. &quot;&quot;&quot; # get the most common categories common_professions = pd.Series( [i for x in profession_lists for i in x] ).value_counts()[:n] # apply clustering out = [reduce(p, common_professions) for p in profession_lists] return out def simplify_professions(profession_lists, n=25): &quot;&quot;&quot; Run the clustering process. &quot;&quot;&quot; # run clustering iteratively for ten steps for i in range(10): profession_lists = cluster_step(profession_lists) # clean professions = [p[0] for p in profession_lists] least_common = pd.Series(professions).value_counts(ascending=True)[:n] professions = [p if p not in least_common else &quot;other&quot; for p in professions] return professions . Now we have the clustering functions defined, we can define one additional function which does some preprocessing, runs the clustering, and makes a plot. . def get_profession_plot(df, n=20, window=10, leg_title=&quot;&quot;): profession_df = df.copy() profession_df.loc[profession_df.profession == &quot;[]&quot;, &quot;profession&quot;] = np.nan profession_df = profession_df.fillna({&quot;profession&quot;: &quot;[&#39;unknown&#39;]&quot;}) profession_df.profession = profession_df.profession.apply( lambda x: ast.literal_eval(x) ) profession_df[&quot;profession&quot;] = simplify_professions(profession_df[&quot;profession&quot;], n=n) prof_df = pd.pivot_table( profession_df, columns=&quot;profession&quot;, index=&quot;year&quot;, values=&quot;date&quot;, aggfunc=&quot;count&quot;, ) prof_df = prof_df[ [c for c in prof_df.columns if c not in [&quot;other&quot;, &quot;unknown&quot;]] + [&quot;other&quot;, &quot;unknown&quot;] ] prof_df = normalize_rows(prof_df) prof_df = cumulative_columns(prof_df) make_timeplot(moving_average(prof_df, n=window), ymin=0.0, leg_title=leg_title) . get_profession_plot(castaways_df, n=34, leg_title=&quot;Profession&quot;) . As you can see, the professions most frequently represented on Desert Island Discs are people who work in the media and creative industries – actors, artists, journalists, musicians and writers. This makes sense, as it is an entertainment programme with a foundation of music. But we were surprised not to see more representation from the many professions that are influential in British society - politicians, athletes, academics and people involved in business, health, and law are all very small percentages of castaways. . There are also clear trends visible over time. In the first half of the show&#39;s history actors and musicians made up the bulk of guests. In more recent years the proportion of castaways being grouped into the &quot;other&quot; category has increased, indicating an increase diversity in castaways&#39; occupations. . Discs . In the dataset we introduced in the beginning, we also grabbed information about the songs shared by each castaway. Based on Andrew&#39;s initial analysis, we know that classical music dominates the musical selections, and we want to dig a little deeper into the types of music chosen over time, as well what types of people choose different genres building on the analysis above. . Genres . From Spotify, we can get a list of genres associated with the musical artist and additional info and analysis for each song (for example, danceability). It turns out Spotify has an overwhelming number of microgenres – see Glenn McDonald&#39;s everynoise.com for a mind blowing micro-genre experience – and we need to do some work to get a small number of the most common and most easily recognised genres. We initial had hoped to algorithmically develop a series of meta-genres to use for analysis, but this proved beyond the scope of this data story. . To start, we can load the discs data, and the dataset pulled from Spotify API. These are then merged. . discs_df = pd.read_excel( hc_data_url, sheet_name=&quot;discs&quot;, parse_dates=[&quot;date&quot;], index_col=0 ) # load spotify data spotify_df = pd.read_excel( hc_data_url, sheet_name=&quot;spotify_data&quot;, parse_dates=[&quot;date&quot;], index_col=0 ) spotify_df.genres_artist = spotify_df.genres_artist.apply(lambda x: ast.literal_eval(x)) spotify_df = spotify_df.dropna(subset=[&quot;track&quot;]) # combine disks and spotify data merged_df = pd.merge( discs_df, spotify_df, left_on=[&quot;track_name&quot;, &quot;date&quot;], right_on=[&quot;track_name_original&quot;, &quot;date&quot;], how=&quot;inner&quot;, ) # extract year merged_df[&quot;year&quot;] = merged_df[&quot;date&quot;].dt.year . Now the interesting part. After a bit of a manual look through the most common microgenres returned by Spotify, we came up with the following manual grouping. . meta_genres = { &quot;pop&quot;: [&quot;easy listening&quot;], &quot;rock&quot;: [], &quot;folk&quot;: [ &quot;bothy&quot;, &quot;celtic&quot;, &quot;scottish&quot;, &quot;bagpipe&quot;, &quot;irish&quot;, &quot;welsh&quot;, &quot;bluegrass&quot;, &quot;country&quot;, ], &quot;jazz&quot;: [ &quot;blues&quot;, &quot;british dance band&quot;, &quot;big band&quot;, &quot;ragtime&quot;, &quot;boogie&quot;, &quot;brass band&quot;, ], &quot;classical&quot;: [ &quot;choral&quot;, &quot;bolero&quot;, &quot;opera&quot;, &quot;operetta&quot;, &quot;orchestral&quot;, &quot;orchestra&quot;, &quot;romantic era&quot;, &quot;light music&quot;, &quot;baroque&quot;, ], &quot;vintage&quot;: [ &quot;adult standards&quot;, &quot;music hall&quot;, &quot;british comedy&quot;, &quot;broadway&quot;, &quot;cabaret&quot;, &quot;tin pan alley&quot;, ], &quot;world&quot;: [ &quot;italian&quot;, &quot;chanson&quot;, &quot;french&quot;, &quot;bossa&quot;, &quot;samba&quot;, &quot;flamenco&quot;, &quot;salsa&quot;, &quot;latin&quot;, &quot;african&quot;, &quot;zither&quot;, &quot;cuban rumba&quot;, &quot;arpa paraguaya&quot;, ], &quot;modern&quot;: [ &quot;disco&quot;, &quot;soul&quot;, &quot;r&amp;b&quot;, &quot;reggae&quot;, &quot;ska&quot;, &quot;hip hop&quot;, &quot;rap&quot;, &quot;electronic&quot;, &quot;electronica&quot;, &quot;house&quot;, &quot;ambient&quot;, &quot;downtempo&quot;, &quot;garage&quot;, &quot;synthesizer&quot;, &quot;drum and bass&quot;, ], &quot;spoken &amp; soundtrack&quot;: [ &quot;soundtrack&quot;, &quot;hollywood&quot;, &quot;show tunes&quot;, &quot;movie&quot;, &quot;poetry&quot;, &quot;comic&quot;, &quot;reading&quot;, &quot;comedy&quot;, &quot;oratory&quot;, ], } def determine_genre(genre_list): &quot;&quot;&quot; Given a list of genres for a particular song, return the first matched meta genre. &quot;&quot;&quot; if genre_list == []: return &quot;&quot; for genre in genre_list: for meta_genre in meta_genres.keys(): search_strings = [meta_genre] + meta_genres[meta_genre] if any([s in genre for s in search_strings]): return meta_genre return &quot;other&quot; . We can use the groups of genres defined above to turn the list of genres associated with each track into a single metagenre. Anything not captured in our very coarse categorisation goes into the &quot;other&quot; metagenre. . merged_df[&quot;genre&quot;] = merged_df.genres_artist.apply(determine_genre) # drop rows without any genre merged_df = merged_df[merged_df[&quot;genre&quot;] != &quot;&quot;].copy() # make a timeplot genre_df = pd.pivot_table( merged_df, columns=&quot;genre&quot;, index=&quot;year&quot;, values=&quot;date&quot;, aggfunc=&quot;count&quot; ) genre_df = genre_df[[c for c in genre_df.columns if c not in [&quot;other&quot;]] + [&quot;other&quot;]] genre_df = normalize_rows(genre_df) genre_df = cumulative_columns(genre_df) make_timeplot(moving_average(genre_df, n=5), ymin=0.0, leg_title=&quot;Genres&quot;, y_title=&quot;&quot;) . The plot above clearly illustrates the shift away from classical music, which doesn&#39;t really start until Plomley&#39;s reign as host ends in the mid-1980s. This trend accelerated after 2000 and rock music now represents a larger proportion of dics than classical music. . The &quot;vintage&quot; category was the second largest genre for much of the programme. Including artists like Frank Sinatra, it captures the popular music of the 1950s and now reflects more retro tastes. The &quot;modern&quot; category combines a number of more recent genres, from disco and ska to hip-hop and rap. . Next we see who were the most popular artists per year. First we merge our castaway and disc datasets, in order to have all the available information in one single dataframe. . total_df = pd.merge( merged_df, castaways_df, left_on=[&quot;std_name&quot;, &quot;date&quot;, &quot;episode_ref_x&quot;, &quot;castaway_ref&quot;], right_on=[&quot;std_name&quot;, &quot;date&quot;, &quot;episode_ref&quot;, &quot;castaway_ref&quot;], how=&quot;inner&quot;, ) . df1_grouped = total_df[total_df[&quot;year_x&quot;] &gt; 1949].groupby(&quot;year_x&quot;) dates = [] levels = [] names = [] for group_name, df_group in df1_grouped: # year dates.append(group_name) # percentage of times it is chosen levels.append( df_group[&quot;std_artist&quot;].value_counts()[:1].values[0] / df_group[&quot;std_artist&quot;].shape[0] ) # artist chosen (last name) names.append(df_group[&quot;std_artist&quot;].value_counts()[:1].index[0].split(&quot; &quot;)[-1]) # associating names to colours and order them chronologically names_cronological = list(dict.fromkeys(names)) c = sns.color_palette(&quot;Spectral&quot;, max(4, len(np.unique(names_cronological)))) colours = {g: c[i] for i, g in enumerate(names_cronological)} # Create figure and bar plot fig, ax = plt.subplots(figsize=(20, 5)) ax.set_title(&quot;Most popular artists by year&quot;, fontsize=20) ax.bar(dates, levels, 1, color=[colours[x] for x in names]) labels = list(colours.keys()) handles = [plt.Rectangle((0, 0), 1, 1, color=colours[x]) for x in names_cronological] ax.legend(handles, labels, facecolor=&quot;white&quot;, ncol=2, fontsize=14) ax.grid(False) # remove y axis and spines plt.ylabel(&quot;Percentage of times chosen by Castaways&quot;, fontsize=12) ax.margins(y=0.1) plt.show() . The most popular artist by year parallels the overall look at genres. Classical composers dominate until the early 2000s, with a classical grudge match between Bach, Beethoven and Mozart. Over the past two decades, The Beatles consistently top the charts, joined by Frank Sinatra, Bob Marley, David Bowie, Joni Mitchell, and Nina Simone. . Castaways and discs . We now will combine information about people and the music that they chose to look for any trends. Before getting into a more sophisticated network analysis, we can look at the musical genres chosen by different castaway professions. . total_genpro_df = total_df[[&quot;profession&quot;, &quot;genre&quot;]].copy() total_genpro_df.loc[total_genpro_df.profession == &quot;[]&quot;, &quot;profession&quot;] = np.nan total_genpro_df = total_genpro_df.dropna() total_genpro_df.profession = total_genpro_df.profession.apply( lambda x: ast.literal_eval(x) ) total_genpro_df[&quot;profession&quot;] = simplify_professions( total_genpro_df[&quot;profession&quot;], n=32 ) total_genpro_df = total_genpro_df.sort_values( [&quot;profession&quot;, &quot;genre&quot;], ascending=[True, False] ) # Move &#39;other&#39; to be at the end. other_profession = total_genpro_df[&quot;profession&quot;] == &quot;other&quot; total_genpro_df = pd.concat( (total_genpro_df[~other_profession], total_genpro_df[other_profession]) ) other_genre = total_genpro_df[&quot;genre&quot;] == &quot;other&quot; total_genpro_df = pd.concat( (total_genpro_df[other_genre], total_genpro_df[~other_genre]) ) . plt.figure(figsize=(12, 5)) g = sns.histplot( data=total_genpro_df, y=&quot;profession&quot;, hue=&quot;genre&quot;, multiple=&quot;fill&quot;, palette=&quot;Paired&quot; ) sns.move_legend(g, &quot;upper left&quot;, bbox_to_anchor=(1, 1), frameon=False, fontsize=14) g.set_xlabel(&quot;Fraction&quot;, fontsize=18) g.set_ylabel(&quot;Profession&quot;, fontsize=18) plt.show() . Politicians have been accused of using focus groups to pick their discs, so we were curious about how they compared to other professions. The genre breakdown for politicians is broadly similar to the creative professions and other fields. Musicians and singers (including many which were classically trained) are more likely to pick classical music. For athletes and businesspeople, a larger proportion of genres are popular music (modern, pop, rock, vintage). . Network analysis . An interesting way of looking at this data is to think of it as a network. You can have two kind of networks: one where the castaways are the nodes and they are connected by having chosen the same musical artist, and the other one is where the musical artists are the nodes and their connections are defined by how many castaways chose them together. . A network analysis can give us an idea of castaway/artist similarity and popularity, as well as uncovering some non-trivial patterns (in the best of cases). . Let&#39;s start building a network for our castaways. We will use our castaway and disc merged dataset, in order to have all the available information in one single dataframe. . Some of our castaways have appeared in more than one episode. Let&#39;s check who: . # given that our dataset is sorted we do this by only keeping the last entry list_index = [] count_repeats = 0 for name in np.unique(total_df[[&quot;std_name&quot;]]): castaway = total_df[total_df[&quot;std_name&quot;] == name] dates = np.unique(castaway[&quot;date&quot;].values) if len(dates) &gt; 1: count_repeats = count_repeats + 1 if len(dates) &gt; 3: print(name, &quot;:&quot;, [str(d)[:10] for d in dates]) # saving the index of the latest episode avalaible for each cast away index = castaway[(castaway[&quot;date&quot;] == dates[-1])].index.values list_index = [*list_index, *index] print( count_repeats, &quot; recurrent guests out of&quot;, len(np.unique(total_df[[&quot;castaway_ref&quot;]])), ) . arthur askey : [&#39;1942-04-02&#39;, &#39;1955-04-21&#39;, &#39;1968-12-23&#39;, &#39;1980-12-26&#39;] david attenborough : [&#39;1957-05-06&#39;, &#39;1979-03-13&#39;, &#39;1998-12-27&#39;, &#39;2012-02-03&#39;] 202 recurrent guests out of 2450 . As you can see above, both David Attenborough and was Arthur Askey were invited to the show four times! . Having repeated guests in our dataset can be problematic for building the network, as these castaways will have more connections than the ones that have been invited only once. To resolve this problem, let&#39;s make sure we only have one episode per castaway, by selecting the most recent episode available. . This count of total and repeat castaways is a little less than at the top of this notebook. As we are using a dataframe that has been merged with other data sources (Wikpedia, Spotify) we have lost some castaways where there was missing information. This is discussed in more detail in the conclusions. . df_network = total_df.iloc[list_index] df_network.shape . (12857, 53) . Castaway network . Let&#39;s now build the castaway network. For this we have written the function below: for each available pair of nodes (castaways in this case) it counts how many connections it has (common artists). This is typically called an edge list that defines a source and target (nodes), and it gives it a weight (edge). . def build_network(df, nodes_variable, edges_variable): &quot;&quot;&quot;Function that builds a newtork based on given nodes or edges that are columns names on the input dataframe&quot;&quot;&quot; # loop over all the unique values of the edges columns df_list = [] for edge in np.unique(df[edges_variable].astype(str).values): # get the all the nodes that have that edge nodes = np.unique( df[df[edges_variable] == edge][nodes_variable].dropna().values ) # get all combination of nodes existing for that edge # and save it to a list where source and # targes are the nodes conected by that edge if len(nodes) &gt; 1: source, target = zip(*itertools.combinations(nodes, 2)) df_net = pd.DataFrame() df_net[&quot;source&quot;] = source df_net[&quot;target&quot;] = target df_list.append(df_net) else: continue # turns list to a dataframe and aggregate repeated rows # (source and targets can appear several times) # weight is the number of times that appears network = pd.concat(df_list) network = network[network[&quot;source&quot;] != network[&quot;target&quot;]] df_network = ( network.groupby([&quot;source&quot;, &quot;target&quot;]) .size() .reset_index(name=&quot;weight&quot;) .sort_values(by=&quot;weight&quot;, ascending=False) ) return df_network . df_castaway_network = build_network(df_network, &quot;std_name&quot;, &quot;std_artist&quot;) # most conected pair of people df_castaway_network[:10] . source target weight . 209492 denis matthews | itzhak perlman | 6 | . 36398 andor foldes | hephzibah menuhin | 6 | . 297911 george cansdale | rowland emett | 5 | . 522899 vernon scannell | vladimir ashkenazy | 5 | . 209556 denis matthews | jeremy thorpe | 5 | . 36724 andor foldes | mitsuko uchida | 5 | . 209389 denis matthews | gerald moore | 5 | . 36108 andor foldes | catherine gaskin | 5 | . 285657 fred hoyle | vladimir ashkenazy | 5 | . 209425 denis matthews | hardy amies | 5 | . To understand what the table above describes, we can look at the choices of the top two pairs, in which the castaways are connected by some of the usual suspects of classical music. Pianist Denis Matthews (1967) and violinist Itzhak Perlman (1978) both went with Bach, Beethoven, Brahms, Elgar, Mozart and Schubert. Hephzibah Menuhin (1958) and Andor Foldes (1959) - both pianists - included Bach, Bartók, Beethoven, Brahms, Mozart and Schubert in their lists. . Now we can feed this data to a network library to build our network. . G = nx.from_pandas_edgelist(df_castaway_network, edge_attr=[&quot;weight&quot;]) print(nx.info(G)) . Graph with 2447 nodes and 523560 edges . Networks have interesting metrics that can help us understand our dataset better. For example, we have the node degree metric, that tells us the number of edges connected to a given node. In our case, the node degree of a castaway will tell us how popular or rare their taste in music is. . Let&#39;s explore who have the highest and lowest node degrees in our network. . node_degrees = G.degree() degree_sequence = sorted([d for n, d in node_degrees], reverse=True) # degree sequence degreeCount = collections.Counter(degree_sequence) deg, cnt = zip(*degreeCount.items()) sorted(node_degrees, key=lambda x: x[1], reverse=True)[:10] . [(&#39;denis matthews&#39;, 1345), (&#39;vernon scannell&#39;, 1243), (&#39;hardy amies&#39;, 1220), (&#39;itzhak perlman&#39;, 1206), (&#39;bernard levin&#39;, 1205), (&#39;claudio abbado&#39;, 1205), (&#39;jeremy thorpe&#39;, 1191), (&#39;alan alda&#39;, 1184), (&#39;john updike&#39;, 1170), (&#39;c day lewis&#39;, 1168)] . In the top ten, we&#39;ve got three writers, two musicians, a conductor, an actor, a politician, a designer, and a cartoonist/sculptor. Eight of them appeared on the show before 1990, and chose almost exclusively classical music. The two guests from the 1990s - Alan Alda and John Updike – chose music spanning classical, jazz, vintage and rock. . sorted(node_degrees, key=lambda x: x[1])[:10] . [(&#39;joan turner&#39;, 1), (&#39;jack hylton&#39;, 1), (&#39;dustin hoffman&#39;, 1), (&#39;jamie cullum&#39;, 2), (&#39;fenella fielding&#39;, 3), (&#39;kimberley motley&#39;, 4), (&#39;m m kaye&#39;, 5), (&#39;vittorio radice&#39;, 5), (&#39;roberto alagna&#39;, 5), (&#39;courtney pine&#39;, 5)] . Looking at the three castaways with the lowest node degrees, we&#39;ve got actor Dustin Hoffman (2012), jazz band leader Jack Hylton (1942), and comedian and singer Joan Turner (1988). Both Hylton and Turner chose their own songs, which might explain their position. For Hoffman, his ranking appears to be as a result of particularly esoteric tastes, picking lesser known artists from jazz, rockabilly and film soundtracks. . Artists network . Let&#39;s now explore how a network where the nodes are the artists and edges are weighted by the number of castaways that chose them together. . df_artists_network = build_network(df_network, &quot;std_artist&quot;, &quot;std_name&quot;) df_artists_network[:10] . source target weight . 16590 ludwig van beethoven | wolfgang amadeus mozart | 162 | . 14441 johann sebastian bach | wolfgang amadeus mozart | 161 | . 14247 johann sebastian bach | ludwig van beethoven | 148 | . 10607 franz schubert | wolfgang amadeus mozart | 84 | . 10521 franz schubert | ludwig van beethoven | 75 | . 10491 franz schubert | johann sebastian bach | 72 | . 14568 johannes brahms | ludwig van beethoven | 62 | . 14651 johannes brahms | wolfgang amadeus mozart | 62 | . 14192 johann sebastian bach | johannes brahms | 60 | . 8276 edward elgar | ludwig van beethoven | 51 | . This list comes as no surprise, as we&#39;ve got another &quot;who&#39;s who&quot; of classical music. In fact, the first nine are simply the various possible combinations of Bach, Beethoven, Brahms, Mozart and Schubert. . df_artists_network[-10:-1] . source target weight . 6899 della reese | johannes brahms | 1 | . 6900 della reese | peggy lee | 1 | . 6901 della reese | the beatles | 1 | . 6902 della reese | the modern jazz quartet | 1 | . 6903 denim | irma thomas | 1 | . 6904 denim | pixies | 1 | . 6905 denim | radiohead | 1 | . 6906 denim | the beatles | 1 | . 6907 denis king | neil diamond | 1 | . This list of the bottom ten is less illuminating. Moving down the long tail of more obscure musical artists, we expect there will be lots of pairings that only happen once. For example, in this list is the lesser known Birmingham indie rock band Denim, which was chosen by Charlie Brooker (2018), the satirist and creator of Black Mirror. His unique musical tastes were captured in the BBC website summary of the episode: . And for his final track, he selects The New Potatoes by Denim, a “wilfully ridiculous”, high-pitched electronic song that Charlie’s children find as funny as he does. It’s also the disc he would keep over all the others:“There is something darkly amusing about the thought of being stranded there [on the desert island] and the only form of music that you have is that.” . Denim appearing on Desert Island Discs this one time was worthy of including on their somewhat slim Wikipedia entry), so it would be surprising to see them with many more pairings. Also, the reason there are only four pairings for Denin is that the other three picks by Brooker were so random that they weren&#39;t found on Spotify (including a song from the children&#39;s programme the Magic Roundabout and the Gameboy theme for Robocop). . Now we can feed this data to a network library to build our network. . G_artists = nx.from_pandas_edgelist(df_artists_network, edge_attr=[&quot;weight&quot;]) print(nx.info(G_artists)) . Graph with 2088 nodes and 19717 edges . Let&#39;s take a look at the the node degree of our metric. . node_degrees = G_artists.degree() degree_sequence = sorted([d for n, d in node_degrees], reverse=True) # degree sequence degreeCount = collections.Counter(degree_sequence) deg, cnt = zip(*degreeCount.items()) . def artist_bar_plot(artist_names,artist_centrality,genres_central,genre_order, title,ylabel): &quot;&quot;&quot;Function to make a bar plot of artists based on a metric (node degree or centrality) &quot;&quot;&quot; # Create figure and bar plot fig, ax = plt.subplots(figsize=(24, 6)) ax.set_title(title, fontsize=20) c = sns.color_palette(&quot;Spectral&quot;, max(4, len(np.unique(genre_order)))) colours = {g: c[i] for i, g in enumerate(genre_order)} ax.bar([a.split(&quot; &quot;)[-1] for a in artist_names], artist_centrality, 1, color=[colours[x] for x in genres_central]) labels = list(colours.keys()) handles = [plt.Rectangle((0, 0), 1, 1, color=colours[x]) for x in genre_order] ax.legend(handles, labels, facecolor=&quot;white&quot;, fontsize=14) # remove y axis and spines plt.ylabel(ylabel, fontsize=14) plt.xticks(ha=&#39;right&#39;, rotation=55, fontsize=14) ax.margins(y=0.1) plt.show() . artist_dictionary = sorted(node_degrees, key=lambda x: x[1], reverse=True)[:30] artist_names = [artist_dictionary[i][0] for i in range(0,len(artist_dictionary))] artist_degree = [artist_dictionary[i][1] for i in range(0,len(artist_dictionary))] # get genres for the artists and genres_central = [total_df[total_df[&#39;std_artist&#39;]==artist][&#39;genre&#39;].iloc[0] for artist in artist_names] genre_order = list(dict.fromkeys(genres_central)) artist_bar_plot(artist_names,artist_degree,genres_central,genre_order,&quot;Most popular artists&quot;,&quot;Artist degree&quot;) . Looking at the artists with the highest node degrees: in addition to some familiar classical composers, we&#39;ve got the Beatles (the most popular artists for much of the past two decades) and Frank Sinatra (the king of our vintage category). . Now we can look at the artists with less node degree, or the ones less chosen in our dataset. . sorted(node_degrees, key=lambda x: x[1])[:10] . [(&#39;gerard philipe&#39;, 1), (&#39;lisa kirk&#39;, 1), (&#39;josef suk&#39;, 1), (&#39;teddy wilson&#39;, 1), (&#39;nellie lutcher&#39;, 1), (&#39;black dyke band&#39;, 1), (&#39;arthur askey&#39;, 1), (&#39;morgana king&#39;, 1), (&#39;iarla o lionaird&#39;, 2), (&#39;shankar mahadevan&#39;, 2)] . With the lowest node degrees, one performer that is worthy of note is Arthur Askey, an actor/comedian who appeared as a castaway on the show four times. On two of those appearances, he picked his own comedy routines from the films The Proposal and Band Waggon. Two other castaways included his musical comedy – actress Pat Kirkwood picked his playful song Worm in 1942 and actor John Mills picked his WWII parody Adolf in 2000 – but that wasn&#39;t enough to increase his node degrees above 1. . Another interesting network analysis metric is node centrality, which assigns numbers or rankings to nodes within a graph corresponding to their network position. Betweenness centrality quantifies the number of times a node acts as a bridge along the shortest path between two other nodes. We can investigate in our case which artists are the more central of our network. . bet_cen = nx.betweenness_centrality(G_artists) . def get_top_keys(dictionary, top): sorted_list = sorted(dictionary.items(), key=lambda item: item[1],reverse=True) return sorted_list[:top] # top ten more central artists top_bet_cen = get_top_keys(bet_cen, 10) . artist_dictionary = top_bet_cen artist_names = [artist_dictionary[i][0] for i in range(0,len(artist_dictionary))] artist_centrality = [artist_dictionary[i][1] for i in range(0,len(artist_dictionary))] # get genres for the artists and genres_central = [total_df[total_df[&#39;std_artist&#39;]==artist][&#39;genre&#39;].iloc[0] for artist in artist_names] artist_bar_plot(artist_names,artist_centrality,genres_central,genre_order,&quot;Most central artists&quot;,&quot;Artist network centrality&quot;) . In terms of betweenness, Mozart tops the classical composers, the Beatles come second, and Sinatra, Dylan and Bowie make the top ten. . The network analysis we have presented in this story is a very simple and naive one, a lot more could be explored using these kinds of techniques. For example, we could use community detection algorithms to explore the network structure and group artists or castaways together, also we could look at the time evolution of the networks to better understand how the cultural landscape of the UK has changed in the last 80 years. We invite the reader to investigate these ideas further! . Discussion . In this data story, we&#39;ve been looking at some of the trends of people and music on Desert Island Discs. As a mainstay of the BBC Radio schedule, it likely will continue for many decades to come, and this analysis could be continued at future milestones. . In this data story, we&#39;ve identified a number of trends: . Male castaways greatly outnumber female castaways, with the shift to a more representative gender balance about 10 years ago. | The age of castaways has increased over time, with a clear trend decade by decade. | The majority of castaways were born in the UK, but guests born in North America were a substantial percentage of early guests. | In the early days of the programme, about half of the castaways were actors; while that percentage has decreased over time, the primary professions continue to be in the creative industries. | The genres of music chosen on the show have evolved substantially over time, with classical music dominant until the mid-1980s, but current choices spread across a much wider range of genres. | When looking at genres chosen by different professions, athletes and bussinesspeople appear to have more popular tastes. | The network analysis reveals interesting connections between castaways and musical artists, with centrality reflecting the most popular, timeless music and artists, across multiple genres. | . After discovering the Desert Island Discs dataset, and some exploratory analysis, this project grew into a fairly long data story. To keep things focused, there are elements of this process that we mention but don&#39;t go into much detail about, and more complicated analysis for which we found a workable shortcut. Future data stories could pick up on a few of these threads, for example data scraping from Wikipedia. Spotify also provides a data for each song that we didn&#39;t use, like danceability, and, as noted above, we could also algorithmically create the metagenres from the microgenres. . It&#39;s worth mentioning again that the data we used was incomplete. Wikipedia did not have complete information about all castaways, and we didn&#39;t always find matches for songs on Spotify. As examples, we were missing information about gender for around 1.5% of castaways, and we were missing profession information for around 10%. While this best-effort attempt limits our analysis somewhat, it is unlikely to substantially change our main findings. . Invited back to the island . As a listener, each Friday and Sunday morning we are invited back to the island to hear someone&#39;s life story through music. But there are some very special guests who are invited back more than once. We close this story by looking at environmentalist and broadcaster David Attenborough&#39;s four episodes. . As a fresh 30-year-old TV presenter for his first appearance with Roy Plomley (06/05/1957), his first disc was Trouble in Mind by Northern Irish blues singer Ottilie Patterson and Chris Barber Jazz Band. When he returned at the age of 52 (10/03/1979), he requested to take the book Shifts and Expedients of Camp Life by William Barry Lord to the island, which he consistently requested for his following two appearances. Sue Lawley welcomed back a 72-year-old Attenborough (25/12/1998) who asked for the luxury of a guitar, having previously taken a piano and binoculars to the island. And finally, for the 70th Anniversary Episode (29/01/2012), Kirsty Young invited him back again, now 85, where the track he saved from the waves was the 3rd of Johann Sebastian Bach&#39;s Goldberg Variations. . With any luck, Lauren Laverne will invite Sir David back again soon, at which point he will have the record for the most episodes all to himself. As he reflects once more on his life and favourite songs, perhaps he will talk about his evolution into a trusted voice on climate action. Hopefully, the rising seas of climate change don&#39;t threaten this island haven of music and autobiography. .",
            "url": "https://alan-turing-institute.github.io/TuringDataStories-fastpages/data%20exploration/data%20wrangling/data%20visualisation/digital%20humanities/2022/03/09/Desert-Island-Discs.html",
            "relUrl": "/data%20exploration/data%20wrangling/data%20visualisation/digital%20humanities/2022/03/09/Desert-Island-Discs.html",
            "date": " • Mar 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Modelling COVID-19 Hospitalizations in England",
            "content": "Author: Eric Daub, Alan Turing Institute . Reviewers: Helen Duncan, Alan Turing Institute; Christina Last, Alan Turing Institute; Luke Hare, Alan Turing Institute . Introduction . On 28 June, 2021, newly installed Health Secretary Sajid Javid announced that the COVID-19 Vaccine Programme in the UK had severed the link between infection and severe disease, hospitalization, and death (see here for the speech made to parliament on this topic). Although cases were rising quickly at the time due to the spread of the Delta variant, this was not leading to as strong a rise in hospital admissions and deaths when compared to the earlier waves of the disease. . However, one problem that had cropped up in the COVID-19 pandemic is that exponential rises in cases, combined with some strong inertia in the causal chains that lead from infection to hospital admission, can obscure a crisis situation that can quickly become much, much worse. The delay between infection and hospital admission can last for a few weeks, so it may be that we just had not waited long enough to see the effect of cases on the hospital admissions at the time of the speech. This story examines a method for analyzing the COVID-19 data in England for 2020-2021 and accounting for uncertainty by applying Bayesian inference to the problem. . Data . The UK has a COVID-19 data website with a public API that allows us to examine daily counts for COVID-19 tests, hospital admissions, deaths, and other statistics surrounding the pandemic. We are principally interested in determining how positive tests collected on a particular date lead to hospital admissions some time later. Because testing was not always consistent in the early days of the pandemic, we will focus our analysis on the fall &quot;second wave&quot; starting in July 2020, using test data starting from May 2020. While the May 2020 data likely includes a time period where widespread testing was not available, we do this to give our model a fixed window of 60 days to link hospital admissions to tests on any of the previous days in the window to ensure that we fully account for the possibility of a long delay between tests and hospital admission. . Similarly, since the first vaccine doses were given in late December 2020, we cut off our period of analysis for fitting the model at 31 December, 2020, to ensure that we fit the model to a time period where we can be confident that no widespread vaccines had been given. We will use this time period to fit the model parameters, and then make predictions on the spring/summer 2021 wave using the model parameters derived from the fall 2020 data. . First, we can look at the COVID test data for England for this time period: . %matplotlib inline import pandas import matplotlib.pyplot as plt def get_data(query_type, start, end): &quot;Queries UK Covid Data API for a particular type of data and returns data queried during a specific time frame&quot; url = &#39;https://coronavirus.data.gov.uk/api/v1/data?filters=areaType=nation&amp;structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22query_type%22:%22query_type%22%7D&amp;format=csv&#39; new_url = url.replace(&quot;query_type&quot;, query_type) df = pandas.read_csv(new_url) df[&quot;date&quot;] = pandas.to_datetime(df[&quot;date&quot;]) query_string = &#39;areaName == &quot;England&quot; &amp; date &gt;= &quot;{}&quot; &amp; date &lt;= &quot;{}&quot;&#39;.format(start, end) return df.query(query_string) cases_str = &quot;newCasesBySpecimenDate&quot; cases = get_data(cases_str, &quot;2020-05-02&quot;, &quot;2020-12-31&quot;) plt.plot(cases[&quot;date&quot;], cases[cases_str]) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Daily positive tests&quot;) plt.xticks(rotation=45); . And for the hospital admissions, we have: . admissions_str = &quot;newAdmissions&quot; admissions = get_data(admissions_str, &quot;2020-07-01&quot;, &quot;2020-12-31&quot;) plt.plot(admissions[&quot;date&quot;], admissions[admissions_str]) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Daily hospital admissions&quot;) plt.xticks(rotation=45); . Model . To examine hospital admissions, we need to develop a model that predicts two things: how many hospital admissions to expect given a number of positive COVID tests, and when those hospital admissions occur. One simple way we might do this is via the following: . All positive tests have a fixed probability $ psi$ of causing a hospital admission at some later date. This is all that is required to determine how many hospital admissions occur given a number of positive tests. | For those that will be admitted to hospital, we then need to determine when the person will go into hospital. We use the following model to determine the date: Every day, a COVID-19 patient that will eventually require hospitalization has a fixed probability $p$ of their condition worsening. | Once their condition has worsened $k$ times, they are admitted to hospital. | This process follows a negative binomial distribution, shifted by $k$ days. An equivalent way to view this is to say that the date of hospital admission follows a multinomial distribution, with the multinomial probabilities following the PMF of a negative binomial distribution, shifted by $k$ days. | | A negative binomial distribution describes the number of successful Bernoulli trials expected before we obtain a fixed number of failures. Note that we need to shift this distribution because we care about the total number of trials before we reach the fixed number of failures, rather than the number of successes. . Once we can predict how many hospital admissions to expect and when they occur, we just need to provide the model with the number of positive tests on each day, and the model will output a prediction of the number of hospital admissions on each day. This can then be compared with the data to estimate the values of $ psi$, $p$, and $k$. . The model is implemented below. Note that since the UK COVID API returns data with the most recent dates first, while our simulation goes forward in time, we need to reverse the cases to feed it into the function that simulates hospitalizations. Note also that we do a few checks of the admission probabilities before they are fed into the multinomial distribution -- this is because the outputs of the admission probabilities sum to greater than one on occasion due to rounding errors, and sometimes we might have accidentally put in a bad number for $k$ that returns NaN values so we would like to prevent these situations from crashing our simulation. . import numpy as np from scipy.stats import binom, nbinom, multinomial def reverse_df_data(df, column): return np.array(df[column], dtype=np.int64)[::-1] def simulate_hospital_admissions(cases, psi, k, p): &quot;Run a random forward simulation of the hospitalizations given cases and the model parameters&quot; daily_hospital_admissions = binom.rvs(n=cases, p=np.broadcast_to(psi, (len(cases),)), size=(len(cases),)) window = 60 dates = np.arange(0, window, 1, dtype=np.int64) admission_probs = nbinom.pmf(dates, loc=k, n=k, p=p) # Run a few checks on admission_probs to avoid issues with multinomial sampling if np.sum(admission_probs) &gt; 1.: admission_probs = admission_probs/(1.+1.e-10) if np.any(np.isnan(admission_probs)): return np.zeros(len(cases)-window, dtype=np.int64) admissions = np.zeros(len(cases)+window) for i in range(len(daily_hospital_admissions)): admit_samples = multinomial.rvs(n=daily_hospital_admissions[i], p=admission_probs, size=1)[0] admissions[i:i+window] += admit_samples return admissions[window:-window] case_array = reverse_df_data(cases, cases_str) admissions_array = simulate_hospital_admissions(case_array, 0.1, 4, 0.1) plt.plot(admissions[&quot;date&quot;][::-1], admissions_array) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Simulated daily hospital admissions&quot;) plt.xticks(rotation=45); . If you try simulating different choices of $ psi$, $p$ and $k$, you can see that the parameters that control the timing of admissions does have an effect on the overall size and shape of the peak (or peaks). Thus, we need to find a way to use the actual hospitalization data to fit reasonable values for these simulation parameters. . Bayesian Inference . To fit the model and account for uncertainty, we will turn to Bayesian Inference. Bayesian Inference treats our model parameters $ theta = ( psi, p, k)$ as uncertain and thus described by a probability distribution. We wish to compute the posterior distribution of our parameters conditioned on the observed hospitalization data from the fall 2020 $y$, written $p( theta|y)$. To compute this, we use Bayes&#39; rule . $$p( theta|y)= frac{p(y| theta)p( theta)}{p(y)}$$ . which relates the posterior to the likelihood $p(y| theta)$, or the probability that a given choice of parameters would have produced the data, our prior beliefs about reasonable parameter values $p( theta)$, and the evidence $p(y)$, which is the probability of getting the data given all possible models. In most cases, computing the evidence is not feasible, so we resort to drawing samples from the posterior distribution rather than computing the distribution analytically. . Prior . We need to specify our initial beliefs about what we expect might be reasonable model parameters. Based on previous reporting on the pandemic, we expect a relatively small fraction of positive tests to result in hospital admissions. We can quantify this through a Beta distribution, a flexible distribution well suited for modeling parameters that are constrained between 0 and 1. Beta distributions have two shape parameters $a$ and $b$ (or $ alpha$ and $ beta$) that control where the distribution has highest density. We want our priors to be skewed towards small numbers, so we will choose $a=0.5$ and $b=2$, which puts most of the distribution mass at smaller values. . For $k$ and $p$, we might want to consider information that hospital admissions usually occur a week or two after contracting the disease. However, there are two ways our model might express this: $k$ and $p$ could both be large, meaning that the patient has a high probability of their conditions worsening a little bit each day, eventually leading to a (predictable) hospital admission a large number of days later. Alternatively, $p$ and $k$ might both be small. This would describe the situation where the person testing positive has a low chance of their symptoms getting significantly worse every day, but when it does get worse they must be hospitalized quickly. This will lead to more variability in the exact hospitalization date. We have no reason to prefer either possibility, nor would we like to exclude either possibility, so we will use uniform priors for $k$ and $p$ (a Discrete Uniform distribution for $k$ between 1 and 20 and a Beta distribution with $a=1$ and $b=1$ for $p$). . Finally, we should note that the model for determining when a patient goes into hospital is probably not a very realistic description of how a COVID-19 infection proceeds. Rather, we should think more about the two end member cases described above as ways of capturing exactly when, on average, patients need to be admitted to hospital, and the variability in when that occurs. Looking at the values that best fit the data thus tells us more about the type of model that tends to fit the data, rather than providing actual clinical insight into the disease. . Likelihood . The data for this model is a time series of hospital admissions that is a superposition of many Multinomial distributions. The likelihood for this model unfortunately does not exist in closed form. However, we can easily run a forward simulation of the approach by sampling from the appropriate probability distributions, so we will resort to a method known as Approximate Bayesian Computation (ABC) to approximate the likelihood. . Rather than requiring that the forward model produce exactly the same set of hospital admissions as is seen in the data (which is unlikely due to the fact that we are performing a single random sample when we run the forward simulation), we will instead try to find a model that is fairly close to the data. We use a Gaussian measure of dissimilarity, which penalizes models that show a large difference between the real data and the model predictions. The Gaussian measure depends on an additional parameter $ epsilon$, which can be thought of as a tolerance parameter that sets the scale for how much to penalize the difference between the real and simulated data. . We use $ epsilon=500$ here due to the number of daily hospitalizations being in the thousands at the peak, or in other words we want to penalize models that differ by more than around 500 between the real and simulated data. However, some experimenting with values from 10 to 2000 has shown that the exact results are not too sensitive to the choice of this parameter so we can be confident that the results do not depend too much on this choice. . Sequential Monte Carlo Sampling . As discussed above, rather than compute the posterior directly, we will draw samples from it. To do so, we will use a technique known as Sequential Monte Carlo (SMC) sampling, or, in some other contexts, Particle Markov Chain Monte Carlo. SMC is a method for sampling from an unknown distribution (the posterior) by instead sampling from a known distribution (the prior) and then resampling based on weights determined from the computed likelihood $ times$ prior for each sample. The higher the weight of a particular sample, the higher the probability it will be re-sampled and remain in the set of samples taken at the next step. Thus, over time, the samples where the posterior is highest will be repeatedly passed on to the next step, while those where the posterior is lower will be removed. . This resampling technique works best if the two distributions are similar. Because we expect the prior and posterior to be quite different, SMC gradually tunes between the prior and posterior by resampling from $q propto p(y| theta)^ beta p( theta)$ at each step, where $ beta$ varies from 0 to 1. This ensures that the two distributions are reasonably similar at each step and the resampling technique will be accurate. . In addition to resampling, which ensures that good samples are likely to show up in successive steps, SMC also perturbs the samples at each step using a Markov Chain Monte Carlo random walk to ensure that the method explores the regions surrounding good samples. Both the tempering and exploration can be tuned adaptively based on the results of the sampling to try and optimize the number of steps needed to move between the prior and the posterior. This helps to balance accuracy of the sampling with the computational cost. . Implementation . Below, I implement this model and draw samples from it using the PyMC3 library. The Simulation class in PyMC3 allows us to do ABC inference and draw the samples using SMC without having the explicit likelihood implemented in the library. . Note also that I need to bind the array of cases to the simulation function, which I do so using the partial function in the functools module -- this is because the PyMC3 Simulation class requires that the only parameters that are passed to the simulation be the model parameters that we are trying to estimate. Since the actual cases are known, and are not estimated, we need to fix that value of the input. . Finally, PyMC3 by default draws multiple sets of samples based on the number of cores on the computer, so I set the number of chains to be 1 to give consistent results across different machines. Be aware that to draw the full set of 2000 samples, the simulations were run for roughly 10 minutes on a MacBook Pro. . from functools import partial import pymc3 def fit_model(simulation, cases, hospitalization, epsilon): simulate_hospital = partial(simulation, cases=cases) with pymc3.Model(): psi = pymc3.Beta(&quot;psi&quot;, alpha=0.5, beta=2.) p = pymc3.Beta(&quot;p&quot;, alpha=1., beta=1.) k = pymc3.DiscreteUniform(&quot;k&quot;, lower=1, upper=20) sim_admissions = pymc3.Simulator(&quot;admissions&quot;, simulate_hospital, params=(psi, k, p), epsilon=epsilon, observed=hospitalization) trace = pymc3.sample_smc(kernel=&quot;ABC&quot;, chains=1) return trace obs_array = reverse_df_data(admissions, admissions_str) epsilon = 500. trace = fit_model(simulate_hospital_admissions, case_array, obs_array, epsilon) . Initializing SMC sampler... Sampling 1 chain in 1 job Stage: 0 Beta: 0.004 Stage: 1 Beta: 0.020 Stage: 2 Beta: 0.067 Stage: 3 Beta: 0.177 Stage: 4 Beta: 0.382 Stage: 5 Beta: 0.654 Stage: 6 Beta: 1.000 . Results . Posterior Distribution . First, we can look at the posterior samples to learn about the type of model that fits the data. We see that $ psi$ has a peak around 9%, meaning that proportion of positive tests lead to hospitalization. The distribution is fairly tight around this value, so there is not much uncertainty in this parameter. . For $p$ and $k$, we see that most of the samples tend to favor the low $p$, low $k$ model described above. As previously discussed, this is not necessarily a realistic model of how an infection evolves, but rather a way of understanding the uncertainty in when a patient goes into hospital. What is important is that there is variability in when we expect positive tests on a given day to lead to later hospitalizations. . plt.subplot(131) plt.hist(trace[&quot;psi&quot;], bins=10) plt.xlabel(&quot;$ psi$&quot;) plt.subplot(132) plt.hist(trace[&quot;p&quot;], bins=10) plt.xlabel(&quot;p&quot;) plt.subplot(133) plt.hist(trace[&quot;k&quot;], bins=list(range(0, 20))); plt.xlabel(&quot;k&quot;) plt.tight_layout() . Posterior Predictive Samples . We can look at the range of simulated outcomes and compare these (along with some summary statistics) to the actual evolution in cases. . def draw_posterior_samples(cases, trace): &quot;Draw samples from the simulation using the SMC samples&quot; samples = [] for s in trace: samples.append(simulate_hospital_admissions(cases, s[&quot;psi&quot;], s[&quot;k&quot;], s[&quot;p&quot;])) return np.array(samples) def compute_posterior_statistics(samples): &quot;Compute mean and credible intervals from posterior samples&quot; mean = np.mean(samples, axis=0) quantile_005 = np.quantile(samples, 0.005, axis=0) quantile_995 = np.quantile(samples, 0.995, axis=0) return mean, quantile_005, quantile_995 def plot_data_with_samples(cases, admissions, trace): samples = draw_posterior_samples(cases, trace) mean, quantile_005, quantile_995 = compute_posterior_statistics(samples) plt.plot(admissions[&quot;date&quot;][::-1], samples.T[:,:100], color=&quot;C0&quot;, alpha=0.2) plt.plot(admissions[&quot;date&quot;], admissions[admissions_str], color=&quot;C1&quot;, label=&quot;Data&quot;) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Daily Hospital Admissions&quot;) plt.plot([], [], color=&#39;C0&#39;, alpha=0.2, label=&#39;Posterior Samples&#39;) plt.plot(admissions[&quot;date&quot;][::-1], mean, color=&quot;C2&quot;, label=&quot;Mean&quot;) plt.plot(admissions[&quot;date&quot;][::-1], quantile_005, color=&quot;C3&quot;, alpha=0.5) plt.plot(admissions[&quot;date&quot;][::-1], quantile_995, color=&quot;C3&quot;, alpha=0.5, label=&quot;99% Credible Interval&quot;) plt.legend() plt.xticks(rotation=45) plot_data_with_samples(case_array, admissions, trace) . The model is able to capture the overall dynamics of the fall 2020 wave, including the rise in admissions in October 2020, the decrease in late November 2020 due to the second national lockdown which began on 5 November, 2020, and the continued rise through Christmas 2020 when the third national lockdown came into effect on 6 January, 2021. . Interestingly, the model has difficulty capturing the timing of the decrease at the end of the second lockdown, where the actual data strays outside of the 99% interval on the posterior samples. One reason this might occur is that during the second lockdown, schools remained in session, while most other non-essential sectors of the economy were forced to close. This means that younger children probably saw a smaller decrease in their exposure to COVID than most adults (many of whom were just staying home and not going to work). This likely changed the underlying demographics of the population testing positive to skew younger. We expect fewer hospitalizations in a younger population, which might explain the more rapid drop in admissions in late November 2020 in the real data when compared to the simulations. This appears to be a consistent feature of all models that were fit to the data, suggesting this is a change in the data rather than a shortcoming of the model. . Predicting the Spring 2021 Wave . We can now query the data for the spring/summer 2021 increase in cases, and forecast what the model fit on the fall 2020 data would predict. We simulate the spring/summer 2021 wave for all sets of samples that were drawn from the posterior to determine the posterior predictive distribution, and then for each point in time we can compute credible intervals to put uncertainty bounds on the predicted hospitalizations if the spring/summer 2021 wave could be modelled with the same parameters as the fall 2020 wave: . spring_cases = get_data(cases_str, &quot;2021-03-02&quot;, &quot;2021-09-30&quot;) spring_case_array = reverse_df_data(spring_cases, cases_str) spring_admissions = get_data(admissions_str, &quot;2021-05-01&quot;, &quot;2021-09-30&quot;) plot_data_with_samples(spring_case_array, spring_admissions, trace) . As we can see, the model predicts substantially more hospitalization (by a factor of about 4-5) than is observed in the data, lending credence to the claim that the link between infections and hospital admissions had been weakened. Additionally, the uncertainty in the prediction is much smaller than the observed differences, suggesting that this would need to be due to some extremely rare fluke if there had not been any changes in the underlying population being exposed to COVID. Note also that the fluctuations in the number of hospital admissions predicted in summer 2021 are quite large (roughly a difference of 1000 between the lowest and highest estimates). This suggests that despite months of data on infections and hospitalizations there is still considerable uncertainty in understanding how much hospital care a population exposed to COVID will require. This should highlight the need for careful consideration of the modelling assumptions that are made in any forecast of the effect of an emerging, uncertain infectious disease on the vulnerable members of a population. . Discussion . Why might the link between infections and hospitalizations be weaker? One obvious reason is vaccination, which is what was highlighted by the Health Secretary in his announcement. While this almost certainly played a big role, we cannot necessarily attribute the entire effect to this. Why? . As mentioned above, we saw that the model had difficulty handling the data during the second national lockdown, and one possible explanation was a change in the population testing positive. Indeed, during the time period under consideration, schools were open while other parts of the economy remained under restriction, meaning that it is possible that more testing in schools could be partially responsible for this difference. Since young people received vaccines later than the elderly population during spring/summer 2021, we would expect that as time progresses, the population that tests positive should gradually skew younger, which could explain some of the reduction in hospital admissions over spring/summer 2021. However, we can potentially estimate the magnitude of this effect by looking at the November 2020 data, which shows a reduction of a few hundred hospital admissions. This is substantially smaller than the observed differences, so it is unlikely to explain the full discrepancy between the model and the data. . Given that we are confident that the data differs from the predictions, how might we account for vaccinations? One possibility is to make $ psi$ no longer a constant, but rather a function of the single and double dose vaccination rates, possibly with a time lag to allow for immunity to build up. We might also fit three different $ psi$ values for 0, 1, or 2 vaccine doses, though since vaccinated people are less likely than unvaccinated people to become infected, we would also need to estimate the chances of infection which is likely to be difficult. This is particularly true due to the fact that infection rates can be very locally heterogeneous, as pockets of the population with more or less vaccination coverage will see very different infection rates. . Regardless of the exact cause of this reduced hospitalization risk, the change in the data clearly shows that this wave of the pandemic differs from the previous ones. As the UK Government shifts its policies to one of learning to live with the virus, rather than one of actively suppressing it, data on infections and hospitalizations will continue to provide valuable insight into the evolution of the pandemic and should be guiding our decisions and behavior. Hopefully, this model provides an example of how this can be done with an eye for building simple, interpretable models that robustly account for uncertainty. .",
            "url": "https://alan-turing-institute.github.io/TuringDataStories-fastpages/bayesian%20modeling/covid-19/2021/11/03/vaccine-Efficacy.html",
            "relUrl": "/bayesian%20modeling/covid-19/2021/11/03/vaccine-Efficacy.html",
            "date": " • Nov 3, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "French Pastries, Baseball Players, and Marginal Utility",
            "content": "Author: . Eric Daub, Alan Turing Institute (Github: @edaub) | . Reviewers: . Jack Roberts, Alan Turing Institute (Github: @jack89roberts) | Nick Barlow, Alan Turing Institute (Github: @nbarlowATI) | . Introduction . I was recently chatting with a friend about the respective merits of the French pastries available at our local bakery: . Friend: What do you think of the pastries? Are they good? Me: Yes, though there is another bakery further out of town that I prefer. Friend: You don&#39;t think these are as good? Me: No, but not so much worse that I&#39;d walk a half hour each way to get those since I don&#39;t have a car. They are definitely better than the ones you get at Pret A Manger which you can find in every train station and city center, so definitely well above a replacement level crossaint. Friend: What do you mean by that, replacement level? Me: Oh, it&#39;s a term that baseball statisticians use to measure if it&#39;s worth paying money for a particular player. The idea is to come up with some baseline that&#39;s easily available, and then try to determine how much better something is than that. Economists call this &quot;Marginal Utility.&quot; Friend: [Silence] Me: [To myself] Did I really just say &quot;replacement level crossaint?&quot; . While I took a course in Economics when I was an undergraduate, I definitely did not completely understand the concept of Marginal Utility until I started reading more about baseball statistics (no doubt beginning with my dog-eared copy of Moneyball by Michael Lewis). The idea is that to compare two goods that have different prices, I need to determine how much additional value I get out of the more expensive one to justify the extra expense. Regarding crossaints, the extra cost of the better bakery was my time, which I determined would be better spent doing something else and thus the marginal utility of the fancier bakery was not worth it. . The undergraduate version of me certainly nodded when the professor talked about this in class, as it sounds simple enough. But what I failed to appreciate back then is the idea that to really understand value in some absolute sense, we need to compare these things to some baseline level that I can always acquire without any effort and minimal expense, something that the baseball statisticians were able to very clearly articulate. In terms of pastries, this was the fare available at the Pret just around the corner -- always available for 2 pounds no matter where I am without having to walk a long way, always the same product as they are no doubt churned out en masse at some factory bakery. . Replacement Level . In baseball, this baseline level is referred to as &quot;replacement level.&quot; Conceptually, replacement level does not refer to any player in particular, but rather some theoretical player that any team can acquire at any time with minimal effort (either time or money). We can think of these players as being effectively in infinite supply (by infinite, what we really mean is that &quot;there are far more players of this caliber than there are jobs available on Major League Baseball teams&quot;). If we put a bunch of these theoretical players on the field and played 162 games (a full MLB season), they would not be a particularly good team, but they would be cheap. To win more games than this theoretical team would win, I need to spend some additional time or money in finding players that are better than this replacement level. . One thing to note is that this level is not the average of all players in the league -- presumably all of the teams have made considerable effort to spend resources to make their team better, so the league average will reflect some amount of value above this level. How much more valuable is an average player than a replacement level? Most statisticians put replacement level at around 80% of the league average (see for instance the Wikipedia page). . On face, this all seems quite sensible. But recently, I asked myself: why is this a reasonable level? Why 80%? Why not 25%, or 95%? And can we be more precise about why 80% represents this &quot;easily findable value&quot; and what it really means in a statistical sense? This is one of the main criticisms of the statistical effort to estimate replacement value. In the following analysis, I present one way to try and make this estimate more concrete and not include any arbitrary numbers in it. . A Primer on Baseball . Given that baseball is more popular in some parts of the world than others, I give a brief description of the rules of the game in this section. If you are already familiar with the sport, feel free to skip ahead. If the summary in this section is too brief, the Wikipedia page contains more details. . Baseball is a bat and ball game where teams take alternate turns attempting to hit a ball thrown by the defensive team. The field of play is roughly diamond shaped, with four bases placed in a counterclockwise direction around a square: . . The hitters start from &quot;home plate&quot; at the base of the diamond (not labelled on the above image, but it is between the batter&#39;s and catcher&#39;s boxes), then first, second, and third bases proceed around the square. The objective of the offensive team is to hit the ball, thrown from the pitcher&#39;s mound at the center of the bases towards home plate, into the field of play between the foul lines in a way that the defensive players are (1) unable to catch the ball before it hits the ground and (2) not able to retrieve the ball and throw it to first base before the offensive player is able to run from home plate to first base. If the offensive player is not successful, then an &quot;out&quot; is recorded, while if the player is able to hit the ball safely, then they are able to remain on the bases and the next member of the team can attempt to hit the ball. . However, the offensive player may not always be able to hit the ball. If the pitcher can successfully cause the hitter to miss the ball three times (called &quot;strikes&quot;), the offensive player makes an out, while if the pitcher throws four pitches that are deemed not to be hittable (called &quot;balls&quot;), then the hitter does not make an out and is awarded first base (a &quot;walk&quot; or &quot;base on balls&quot;, abbreviated BB). Alternatively, if the pitcher throws the ball and it hits the body of the batter (hit by pitch, abbreviated HBP), then that player is awarded first base in the same way as a walk. All attempts by an offensive player thus either result in an out, or the player successfully reaches the bases and the offensive team is able to continue hitting. . If the offensive team is able to advance a player completely around the bases (first, second, third, and then back to home plate), then a point is scored (also called a &quot;run&quot;). If the defensive team is able to record three outs, then the offensive team is out of chances to score and the defensive and offensive teams switch places. Each successive series of attempts is known as an &quot;inning,&quot; and a game consists of 9 innings. . Different types of hits are able to advance runners more bases, so players that are able to do this more often are inherently more valuable. Hits that go for 2 bases are known as &quot;doubles&quot; (2B), 3 bases are known as &quot;triples&quot; (3B) and hits that leave the field of play are known as &quot;home runs&quot; (HR) and all players on the bases are able to advance to home plate. Additionally, one base hits (&quot;singles&quot;, or 1B) tend to advance existing runners multiple bases, as they are often able to get a running start, while walks only allow players to advance if the runner at the previous base is forced to advance. However, the analysis below will ignore the value of baserunning, and instead focus on the above types of hits. . Finally, some types of outs are traditionally treated differently in baseball statistics, as they have a positive effect in that they are able to advance a runner along the bases despite the negative value associated with making an out. These are known as sacrifice hits (abbreviated SH or SF for sacrifice flies), and are usually not counted towards the number of attempts a player is credited with when looking at hitting statistics. Additionally, for historical reasons walks are not counted towards the number of attempts a player is credited with either. Because of these quirks, the number of official &quot;at bats&quot; (abbreviated AB) will be different from the number of &quot;plate appearances&quot; (abbreviated PA). However, since walks create positive value, while sacrifice hits still make an out, we will care more about the number of plate appearances rather than the more common at bats. . Data . In this story, I use the publically available and widely used Lahman Baseball Database. This database is known for its full coverage of most of MLB history, and includes all of the standard batting and pitching statistics for all players for all seasons. It is maintained by a group of volunteers who tabulate statistics and have gone through past newspaper archives to collect the extensive data that it contains. It is available in a number of SQL formats, as well as the raw CSV files, and is updated every year. . In the following, I will use the SQLite version of the database that runs through the 2019 season (it can be found here). I choose this mostly because Python has built-in support for SQLite, and since I will be using this database as a standalone data source, I don&#39;t have to worry about setting up a server, dealing with concurrent users, or modifying the database. . The tables of the Lahman database are described in the documentation. I will mainly be using the batting table, which contains the relevant hitting statistics and can easily be queried to pull out the specific data that I need to perform this analysis. As a reference, here is a table of the abbreviations used in the database and our data frame: . Symbol Description How to Calculate . AB | At Bats | | . H | Hits | | . 2B | Doubles | | . 3B | Triples | | . HR | Home Runs | | . BB | Walks | | . IBB | Intentional Walks | | . HBP | Hit By Pitch | | . SH | Sacrifice Hits | | . SF | Sacrifice Flies | | . PA | Plate Appearances | AB + BB + IBB + HBP + SH + SF | . O | Outs | AB + SH + SF - H | . 1B | Singles | H - 2B - 3B - HR | . Note there are a few statistics we need that are derived from the other statistics: . Plate Appearances (PA) are all at bats, plus all special cases (i.e. walks and sacrifices) where the player came up but did not result in an at bat. | Outs are the number at bats plus all sacrifices (i.e. outs that are not counted in at bats), minus the number of hits. | Singles (1B) are the number of hits minus all hits resulting on multiple bases (doubles, triples, and home runs). | . %matplotlib inline . import pandas import numpy as np import sqlite3 import scipy.stats import matplotlib.pyplot as plt conn = sqlite3.connect(&quot;lahmansbaseballdb.sqlite&quot;) year = 2019 . Once I have connected to the database, I can query the batting table to get the full statistics for all hitters that registered at least 10 at bats in the most recent full season (2019) and load into a data frame using pandas: . df = pandas.read_sql(&#39;select * from batting where yearID = {} and AB &gt; 10&#39;.format(year), conn) df.head() . ID playerID yearID stint teamID team_ID lgID G G_batting AB ... RBI SB CS BB SO IBB HBP SH SF GIDP . 0 105864 | abreujo02 | 2019 | 1 | CHA | 2900 | AL | 159 | None | 634 | ... | 123 | 2 | 2 | 36 | 152 | 4 | 13 | 0 | 10 | 24 | . 1 105865 | acunaro01 | 2019 | 1 | ATL | 2897 | NL | 156 | None | 626 | ... | 101 | 37 | 9 | 76 | 188 | 4 | 9 | 0 | 1 | 8 | . 2 105866 | adamecr01 | 2019 | 1 | SFN | 2920 | NL | 10 | None | 22 | ... | 2 | 0 | 0 | 2 | 8 | 0 | 0 | 0 | 0 | 0 | . 3 105867 | adamewi01 | 2019 | 1 | TBA | 2922 | AL | 152 | None | 531 | ... | 52 | 4 | 2 | 46 | 153 | 1 | 3 | 3 | 1 | 9 | . 4 105874 | adamsma01 | 2019 | 1 | WAS | 2925 | NL | 111 | None | 310 | ... | 56 | 0 | 0 | 20 | 115 | 1 | 2 | 0 | 1 | 7 | . 5 rows × 25 columns . This only gives us the raw numbers for these players, and the player is identified with a playerID rather than their full name. If I want to get the names, I need to do a join with the people table: . df = pandas.read_sql(&#39;&#39;&#39;select nameLast, nameFirst, AB, H, &quot;2B&quot;, &quot;3B&quot;, HR, BB from batting inner join people on batting.playerID = people.playerID where yearID = {} and AB &gt; 10&#39;&#39;&#39;.format(year), conn) df.head() . nameLast nameFirst AB H 2B 3B HR BB . 0 Abreu | Jose | 634 | 180 | 38 | 1 | 33 | 36 | . 1 Acuna | Ronald | 626 | 175 | 22 | 2 | 41 | 76 | . 2 Adames | Cristhian | 22 | 7 | 1 | 0 | 0 | 2 | . 3 Adames | Willy | 531 | 135 | 25 | 1 | 20 | 46 | . 4 Adams | Matt | 310 | 70 | 14 | 0 | 20 | 20 | . While it is useful to be able to identify particular players, I am most interested the distribution of outcomes over the entire league, I don&#39;t particularly care which players are which. Thus, most of the time I will just be doing the same query of the batting table to pull out hitting statistics. . However, one non-trivial thing to consider is that players that play different defensive positions have different expectations associated with their batting ability. The most important correction by far is the fact that pitchers tend to be significantly worse hitters than players that play other defensive positions (colloquially referred to as &quot;position players&quot;), though this also applies to other defensive positions to a lesser extent. Pitchers tend to be worse hitters than average, in large part because they get less regular at bats due to the fact that they only pitch every few days. To make a fair comparison, I would thus like to look only at position players, so for the query that I need I will need to do a join on the appearances table. This table lists how many games a player appeared as a pitcher, so I can filter out all players that appeared in a game as a pitcher to exclude them from the analysis. . Runs Created . At a basic level, baseball comes down to two things: runs and outs. Outs occur when a player fails to get a hit. Each game consists of 27 outs per team, so the goal is to not make outs, and instead produce a positive outcome. If a player does not make an out, then there are several possible outcomes: the player can safely hit the ball somewhere, which allows the player and the player&#39;s teammates to advance around the bases a certain amount, or the player can be awarded a base without getting a hit (either through a walk or a hit by pitch). Hits can be singles, doubles, triples, or home runs which advance the batter 1, 2, 3, or 4 bases, respectively (n.b. hits tend to advance any teammates already on the bases a different number of bases, but it turns out that the metric below does a reasonable job of accounting for this as it turns out that a double is about twice as valuable as a single, a triple is three times as valuable, etc.). . While the main goal is to not make outs, hitters that are more likely to advance players by more than one base at a time are more likely to create more runs, as if they have other players already on the bases, they are more likely to score runs. The simplest way that we can account for this is through a metric known as &quot;Runs Created,&quot; which was designed by the baseball statistician Bill James and tries to approximate the number of runs that a player is likely to have produced through their hitting ability. The formula is . $$RC = { rm Success : rate} times{ rm Total : bases} = frac{H+BB}{PA} times TB$$ . Here, $H$ is the number of hits, $BB$ is the number of walks, $PA$ is the number of attempts, and $TB$ is the total number of bases the player advanced through their hits. Note that this is a rate multiplied by a counting stat, ultimately resulting in a counting stat. Note however that the added rate factor means that if two players produce the same number of total bases, but one does it in fewer opportunities or draws more walks, the metric will give more value to the player with the better rate stat. . This statistic was derived mostly on an empirical basis, but for some intution as to why it works imagine that someone gets 4 hits in 16 opportunities, of which two are singles, one is a double, and one is a home run. Then the success rate is 1/4, while the total number of bases are eight, leading to two runs created. Obviously, the home run must have created one run. Thus, the combined value of all the other hits (plus the chances that someone else was on the bases when they hit the home run) is such that statistically, this player&#39;s production increased the number of runs the team scored over the entire season by one. Note that it does not mean that those hits produced one actual run, but rather that given a typical set of scenarios under which those hits took place, the player&#39;s team likely scored one additional run due to those hits. . I can pull out the basic statistics that I need to compute Runs Created with the following SQL query, which I will wrap in a function for convenient further use. As mentioned above, to exclude pitchers I need to do an inner join on the appearances table, which allows me to filter out the pitchers and just focus on position players in this analysis. . I generate 7 columns in this query: the total number of attempts (PA or &quot;Plate Appearances&quot;), number of outs (O), and then 5 additional columns for the types of hits/walks so that I can convert these to the total number of bases. Some statistics, such as sacrifice flies (SF) and intentional walks (IBB) are not recorded for all years, so I use the SQL coalesce function to convert the null values to zero if necessary. . def rc_base_query(year, conn): &quot;Base query for getting statistics for computing Runs Created&quot; return pandas.read_sql(&#39;&#39;&#39;select AB + BB + coalesce(IBB,0) + HBP + SH + coalesce(SF,0) as PA, AB + SH + coalesce(SF, 0) - H as O, BB + coalesce(IBB,0) + HBP as BB, H - &quot;2B&quot; - &quot;3B&quot; - HR as &quot;1B&quot;, &quot;2B&quot;, &quot;3B&quot;, &quot;HR&quot; from batting inner join appearances on batting.playerID = appearances.playerID and batting.yearID = appearances.yearID where batting.yearID = {} and AB &gt; 10 and appearances.G_p = 0&#39;&#39;&#39;.format(year), conn) print(len(rc_base_query(year, conn))) rc_base_query(year, conn).head() . 708 . PA O BB 1B 2B 3B HR . 0 627 | 428 | 58 | 83 | 33 | 6 | 19 | . 1 38 | 22 | 7 | 4 | 3 | 1 | 1 | . 2 78 | 57 | 6 | 5 | 4 | 0 | 6 | . 3 452 | 311 | 49 | 72 | 11 | 2 | 7 | . 4 702 | 475 | 56 | 97 | 29 | 10 | 35 | . Because players make outs in the process of producing runs, we will want to normalize the runs created by the outs consumed to create these runs, which turns this back into a rate stat and thus allows us to compare across players regardless of the number of attempts. We can thus view the results of all players over a full season on a histogram this way. . def runs_created(season_stats): &quot;computes runs created per out from a data frame/array holding plate appearances, outs, singles, doubles, triples, and home runs&quot; if isinstance(season_stats, pandas.DataFrame): plate_appearances = season_stats[&quot;PA&quot;] outs = season_stats[&quot;O&quot;] walks = season_stats[&quot;BB&quot;] singles = season_stats[&quot;1B&quot;] doubles = season_stats[&quot;2B&quot;] triples = season_stats[&quot;3B&quot;] home_runs = season_stats[&quot;HR&quot;] else: if season_stats.ndim == 1: # Only the stats of a single player season_stats = np.reshape(season_stats, (1, -1)) plate_appearances = np.sum(season_stats, axis=-1) outs = season_stats[:,0] walks = season_stats[:,1] singles = season_stats[:,2] doubles = season_stats[:,3] triples = season_stats[:,4] home_runs = season_stats[:,5] # scrub any player that made no outs nz_outs = (outs &gt; 0) rc = (1.-outs/plate_appearances)*(singles + 2*doubles + 3*triples + 4*home_runs) return rc[nz_outs]/outs[nz_outs] def rc_histogram(*args, scale=&quot;linear&quot;): &quot;plot a histogram of any number of runs created arrays/sequences on a linear or logarithmic scale&quot; for rc in args: if scale == &quot;log&quot;: rc_data = runs_created(rc) dist = np.log(rc_data[rc_data &gt; 0.])/np.log(10.) bins = np.linspace(-4., 1., 100) else: dist = runs_created(rc) bins = np.linspace(0, 1.5, 100) plt.hist(dist, bins=bins, density=True) if scale == &quot;log&quot;: plt.xlabel(&quot;Log Runs Created/Out&quot;) else: plt.xlabel(&quot;Runs Created/Out&quot;) plt.ylabel(&quot;Probability density&quot;) season_stats = rc_base_query(year, conn) rc_histogram(season_stats) . As we can see, the bulk of the distribution is around 0.2, and then the numbers fall off as we move out towards 0.4, with only a few players managing more than that. . As an aside, the raw numbers here are illustrative of the general idea behind using Runs Created to measure a player&#39;s ability, but this simple version does not account for a number of well-known additional effects: . We have not measured baserunning ability. Total bases only includes the bases advanced by the players hitting, not their ability to run the bases once on base. More complex formulae can better account for this effect by including stolen bases. However, more general baserunning ability that allows a runner to advance on another teammate&#39;s hits is not measured in the stats we have available in this database so we cannot account for that here. | We also have not corrected for the fact that different stadiums tend to produce more runs than others, so a player that has half of their opportunities in a stadium that is friendly to hitters will get a boost for which an empirical correction can be made. | One final, and more subtle issue, is the fact that the best players will be overvalued here because they cannot possibly be on base when they come up to hit (i.e. a player that is significantly better than their teammates will have fewer people on base than would be expected from the average). Since the statistic assumes that everyone has an average number of people on base for their hits, this will be biased towards the better players that will in general have fewer people on base. | . More sophisticated techniques are needed to treat these effects, but won&#39;t change the overall way that we convert this distribution into a replacement level value, so we will ingore these additional effects going forwards. As mentioned earlier, a good heuristic estimate of replacement level can be found by taking 80% of the mean, so from these calculations we can estimate replacement level: . def heuristic_replacement_level(season_stats): &quot;calculate empirical replacement level statistic using 80% heuristic&quot; return 0.8*np.mean(runs_created(season_stats)) print(&quot;Heuristic replacement level for {}: {} runs/out&quot;.format(year, heuristic_replacement_level(season_stats))) . Heuristic replacement level for 2019: 0.1321843895833081 runs/out . This suggests that creating 0.13 runs per out is a good baseline for comparison for a position player. However, it is not clear why this is the case. The distribution is strongly peaked near 0.2, then falls off towards zero, so it&#39;s not obvious where in the distribution below the mode we should set a cut off for replacement level. The tail of the distribution is also quite heavy, with small numbers of players producing lots of runs. Are these players really so much better than the others, or is this just luck? To address this, we need a way to simulate the season many times to estimate what we expect this distribution to look like with more samples so that we can scrutinize it in more depth. . Multinomial Bayesian Inference . To simulate many versions of the same season, we turn to Bayesian Inference. Bayesian models treat their parameter values as probability distributions, which allows us to quantify the uncertainty in the underlying model and propagate that uncertainty forward in additional simulations. Formally, we treat each parameter $ theta$ in the model as a probability distribution, and determine what our updated beliefs about the parameter values are once we view the data $y$, $p( theta|y)$. Computing this probability distribution is done via Bayes&#39; Rule: . $$p( theta|y) = frac{p(y| theta)p( theta)}{p(y)}$$ . $p(y| theta)$ here is the likelihood, or the probability of the data given a particular value of the model parameters. $p( theta)$ is the prior, our initial beliefs about reasonable values of the parameter. $p(y)$ is known as the evidence, and is the probability of getting the data over all possible realizations of the experiment. This rule lets us convert the likelihood, which is generally more straightforward to compute, to the posterior by weighting it using the prior and evidence. . Multinomial Distribution . What model might we use to describe a hitter? At the most basic level, we can think of a hitter as a set of probabilities that they will make an out, draw a walk hit a single, hit a double, etc. Thus, a set of six probabilities that sum to 1 is a straightforward way of capturing the abilities of a hitter. Once we have those five probabilities, the outcome of a series of hitting attempts is described by a Multinomial distribution. . For example, if I am a hitter and I have a 60% chance of making an out, a 10% chance of drawing a walk, 20% chance of hitting a single, 5% chance of hitting a double, 1% chance of hitting a triple, and 4% chance of hitting a hume run, then if I come up to bat 100 times I would expect the following distribution of outcomes: . def plot_multiple_distributions(samples): &quot;make a plot of multiple components of probability samples&quot; assert samples.shape[-1] == 6, &quot;samples must have 6 components&quot; labels = [&quot;Out&quot;, &quot;Walk&quot;, &quot;Single&quot;, &quot;Double&quot;, &quot;Triple&quot;, &quot;Home Run&quot;] plt.figure(figsize=(12,4)) for i in range(6): plt.subplot(int(&quot;16&quot;+str(i+1))) plt.hist(samples[:,i], bins=25) plt.xlabel(labels[i]) plt.tight_layout() def plot_multinomial(n_samples, n_trials, p): &quot;plot the distribution of outcomes from a set of multinomial trials&quot; assert n_samples &gt; 0, &quot;number of samples must be greater than zero&quot; assert n_trials &gt; 0, &quot;number of trials must be greater than zero&quot; assert p.ndim == 1, &quot;p must be a 1D array&quot; assert np.all(p &gt;= 0.) and np.sum(p) == 1., &quot;all probabilities must be positive and sum to 1&quot; samples = scipy.stats.multinomial.rvs(n=n_trials, p=p, size=n_samples) plot_multiple_distributions(samples) hypothetical_player_probs = np.array([0.6, 0.1, 0.2, 0.05, 0.01, 0.04]) plot_multinomial(1000, 100, hypothetical_player_probs) . Thus, if I repeated my hypothetical set of 100 hitting attemps many times, this shows the range of outcomes I might expect. . Prior . Now I need to specify my prior beliefs about what I probabilities I might expect a hitter to have before I see any data. One natural way to handle this is a Dirichlet distribution, which has the nice property that it plays nicely with a multinomial distribution and gives me an analytical way to compute the posterior. A Dirichlet distribution is a generalization of the Beta distribution in multiple dimensions (in this case, 6 as we need our 6 probabilities for our multinomial distribution). . A Beta distribution takes 2 parameters, while an $n$-dimensional Dirichlet distribution takes $n$ parameters, usually referred to as a vector $ alpha$. As with the beta distribution, if the parameters are small the probability density is concentrated towards one outcome being more likely, while if the weights are large then probability density is more even across the different dimensions. Combining small and large values let us tweak the distribution in a wide range of different ways, giving plenty of flexibility in describing our prior beliefs. . For this model, I am going to specify a prior that is rather pessimistic about a player&#39;s ability, thus the probabilities should be large for making an out, and relatively small for the more valuable hits. Only once a player shows sustained ability to do better than this threshold will I have more faith in their run producing capabilities. (One caveat here is that I need to be sure at the end of my analysis that my estimation of replacement level is significantly higher than this level, though we will see in the end that the analysis here can identify those players and separate them out of the overall distribution). Note that these choices are inherently subjective and are based on my personal understanding of what I think a good baseball player is likely to do based on many years of watching and following the game. . The following illustrates the priors that I use in my analysis: . def plot_dirichlet(n_samples, alpha): &quot;plot samples of the probabilities drawn from a Dirichlet distribution&quot; assert n_samples &gt; 0, &quot;number of samples must be greater than zero&quot; assert np.all(alpha &gt;= 0.), &quot;all alpha components must be positive&quot; samples = scipy.stats.dirichlet.rvs(alpha, size=n_samples) plot_multiple_distributions(samples) priors = np.array([12., 1., 2., 0.05, 0.01, 0.03]) plot_dirichlet(1000, priors) . Posterior . As noted above, if I use a Dirichlet prior, I can compute the posterior analytically. In this case, the posterior is also a Dirichlet distribution, but with the $ alpha$ parameters summed with the number of observations of each of the outcomes. In this way, if the absolute number of outcomes is high the posterior weights will reflect that of the data, while if there are only a few observations the prior will still hold some sway over the distribution. Thus, if I take my hypothetical player described above with 100 plate appearances, the posterior given a particular set of observations will be: . hypothetical_player_stats = scipy.stats.multinomial.rvs(size=1, n=100, p=hypothetical_player_probs).flatten() plot_dirichlet(1000, priors + hypothetical_player_stats) . Simulating full seasons using the posterior . Given the posterior samples, we can use these samples from the posterior of the probabilities describing this player to project their performance over a full season (say over 600 plate appearances, a typical number for someone that plays a full season): . def project_player_season(player_stats, n_samples, plate_appearances, priors): &quot;project multiple samples from the season of a player given their stats&quot; assert n_samples &gt; 0, &quot;number of samples must be greater than zero&quot; assert plate_appearances &gt; 0, &quot;number of plate appearances must be greater than zero&quot; assert player_stats.shape == (6,), &quot;player stats must be a 1D array of length 5&quot; assert np.all(player_stats &gt;= 0), &quot;player stats must be non-negative integers&quot; assert np.all(priors &gt; 0.), &quot;all prior weights must be greater than zero&quot; outcomes = np.zeros((n_samples, n_samples, 6), dtype=np.int64) samples = scipy.stats.dirichlet.rvs(alpha=priors + player_stats, size=n_samples) # occasionally roundoff error causes the sum of these sampled probabilities to be larger than 1 if np.any(np.sum(samples, axis=-1) &gt; 1.): rounded_error = (np.sum(samples, axis=-1) &gt; 1.) samples[rounded_error] = (samples[rounded_error]/ (np.sum(samples[rounded_error], axis=-1)[:,np.newaxis] + 1.e-15)) for i in range(n_samples): outcomes[i] = scipy.stats.multinomial.rvs(n=plate_appearances, p=samples[i], size=n_samples) return np.reshape(outcomes, (-1, 6)) full_season_pa = 600 print(&quot;Hypothetical {} plate appearance season [Outs, Walks, Singles, Doubles, Triples, Home Runs]: {}&quot;.format( full_season_pa, project_player_season(hypothetical_player_stats, 1, full_season_pa, priors)[0])) . Hypothetical 600 plate appearance season [Outs, Walks, Singles, Doubles, Triples, Home Runs]: [365 49 135 25 0 26] . With all of this, we are now in a position to simulate the Runs Created over many hypothetical seasons to see the variation in the value of this hypothetical player: . hypothetical_player_seasons = project_player_season(hypothetical_player_stats, 100, full_season_pa, priors) rc_histogram(hypothetical_player_seasons) . From this, we can see that after 100 chances, we still have quite a bit of uncertainty about how well a player will perform over an entire season, though we are somewhat confident that this player is better than average based on comparing this distribution to the observed data for the season. . Simulating League Seasons . Now we can do this for every player in the 2019 season repeatedly to examine what we might expect if this season were to be re-run several times. Once we have simulated this, we can overlay the actual distribution to see what differences we notice. . def project_league_season(season_stats, n_samples, priors): if isinstance(season_stats, pandas.DataFrame): season_stats_array = np.array(season_stats)[:,1:] else: season_stats_array = season_stats league_projections = np.zeros((len(season_stats), n_samples*n_samples, 6), dtype=np.int64) for i in range(len(season_stats)): league_projections[i] = project_player_season(season_stats_array[i], n_samples, np.sum(season_stats_array[i]), priors) return np.reshape(league_projections, (-1, 6)) def project_year(season_stats, stats, n_samples=10): &quot;project multiple realizations of a full league season&quot; return project_league_season(season_stats, n_samples, priors) simulated_seasons = project_year(season_stats, priors) rc_histogram(simulated_seasons, season_stats) plt.legend([&quot;Simulated&quot;, &quot;Actual&quot;]) . &lt;matplotlib.legend.Legend at 0x12da04d90&gt; . And on a logarithmic scale, to better see the behavior for small values of runs/out: . rc_histogram(simulated_seasons, season_stats, scale=&quot;log&quot;) plt.legend([&quot;Simulated&quot;, &quot;Actual&quot;]) . &lt;matplotlib.legend.Legend at 0x12d7f2bb0&gt; . From this, we can see that our simulation method is able to reproduce the distribution in the real data, though it is smoother as we are able to draw many more samples than are available in a single season. However, one important difference is that since we needed to specify a prior (and one that was fairly pessimistic), there is an extra peak near zero runs/out in the simulation. These players are not really relevant for estimating replacement level, so we will need to determine a way to scrub them from the distribution. . Additionally, on the logarithmic scale we note that distribution is not symmetric -- there are more players in the real data that are worse than average than players that are better than average. This suggests that there are some players getting attempts that are significantly worse than most major league players, which are likely to be indicative of replacement level. . We can check this by plotting what distribution we would expect if all players&#39; abilities were drawn from our prior: . season_prior_level = project_player_season(np.zeros(6), 1000, full_season_pa, priors) rc_histogram(season_prior_level) . And again on a logarithmic scale: . rc_histogram(season_prior_level, scale=&quot;log&quot;) . This looks similar to the peak closer to zero in the above simulated distribution, confirming that we have a number of players for which we do not have evidence that they are significantly better than our prior. The remaining players that perform better than this level are players where we have evidence of how good they are. These are either &quot;good&quot; major league players, or if they are too far on the negative side of the distribution, then I propose that these are a good representation of replacement players. Thus, we need to determine a method to separate out these parts of the overall distribution. . Approximating the distributions . To try and separate out distributions of the &quot;good&quot; players, &quot;sub-replacement&quot; players, and &quot;not enough data&quot; players, we need to first hypothesize the form we might expect the distributions of simulated player seasons to take. One constraint is that we know that Runs Created has to be positive. A commonly used distribution for positive random variables is a Lognormal distribution. It is fairly easy to check if a variable is Lognormal, as we simply can make a histogram with a log horizontal scale and check if the data looks roughly normal on this scale: . rc_histogram(hypothetical_player_seasons, scale=&quot;log&quot;) . This looks reasonably symmetric, so fitting a normal distribution to the data on a log scale is probably a reasonble way to approximate this distribution. While I might in some situations dig into the log-normality of these distributions more carefully, for the sake of this analysis this is probably a reasonable approximation to make. . Bayesian Gaussian Mixture Models . To separate out the three parts of the distribution, I will fit a Gaussian Mixture Model to the data on a logarithmic scale. A Gaussian Mixture Model approximates a probability distribution as the sum of several Normal distributions, allowing us to tease out the three components by scrutinizing the parameters of the distributions. I can fit this type of model readily using the Scikit-Learn package: . from sklearn.mixture import BayesianGaussianMixture from sklearn.utils._testing import ignore_warnings from sklearn.exceptions import ConvergenceWarning @ignore_warnings(category=ConvergenceWarning) def fit_mixture_model(simulated_seasons, n_components): &quot;Fit a Gaussian Mixture model to the given season&quot; rc = runs_created(simulated_seasons) rc = np.reshape(rc[rc &gt; 0.], (-1, 1)) return BayesianGaussianMixture(n_components=n_components).fit(np.log(rc)/np.log(10.)) n_components = 3 gmm = fit_mixture_model(simulated_seasons, n_components) . I occasionally get ConvergenceWarnings when fitting this model. Further inspection has shown that these models usually seem to make reasonable predictions, so for the sake of clean presentation I suppress such warnings here. We can plot the mixture model on top of the data to which it has been fit as follows: . def get_normal_from_gmm(gmm, index): &quot;converts gmm model to callable pdf function&quot; assert index &gt;= 0 assert index &lt; len(np.squeeze(gmm.weights_)) weights_array = np.reshape(np.squeeze(gmm.weights_), (-1, 1)) mean_array = np.reshape(np.squeeze(gmm.means_), (-1, 1)) cov_array = np.reshape(np.squeeze(gmm.covariances_), (-1, 1)) def norm_pdf(x): return(weights_array[index]* scipy.stats.norm.pdf(x, loc=mean_array[index], scale=np.sqrt(cov_array[index]))) return norm_pdf def plot_distribution_sum(simulated_seasons, n_components): &quot;plot the Gaussian mixture models with the underlying data&quot; rc_histogram(simulated_seasons, scale=&quot;log&quot;) gmm = fit_mixture_model(simulated_seasons, n_components) pdfs = [get_normal_from_gmm(gmm, i) for i in range(n_components)] logrc_vals = np.linspace(-4., 1., 101) for (pdf, i) in zip(pdfs, range(n_components)): plt.plot(logrc_vals, pdf(logrc_vals), label=&quot;Distribution {}&quot;.format(i)) plt.plot(logrc_vals, np.sum(np.array([pdf(logrc_vals) for pdf in pdfs]), axis=0), label=&quot;Sum&quot;) plt.legend() print(&quot;Means: {}&quot;.format(np.squeeze(gmm.means_))) print(&quot;Variances: {}&quot;.format(np.squeeze(gmm.covariances_))) plot_distribution_sum(simulated_seasons, n_components) . Means: [-1.01128144 -1.39076184 -0.71722101] Variances: [0.07110075 0.33645528 0.02934296] . We see that the Gaussian Mixture Model was able to fit the three components approximately where we would expect. (Note that because the Gaussian Mixture Model does not always put the components in the same order after fitting, the numbering of the different distributions may not always be the same. Thus, I try not to refer to the legend labels in the following for consistency.) . At the lowest end, we see a very broad distribution over the full range of the plot, which is quite similar to what was observed when just plotting samples from the prior on a logarithmic scale above. These are players for which data is scarce, and we will ignore these. . Then there is the high end, where most of the mass in the distribution can be found. These are the good, every day major league players. While we could use this distribution to understand how good a particular player is, it likely does not contain any replacement players so we cannot use it to independently assess what level replacement is. Note that this is precisely why we went to the trouble of doing this simulation -- the standard 80% of league average heuristic is arbitrary because it is based on players that are clearly not replacement level. . This leaves the intermediate distribution -- the players that are clearly below the typical major league player, but also those where we have evidence of how good they are over the prior distribution that I specify. Thus, perhaps this distribution is representative of the production of replacement players in this particular season. To get a replacement level estimate, I just have to separate out this distribution, and for simplicity&#39;s sake, use the mean of this to estimate replacement level: . def extract_replacement_level(gmm): &quot;&quot;&quot; Determine the mean runs created/out for players in the sub-replacement distribution (assumes the highest mean is associated with good players, while the second highest mean is replacement level) &quot;&quot;&quot; means = np.sort(np.squeeze(gmm.means_)) assert len(means) &gt;= 2 return 10.**(means[-2]) print(&quot;Estimated replacement level: {}&quot;.format(extract_replacement_level(gmm))) print(&quot;Heuristic replacement level: {}&quot;.format(heuristic_replacement_level(season_stats))) . Estimated replacement level: 0.09505133831076636 Heuristic replacement level: 0.1321843895833081 . This is somewhat below the heuristic estimate, but we have a much less arbitrary way of estimating it so we can better understand what it means. Our estimate of replacement level is the expected runs created per out from the population of players where (1) we have evidence from their hitting that they are better than our pessimistic prior, and (2) we cannot explain the presence of these players in the distribution of simulated season statistics based on an assumption of normality in the simulated data. This happens to be about 60% of the league average, rather than 80% of the league average, though I am less interested in getting the exact numbers to line up than better understanding the various distributions that fall out of the analysis and using them to explain replacement level more precisely, so this will be fine for these purposes. . With this machinery in place, one thing we can easily do is compute this for every year since 1900 in baseball history: . def bayesian_replacement_level(year, conn, priors, n_components): &quot;Full function for Bayesian replacement level estimation&quot; season_stats = rc_base_query(year, conn) league_season = project_year(season_stats, priors) gmm = fit_mixture_model(league_season, n_components) return extract_replacement_level(gmm) def compute_heuristic_replacement_level(year, conn): &quot;full function for heuristic replacement level calculation&quot; season_stats = rc_base_query(year, conn) return heuristic_replacement_level(season_stats) def make_time_plot(start, end, priors, n_components, conn): &quot;plot the evolution of estimates for replacement level over time&quot; start = int(start) end = int(end) n_components = int(n_components) years = np.arange(start, end) heuristic_estimates = [compute_heuristic_replacement_level(yr, conn) for yr in years] bayesian_estimates = [bayesian_replacement_level(yr, conn, priors, n_components) for yr in years] plt.plot(years, heuristic_estimates, label=&quot;Heuristic&quot;) plt.plot(years, bayesian_estimates, label=&quot;Bayesian&quot;) plt.legend() plt.xlabel(&quot;Year&quot;) plt.ylabel(&quot;Replacement Runs Created/Out&quot;) make_time_plot(1900, 2020, priors, n_components, conn) . As we can see, this method gives a good indication of the variability in replacement level over the course of the history of baseball that mirrors the traditional heuristic, though the level is somewhat lower (as mentioned above). We also note that the difference between the two measures is smaller prior to 1920, with more stable differences after that despite some significant fluctuations over time. We see that it captures the overall trends in run production that are well documented -- runs were scarce in the &quot;dead ball&quot; era prior to 1920, then show an uptick, a decrease in the 1940&#39;s that holds fairly stable until an increase in the late 1990&#39;s and early 2000&#39;s during the &quot;steriod&quot; era, and a lull again in the 2010&#39;s that has since increased again. . Discussion . As mentioned above, our estimate of runs created is somewhat crude for this analysis. Extending this to be more accurate requires factoring in base running, correcting for the effect of each stadium on run production, and being more precise in how the runs each team scores can be attributed to each player (i.e. the &quot;a player cannot be on base for themselves&quot; effect). One additional factor to consider is fielding luck -- more modern measurement techniques can track the ball when it is hit, and corrections can be made for hard hit balls that are likely to have been hits but the defense was positioned correctly to make an out. However, this data is only available for modern play, so projecting these effects over the course of baseball history is not possible. . A similar analysis can be done for a pitchers. Pitchers are fundamentally measured by their ability to get outs and not giving up hits or walks, just with the desired outcomes reversed when compared to hitters. However, much analysis by statisticians have shown that there is significant randomness in the fraction of batted balls that turn into hits versus outs, so the simplest way to study pitchers is to look at the things that are entirely in the pitcher&#39;s control: walks, strikeouts (i.e. the batter was unable to hit the ball and this out can entirely be credited to the pitcher&#39;s ability), and home runs over a number of innings pitched. This is known as Fielding Independent Pitching (FIP), and can be converted into a number of runs saved. This can then be analyzed in a similar fashion to the runs that a hitter creates to measure pitcher value. . How would a team be likely to use this data and approach? First, we can simulate the range of seasons that any player would be likely to produce given their actual statistics, which is useful for evaluating individual players. This approach can also determine if a team has been lucky or unlucky in terms of their hits producing runs. Very often, a team that produces more runs than would be expected with a statistic like runs created is likely doing so based on luck, and would not necessarily be expected to sustain the same level over the remainder of a full season. There are a number of ways we could use this approach to further evaluate players and teams, though this is beyond the scope of this story. . Beyond baseball, measuring marginal utility is more difficult because the value is often subjective and hard to boil down to a clear metric from which a baseline level can be estimated. For instance, I love getting coffee from my local cafe. Should I be comparing this to coffee I make at home? Get from Starbucks? From the instant machine at my local convenience store? Depending on the circumstance, &quot;available with minimal effort&quot; is highly dependent on context and mood. Until we find a way to quantify that in an objective way, sports will remain one of the most popular avenues to rigorously quantify and analyze marginal utility. .",
            "url": "https://alan-turing-institute.github.io/TuringDataStories-fastpages/baseball/bayesian%20modeling/sql/2021/07/21/Baseball-Replacement-Level.html",
            "relUrl": "/baseball/bayesian%20modeling/sql/2021/07/21/Baseball-Replacement-Level.html",
            "date": " • Jul 21, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "When will the United Kingdom be Fully Vaccinated Against COVID-19?",
            "content": "Authors . Jack Roberts, The Alan Turing Institute, @jack89roberts | . Reviewers . Camila Rangel Smith, Alan Turing Institute, GitHub: @crangelsmith. Twitter: @CamilaRangelS. | Bill Finnegan, University of Oxford, GitHub: @billfinnegan. Twitter: @wmfinnegan. | . Introduction . The Covid-19 pandemic has caused catastrophic losses and changes to life worldwide since the first reported cases in December 2019. A year later, in December 2020, Covid-19 vaccines began to be approved for general public use in countries worldwide, after an unprecedented speed and scale of development and clinical trials (for a process that typically take closer to a decade to complete). Vaccines have therefore emerged as the shining light at the end of the tunnel that we all hope will lead to the end of the days of lockdown measures and hospitals filled to capacity. . So the question on the tip of our tongues in 2021 has been &quot;when will I, my family, my country and the world be vaccinated against Covid-19?&quot; In this data story we&#39;ll be focusing on the country-level question, with the objective of estimating when the adult population in the United Kingdom (UK) will be fully vaccinated against Covid-19. By &quot;fully vaccinated&quot; we mean vaccinated with all the doses required to get maximum protection from a specific vaccine type (typically two doses). We&#39;ll collect data on the progress of the UK&#39;s vaccination programme so far, and then explore several approaches for forecasting how this might continue in the future. . A brief introduction to vaccinations in the UK: The Pfizer/BioNTech vaccine, which uses new mRNA vaccine technology, was given emergency approval on 2nd December 2020, with the first dose being administered to 91-year-old Margaret Keenan on 8th December. Since that date vaccines have continued to be rolled out in an increasing number of locations nationwide, including GP surgeries, hospitals, pharmacies and dedicated vaccination centres. The Oxford/AstraZeneca vaccine, based on more traditional vaccine technology, began to be administered around a month later on 4th January, and the Moderna mRNA vaccine more recently on 7th April 2021. All three vaccines require two doses, typically spaced between one and three months apart. Priority for vaccination is given to those at highest risk from Covid-19, namely healthcare workers, the elderly, and clinically vulnerable people. We expand on the details of the vaccination programme throughout this data story. . Note that the story is written based on the status of the vaccination programme on 4th May 2021. . 🔧 In this story you can find the technical descriptions enclosed by spanners. If the technical side is not your thing feel free to skip it and hide the code cells 😊 🔧 . Setup . 🔧 For this analysis we&#39;ll be using the requests and json libraries for interacting with data from the internet, numpy, pandas and datetime for manipulating and analysing data and dates, and matplotlib and seaborn for visualising data. In the cell below we also configure some of the defaults for the style of matplotlib figures, in particular increasing the font size. 🔧 . # Get data from the internet import requests import json # Analyse data and dates import numpy as np import pandas as pd from datetime import datetime, timedelta # Visualisations import matplotlib.pyplot as plt import matplotlib import seaborn as sns plt.style.use(&quot;seaborn-notebook&quot;) fontsize = 14 plt.rc(&quot;font&quot;, size=fontsize) plt.rc(&quot;axes&quot;, titlesize=fontsize) plt.rc(&quot;axes&quot;, labelsize=fontsize) plt.rc(&quot;xtick&quot;, labelsize=fontsize) plt.rc(&quot;ytick&quot;, labelsize=fontsize) plt.rc(&quot;legend&quot;, fontsize=fontsize) width = 12 height = 5 figsize = (width, height) %matplotlib inline . . Getting the Data . The government has developed a Coronavirus dashboard which is updated daily with key statistics including the number of Covid-19 tests, cases, hospitalisations, deaths and vaccinations. You can view the dashboard here: https://coronavirus.data.gov.uk/ . All of the source data can be downloaded, for example as a spreadsheet, by clicking the &quot;download&quot; button under each table or graph. Even better for our purposes is that the dashboard has an &quot;Application Programming Interface&quot; (API), which we can use to extract precisely the data we&#39;re interested in programmatically for this notebook! . 🔧 The documentation for the API is found under the &quot;Developer&#39;s Guide&quot; section of the dashboard, which describes the various parameters that are available and how they should be configured. In particular, there are Python examples which show us how to structure a data query. There are three main steps, as follows: . Step 1: Defining the geographical region we are interested in. Some of the data is available regionally as well as nationally. The number of positive cases, for example, is available both for the UK as a whole but also down to &quot;local authority&quot; level (local council areas, of which there are over 300 in England alone). It&#39;s possible to get vaccine data for each of the four nations in the UK separately, but for this story we&#39;ll only consider the UK as a whole. . In the API, to define that we wish to retrieve summary data for the whole UK we must set the areaType parameter to be the value &quot;overview&quot;, as follows: 🔧 . filters = &quot;areaType=overview&quot; . 🔧 Step 2: Defining which data we wish to retrieve. To explore the status of the vaccination programme we would like to know the number of new first and second vaccine doses administered on each day, and the overall (cumulative) total of first and second doses administered up to and including each day. . In the API these fields are given long names like newPeopleVaccinatedFirstDoseByPublishDate. Finding the correct names for the data you&#39;re interested can be a bit tricky. Most are listed in the documentation but not all - the vaccination data has been added fairly recently and isn&#39;t documented, for example. Usually the field names for the API match the column names in files downloaded from the website, so you can do some super sleuthing and find them that way if you&#39;d like to try an analysis with different data! . As the names are long, the API helpfully let&#39;s us rename them to something more convenient using the dictionary format seen below. We&#39;ll call the cumulative totals cumFirst and cumSecond, and the new doses each day newFirst and newSecond. Finally, to pass this dictionary to the API it must be converted into a string without any spaces, which we achieve using the json.dumps function. 🔧 . # define which data columns we wish to retrieve, and what to call them structure = { &quot;date&quot;: &quot;date&quot;, &quot;newFirst&quot;: &quot;newPeopleVaccinatedFirstDoseByPublishDate&quot;, &quot;cumFirst&quot;: &quot;cumPeopleVaccinatedFirstDoseByPublishDate&quot;, &quot;newSecond&quot;: &quot;newPeopleVaccinatedSecondDoseByPublishDate&quot;, &quot;cumSecond&quot;: &quot;cumPeopleVaccinatedSecondDoseByPublishDate&quot;, } # convert the dictionary into a string without spaces (using the separators argument) structure = json.dumps(structure, separators=(&quot;,&quot;, &quot;:&quot;)) . . 🔧 Step 3: Submitting the API query. We can now package our parameters up into the structure required by the API, and send our query using the requests.get function. If the query is successful we should see a status code of 200 (as per the convention for request status codes). If not it should also come back with a useful error message to diagnose the problem with our query. 🔧 . # query the API for the data ENDPOINT = &quot;https://api.coronavirus.data.gov.uk/v1/data&quot; api_params = {&quot;filters&quot;: filters, &quot;structure&quot;: structure} response = requests.get(ENDPOINT, params=api_params, timeout=10) if response.status_code != 200: request_failed = True print(f&quot;Request failed: { response.text }&quot;) else: request_failed = False . . 🔧 Our query was successful, but where is the data? We can convert the data the request contains into a Python function using the .json() method on the response, and then look at what fields are contained in the data (the keys of the dictionary): 🔧 . if request_failed: # load previously saved data if API request failed with open(&quot;20210517_data.json&quot;) as f: j = json.load(f) else: j = response.json() print(j.keys()) . . dict_keys([&#39;length&#39;, &#39;maxPageLimit&#39;, &#39;totalRecords&#39;, &#39;data&#39;, &#39;requestPayload&#39;, &#39;pagination&#39;]) . 🔧 This doesn&#39;t look like the vaccination data we&#39;re expecting yet. The response also includes metadata about our query, in particular whether we queried too much data to return in one go. If the &quot;length&quot; of our query was larger than the &quot;maxPageLimit&quot; we&#39;d have to split our query into multiple queries. 🔧 . print(j[&quot;length&quot;], j[&quot;maxPageLimit&quot;]) . 127 2500 . 🔧 In this case we are a long way under the limit so we should have all the data. To find it we can have a look at one of the elements in the &quot;data&quot; list: 🔧 . print(j[&quot;data&quot;][0]) . {&#39;date&#39;: &#39;2021-05-16&#39;, &#39;newFirst&#39;: 131318, &#39;cumFirst&#39;: 36704672, &#39;newSecond&#39;: 183745, &#39;cumSecond&#39;: 20287403} . 🔧 Each element of the &quot;data&quot; list contains the vaccination data for one day. To make it easier to analyse the data we can convert it to a pandas data frame, using the date as the unique index for the rows (as we have one row for each day). We also take care to properly convert the date string representations into actual Python datetimes, so we can benefit from pandas&#39; features for processing time series data. We also convert the numbers into units of 1 million to make them easier to read in figures and tables later. 🔧 . df = pd.DataFrame(j[&quot;data&quot;]) # use the &quot;date&quot; column to index our data df.set_index(&quot;date&quot;, inplace=True) # convert the date text strings into Python datetimes df.index = pd.to_datetime(df.index) # sort the data from oldest to newest df.sort_index(inplace=True) # convert all totals to millions df = df / 1e6 df.tail() . . newFirst cumFirst newSecond cumSecond . date . 2021-05-12 0.184210 | 35.906671 | 0.452437 | 18.890969 | . 2021-05-13 0.209284 | 36.115955 | 0.428041 | 19.319010 | . 2021-05-14 0.220068 | 36.336023 | 0.393402 | 19.712412 | . 2021-05-15 0.237331 | 36.573354 | 0.391246 | 20.103658 | . 2021-05-16 0.131318 | 36.704672 | 0.183745 | 20.287403 | . 🔧 Later on, it will also be helpful to have data on the total number of doses given, i.e. the number of first doses plus the number of second doses. Pandas let&#39;s us quickly create new columns for these values, as follows: 🔧 . df[&quot;newTot&quot;] = df[&quot;newFirst&quot;] + df[&quot;newSecond&quot;] df[&quot;cumTot&quot;] = df[&quot;cumFirst&quot;] + df[&quot;cumSecond&quot;] . . 🔧 Our query above gets all the data up to the current date. To ensure re-running the notebook reproduces the same results from the time of writing only data up to 4th May should be included, which is done using the run_as_date variable below. If you&#39;d like to see the latest results instead you can change the value to today&#39;s date. 🔧 . # To reproduce the results iin the story set the date below to 4th May 2021 # (run_as_date = datetime(2021, 5, 4)), or use today&#39;s date to update # the results with the latest available data (run_as_date = datetime.now()). run_as_date = datetime(2021, 5, 4) # Latest data at time of publishing (vs. initial time of writing as above) # Used to compare forecasts with actual data at the end of the story publish_date = datetime(2021, 5, 16) publish_date_data = df.loc[publish_date] # filter the data to only include dates up to the run_as_date df = df[df.index &lt; run_as_date] . . Vaccines So Far . Now we have the data we need to start forecasting the future of the vaccination programme, but before we jump in it&#39;s always a good idea to explore the historical data first. Let&#39;s have a look at the first row of our data (the earliest date we have data for): . df.iloc[0] . newFirst NaN cumFirst 2.286572 newSecond NaN cumSecond 0.391399 newTot NaN cumTot 2.677971 Name: 2021-01-10 00:00:00, dtype: float64 . The last row of our data (the last date we have data for): . df.iloc[-1] . newFirst 0.072600 cumFirst 34.667904 newSecond 0.127499 cumSecond 15.630007 newTot 0.200099 cumTot 50.297911 Name: 2021-05-03 00:00:00, dtype: float64 . And finally the mean (average) number of doses administered per day: . df[&quot;newFirst&quot;].mean(), df[&quot;newSecond&quot;].mean() . (0.2865604601769912, 0.13485493805309734) . Although the first Covid-19 vaccine in the UK (outside of clinical trials) was administered on 8th December 2020, the daily data that we have starts on 10th January 2021, by which time 2.29 million first doses and 0.39 million second doses had been given. Since that date a mean (average) of 0.29 million (290,000) first doses and 0.13 million (130,000) second doses have been administered per day. As of 3rd May 2021, a total of 34.7 million people have been vaccinated with a first dose and 15.6 million with a second dose, which we can see by looking at the last row of the data. . To make sense of these numbers we are missing one more piece of data - how many people are there to vaccinate? We can find this in the government&#39;s vaccine delivery plan. The plan specifies that the UK adult population (children are not currently being vaccinated) is approximately 53 million people, as well giving the sub-totals for the nine priority groups who will receive vaccines first. Government targets typically focus on three goals - vaccinating the 15 million people in priority groups 1-4 (the over 70s, care home residents, and health &amp; social care workers), the 32 million people in the groups 1-9 (additionally including over 50s and the clinically vulnerable), and the whole adult population. . Comparing to the values above, we can see that the number of people vaccinated so far exceeds the population of groups 1-9 for first doses, and of groups 1-4 for second doses. However, this doesn&#39;t mean everyone in those groups has been vaccinated. Although take up rates of the vaccine in the UK are high, there is regional variation in the speed of the rollout and take up rates are lower in certain sub-groups, such as for ethnic minorities, poorer areas, and care home staff. The population in each priority group is also estimated as the groups can be overlapping. For example, a clinically vulnerable, 50 year-old social care worker meets the criteria for priority groups 2, 6 and 9. Further statistics on take up rates can be found in NHS England data. . Bearing all the above in mind, the priority group population totals are still helpful to give a rough estimate of progress through the vaccination programme so let&#39;s save them for future use: . priority_totals = {&quot;Groups 1-4&quot;: 15, &quot;Groups 1-9&quot;: 32, &quot;All Adults&quot;: 53} . 🔧 It&#39;s helpful to visualise the data, so before continuing we will do a bit of work here to set up plotting functions we can re-use throughout our analysis. First let&#39;s define colours and labels to use for the data columns in all the figures we create. These are in the col_format dictionary below, which all our plotting functions can access. . Then we define a function plot_column, which uses the pandas plot function to plot a column from the dataset in our chosen style. It also includes options to display a weekly rolling average of the data, rather than the original raw data, calculated using the statement df[column].rolling(window=7).mean() below (where window=7 means we calculate the average across 7 days). Finally, it will be helpful to distinguish between actual historical vaccine data, and estimates from the forecasts we create. If the forecast_date argument is defined the data after that date will be plotted with a dashed line instead of a solid line. The data after that date is selected using the statement data[data.index &gt;= forecast_date]. 🔧 . col_format = { &quot;cumFirst&quot;: {&quot;label&quot;: &quot;1st&quot;, &quot;color&quot;: &quot;orange&quot;}, &quot;cumSecond&quot;: {&quot;label&quot;: &quot;2nd&quot;, &quot;color&quot;: &quot;deepskyblue&quot;}, &quot;cumTot&quot;: {&quot;label&quot;: &quot;Total&quot;, &quot;color&quot;: &quot;k&quot;}, &quot;newFirst&quot;: {&quot;label&quot;: &quot;1st&quot;, &quot;color&quot;: &quot;orange&quot;}, &quot;newSecond&quot;: {&quot;label&quot;: &quot;2nd&quot;, &quot;color&quot;: &quot;deepskyblue&quot;}, &quot;newTot&quot;: {&quot;label&quot;: &quot;Total&quot;, &quot;color&quot;: &quot;k&quot;}, } def plot_column( df, column, ax, forecast_date=None, rolling=False, forecast_label=&quot;Forecast&quot;, **kwargs ): &quot;&quot;&quot; Plot a column in a data frame, optionally calculating its rolling weekly average and distinguishing between actual and forecasted data. df - vaccination data frame column - column of df to plot ax - matplotlib axis to use for the plot forecast_date - plot data from this date with a dashed line rolling - plot rolling weekly average instead of raw data forecast_label - label given to forecast data in plot legend **kwargs - additional arguments passed to pandas plotting function &quot;&quot;&quot; color = col_format[column][&quot;color&quot;] label = col_format[column][&quot;label&quot;] if rolling: data = df[column].rolling(window=7).mean() label = label + &quot; (7d avg)&quot; else: data = df[column] if forecast_date is None: data.plot(color=color, label=label, ax=ax, **kwargs) else: # plot actual data with solid line data[data.index &lt;= forecast_date].plot( color=color, label=label, ax=ax, linestyle=&quot;-&quot;, linewidth=3, **kwargs ) # plot forecast data with dashed line data[data.index &gt;= forecast_date].plot( color=color, label=forecast_label + &quot; &quot; + label, ax=ax, linestyle=&quot;--&quot;, **kwargs ) . . 🔧 As well as showing the number of doses, we&#39;d like to show when the number of people vaccinated (with 1st or 2nd doses) exceeds the total of each priority sub-group. For each group, we can find the date this happened using the statement df[df[column] &gt;= (pop - tol)].index[0], where pop is the population of the sub-group, column is either cumFirst or cumSecond (depending on whether we want to calculate it for 1st or 2nd doses), and tol is a small value used to account for any rounding errors in the forecasts we do later. . The annotate_group_completions function below can then be used to add horizontal and vertical lines and text labels to a plot for those dates. As discussed earlier, we must remember that it&#39;s not true that everyone in the priority group will have been vaccinated by the dates we calculate here, rather they are general indicators of overall progress. 🔧 . def annotate_group_completions(df, column, ax, text_offset=1.02, tol=1e-7): &quot;&quot;&quot; Add text labels and lines indicating the dates the number of people vaccinated exceded the population of priority sub-groups. df - vaccination data frame column - column to add labels for, either cumFirst or cumSecond ax - matplotlib axix to add labels to text_offset - space between data point and text label tol - define group to be vaccinated if total vaccines is within tol of its population &quot;&quot;&quot; label = col_format[column][&quot;label&quot;] max_col = df[column].max() for name, pop in priority_totals.items(): if max_col &gt;= (pop - tol): # vaccines completed for this group complete_date = df[df[column] &gt;= (pop - tol)].index[0] ax.hlines(pop, 0, complete_date, color=&quot;k&quot;, linewidth=0.5) ax.vlines(complete_date, 0, pop, color=&quot;k&quot;, linewidth=0.5) ax.text( complete_date, pop * text_offset, f&quot;{name} n{label} Doses n{complete_date.date()}&quot;, ha=&quot;center&quot;, size=12, fontweight=&quot;bold&quot;, ) # extend x-axis if text label is near the end of the axis if df.index.max() - complete_date &lt; timedelta(days=7): ax.set_xlim(df.index.min(), complete_date + timedelta(days=7)) . . 🔧 Now we are almost there! The plot_cumulative_doses function below uses the two previous functions to construct a figure for the cumulative total of first and second doses: 🔧 . def plot_cumulative_doses( df, forecast_date=None, figsize=figsize, title=None, forecast_label=&quot;Forecast&quot; ): &quot;&quot;&quot; Plot cumulative first and second doses, and the dates when the vaccination of prioriy groups completed. Optionally distinguish actual data and forecasted data. Data after forecast_date will be displayed with a dashed line. &quot;&quot;&quot; fig, ax = plt.subplots(1, 1, figsize=figsize) for col in [&quot;cumFirst&quot;, &quot;cumSecond&quot;]: plot_column( df, col, ax, forecast_date=forecast_date, forecast_label=forecast_label, ) annotate_group_completions(df, col, ax) # set axis limits, titles and legend ymin = 0 ymax = df[&quot;cumFirst&quot;].max() * 1.15 ax.spines[&#39;top&#39;].set_visible(False) ax.set_ylim(ymin, ymax) ax.set_ylabel(&quot;Number of Doses [millions]&quot;) ax.set_xlabel(&quot;&quot;) ax.legend(loc=&quot;upper left&quot;) if title is not None: ax.set_title(title, fontsize=18) # add a secondary y-axis showing the % of the population vaccinated right_ax = ax.twinx() right_ax.spines[&#39;top&#39;].set_visible(False) uk_pop = priority_totals[&quot;All Adults&quot;] y_perc_min = 100 * ymin / uk_pop y_perc_max = 100 * ymax / uk_pop right_ax.set_ylim(y_perc_min, y_perc_max) right_ax.set_yticks(range(int(y_perc_min), min(int(y_perc_max), 110), 10)) right_ax.set_ylabel(&quot;% Adults Vaccinated&quot;) return ax . . The following figure shows the history of the total number of people vaccinated with first and second doses, and the dates when priority groups were vaccinated: . plot_cumulative_doses(df, title=f&quot;UK Vaccinations up to {df.index.date.max()}&quot;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;UK Vaccinations up to 2021-05-03&#39;}, ylabel=&#39;Number of Doses [millions]&#39;&gt; . As stated in Boris Johnson&#39;s address to the nation on 4th January 2021, the first target the government set was to offer the first dose of a vaccine to everyone in the top four priority groups by mid-February. As we can see above this target was met on 13th February. The next target set by the government was then to offer a first dose to the first nine priority groups (the over 50s) with a first dose by the end of April. This was somewhat pessimistic given the vaccination rates at the time, and was ultimately completed a couple of weeks earlier on 9th April. Overall, the start of the UK vaccination programme has been very successful and amongst the fastest in the world. . It&#39;s also interesting to look at the daily number of new doses each day, and this is particularly relevant for forecasting future doses. As there&#39;s quite a large variation in the day to day totals (more on this later) it&#39;s helpful to look at weekly rolling averages as well. We&#39;ll also display the combined total of 1st and 2nd doses administered on each day (newTot), as this gives the best representation of the overall vaccine supply and capacity to administer vaccines. . 🔧 We can create a similar function to do this: 🔧 . def plot_daily_doses( df, forecast_date=None, show_daily=True, show_rolling=True, figsize=figsize, title=None, ): &quot;&quot;&quot; Plot daily first doses, second doses, the sum of 1st and 2nd doses, and their weekly rolling averages. &quot;&quot;&quot; # figure properties fig, ax = plt.subplots(1, 1, figsize=figsize) ax.spines[&quot;right&quot;].set_visible(False) ax.spines[&quot;top&quot;].set_visible(False) for col in [&quot;newFirst&quot;, &quot;newSecond&quot;, &quot;newTot&quot;]: if show_daily and col != &quot;newTot&quot;: # display daily data plot_column(df, col, ax, marker=&quot;.&quot;, linestyle=&quot;None&quot;) if show_rolling: # display 7 day averages plot_column(df, col, ax, forecast_date=forecast_date, rolling=True) ax.set_ylim(0, df[&quot;newTot&quot;].max() * 1.1) ax.set_xlabel(&quot;&quot;) ax.set_ylabel(&quot;Daily New Doses [millions]&quot;) ax.legend(loc=&quot;center left&quot;, bbox_to_anchor=(1, 0.5)) if title is not None: ax.set_title(title, fontsize=18) plot_daily_doses(df, title=f&quot;Daily Vaccinations up to {df.index.date.max()}&quot;) . . Between January and until early February the vaccine doses administered per day steadily increased from around 0.25 million to 0.45 million on average. After that date rates plateaued and temporarily fell, mostly due to challenges and fluctuations in securing vaccine supplies. Late March saw the highest rates, peaking at 0.6 million doses per day in the week starting 14th March, though this then fell again, particularly over the Easter weekend (2nd-5th April), before recovering more recently. Supply difficulties are currently expected to continue in coming months. As well as fluctuations in the total, we can see that the number of second doses administered has been steadily increasing, and overtook the rate of new first doses in early April, with relatively few new first doses being given since then. More on this later. . If you look closely at the actual daily numbers of 1st and 2nd doses (the markers rather than the rolling average lines), it seems like they vary up and down with a period of 7 days. We can make this clearer by plotting the number of doses delivered on each weekday. . 🔧 The day of the week for all the dates in our data can be determined using the pandas function day_name. Then we make use of the boxplot function in the seaborn plotting library to show the distribution in doses delivered on each weekday: 🔧 . df[&quot;weekday&quot;] = df.index.day_name() plt.figure(figsize=figsize) sns.boxplot( x=&quot;weekday&quot;, y=&quot;newTot&quot;, data=df, order=[ &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;, ], ) plt.xlabel(&quot;&quot;) plt.ylim([0, plt.ylim()[1]]) plt.ylabel(&quot;Daily Doses (1st + 2nd) [millions]&quot;) . . Text(0, 0.5, &#39;Daily Doses (1st + 2nd) [millions]&#39;) . More doses are administered Wednesday to Saturday than Sunday to Tuesday, with on average half as many (0.26 million) delivered on Sunday than on Saturday (0.53 million). Although I could not find an official explanation for this, one factor is likely related to the capacity and opening hours of vaccination centres and GP surgeries, which are more likely to be closed on Sundays for example. Other statistics have similar trends, such as fewer Covid-19 deaths being recorded at weekends due to reporting delays. . When are Second Doses Being Given? . A high-profile decision announced by the UK Joint Committee on Vaccination and Immunisation (JCVI) on the 30th December 2020, was to delay second doses by as long as possible, up to 12 weeks instead of the originally recommended 3-4 weeks. The decision was taken to be able to protect as many people as possible with a single dose of the vaccine within the first few months of the year, but was fairly controversial at the time due to clinical trials using shorter gaps between doses. . The delay between first and second doses will be an important component in our forecasts, so let&#39;s calculate when second doses are actually being given in practice (more precisely than &quot;up to 12 weeks&quot;). We can estimate this by determining the number of days until the total number of second doses (cumSecond) matches the total number of first doses (cumFirst) on a given date. . 🔧 The for loop below calculates the delay for all dates in the past, and then prints the most recent delay: 🔧 . for date_2nd, row in df.sort_index(ascending=False).iterrows(): if row[&quot;cumSecond&quot;] &gt;= df[&quot;cumFirst&quot;].min(): # find the last date where number of 1st doses is less than # or equal to number of 2nd doses on current row date_1st = df[df[&quot;cumFirst&quot;] &lt;= row[&quot;cumSecond&quot;]].index.max() # calculate how many days it was until 2nd doses were given delay = (date_2nd - date_1st).days df.loc[date_2nd, &quot;delaySecond&quot;] = delay else: break avg_second_delay = df[&quot;delaySecond&quot;][-1] print( &quot;1st doses from&quot;, (df.index[-1] - timedelta(days=avg_second_delay)).date(), &quot;were completed&quot;, avg_second_delay, &quot;days later, on&quot;, df.index[-1].date(), ) . . 1st doses from 2021-02-15 were completed 77.0 days later, on 2021-05-03 . Currently, second doses are lagging first doses by 77 days (eleven weeks). In the history of the data so far, the delay has varied between 71 and 77 days: . df[&quot;delaySecond&quot;].min(), df[&quot;delaySecond&quot;].max() . (71.0, 77.0) . With the gap increasing from 72 to 75 days over the Easter weekend (2nd-5th April) where fewer doses (of any type) were administered than normal, and slowly drifting towards longer delays since then: . fig, ax = plt.subplots(1, 1, figsize=figsize) df.loc[df.index &gt;= datetime(2021, 3, 21), &quot;delaySecond&quot;].plot(ax=ax) ax.set_xlabel(&quot;&quot;) ax.set_ylabel(&quot;2nd Dose Delay [days]&quot;) . . Text(0, 0.5, &#39;2nd Dose Delay [days]&#39;) . The second dose delay values we calculate here are averages for the whole country. In reality, the actual gap between doses for each individual will vary depending on the availability of appointments and vaccination strategy in their area. . Forecasting Future Vaccinations . Now we have a good idea about what&#39;s happened so far, but knowing that how can we forecast when the UK might fully vaccinate the adult population? At a high level, there will be two components to our forecasts: estimates for the total number of doses that will be administered on each future date, and of how those doses will be divided between first doses and second doses. We won&#39;t specify the exact form of our total daily doses estimation for now, except saying that it will be a function depending on two arguments - the date we want an estimate for, and the previous vaccination data. This general form will allow us to quickly try a few different forecasting approaches later. . For the second part (deciding which of the available vaccines will be given as first or second doses) we will make a number of assumptions that apply to all the forecasts we generate, as follows: . Everyone is given two doses of a vaccine. | Second doses are given avg_second_delay days after first doses (as calculated above). This means we expect the cumulative total of second doses today to match the cumulative total of first doses avg_second_delay days ago. Or equivalently, the number of new second doses required today is the difference between the current cumulative total of second doses and the cumulative total of first doses avg_second_delay days ago. | Second doses are given priority over new first doses. New first doses will only be given if the total number of doses available on a given day is more than the number of people requiring a second dose. | Once there is capacity to do so, second doses can be given sooner than avg_second_delay days later. Current UK guidance is that second doses of the Pfizer vaccine can be administered after 3 weeks, or after 4 weeks for the AstraZeneca vaccine, and up to 12 weeks later for both. | 100% of the UK adult population will be vaccinated. | . These assumptions generally seem reasonable, but there are limitations with all of them. It&#39;s likely that booster doses of Covid-19 vaccines will be needed, so ultimately people may receive more than two doses (so we&#39;re predicting only the completion of the first phase of the UK vaccination programme). Alternatively, single-dose vaccines such as the Johnson &amp; Johnson vaccine may start to be administered. New vaccine types coming online may also invalidate our third assumption above, as doses of a new vaccine can only be given as first doses initially - they can&#39;t be prioritised for second doses straight away like other vaccines (unless people begin to be given two doses of different vaccine types). Although it seems reasonable to give second doses earlier once there is spare capacity to do so, we don&#39;t know whether this will be the case and it may be that spare capacity is re-directed elsewhere. We&#39;ve also seen that the delay between doses has varied between 71 and 77 days so far, but we initially keep it fixed at the most recent value of 77 days. . Finally, vaccine uptake in the over 50s has been close to 95% overall, but it&#39;s not 100% and has been much lower in certain sub-groups as discussed earlier and may be lower in younger age groups going forward. Also, people with certain health conditions, such as allergies, are unable to have a vaccine. Our forecasts will predict a theoretical completion date for the vaccination programme if 100% of adults were vaccinated, but in reality some people will choose not or cannot be vaccinated. We should keep all the limitations above in mind when interpreting our results. . 🔧 The forecast_vaccines function below encodes everything described above. We give the vaccination data so far (as the input df), add new rows for future dates up to a specified end_date, determine how many doses will be administered on each date using a function doses_fn (that we haven&#39;t defined yet), and distributes those doses according to our assumptions. In many places the timedelta function from the python datetime library is used to get data from a number of days before the forecast date. 🔧 . def forecast_vaccines( df, avg_second_delay, doses_fn, uk_pop=priority_totals[&quot;All Adults&quot;], end_date=datetime(2021, 10, 1), min_second_delay=28, ): &quot;&quot;&quot; Forecast future vaccine doses. df: DataFrame of actual vaccine data. avg_second_delay: Days after 1st dose that 2nd doses will be given. doses_fn: Function to calculate number of doses administered each day. Takes 2 arguments - df and a date. uk_pop: Total population to be vaccinated. end_date: Forecast until this date. min_second_delay: If there is spare capacity, allow second doses to be given earlier than avg_second_delay, down to this number of days. &quot;&quot;&quot; # extend our time series index to the future first_data = df.index.min() last_data = df.index.max() if end_date &lt; last_data: raise ValueError( f&quot;end_date ({end_date}) should be after the last date in df {last_data}&quot; ) future_dates = pd.date_range(last_data, end_date, closed=&quot;right&quot;) df = df.append(pd.DataFrame(index=future_dates)) df.sort_index(inplace=True) for d in future_dates: dose2_sofar = df.loc[d - timedelta(days=1), &quot;cumSecond&quot;] if d - timedelta(days=avg_second_delay) &lt; first_data: # no 1st dose data avg_second_delay ago, assume no 2nd doses required pending_2nd_doses = 0 else: # 2nd doses needed is difference between 2nd doses so far and 1st # doses avg_second_delay days ago (who now require 2nd dose) dose2_req = df.loc[d - timedelta(days=avg_second_delay), &quot;cumFirst&quot;] pending_2nd_doses = max([0, dose2_req - dose2_sofar]) # use forecasting function to determine number of doses available today total_doses_today = doses_fn(df, d) # don&#39;t vaccinate more than the total population (with 2 doses) if total_doses_today + df.loc[d - timedelta(days=1), &quot;cumTot&quot;] &gt; 2 * uk_pop: total_doses_today = 2 * uk_pop - df.loc[d - timedelta(days=1), &quot;cumTot&quot;] # give all 2nd doses required (up to limit of total doses available) dose2_today = min(pending_2nd_doses, total_doses_today) # remaining vaccines given as new 1st doses dose1_remaining = uk_pop - df.loc[d - timedelta(days=1), &quot;cumFirst&quot;] dose1_today = min(total_doses_today - dose2_today, dose1_remaining) # if there are spare doses, try giving 2nd doses earlier than usual if dose1_today + dose2_today &lt; total_doses_today: dose2_early_req = df.loc[d - timedelta(days=min_second_delay), &quot;cumFirst&quot;] dose2_early_pending = max([0, dose2_early_req - dose2_sofar]) dose2_today = min(total_doses_today - dose1_today, dose2_early_pending) # save today&#39;s values df.loc[d, &quot;newSecond&quot;] = dose2_today df.loc[d, &quot;cumSecond&quot;] = ( df.loc[d - timedelta(days=1), &quot;cumSecond&quot;] + dose2_today ) df.loc[d, &quot;newFirst&quot;] = dose1_today df.loc[d, &quot;cumFirst&quot;] = df.loc[d - timedelta(days=1), &quot;cumFirst&quot;] + dose1_today df.loc[d, &quot;newTot&quot;] = dose1_today + dose2_today df.loc[d, &quot;cumTot&quot;] = df.loc[d, &quot;cumFirst&quot;] + df.loc[d, &quot;cumSecond&quot;] return df . . The final piece of estimating the number of doses that will be available in the future is also where we have the least certainty. The scale and speed of the Covid-19 vaccine roll-out worldwide is unprecedented and there have been challenges, such as with lower production than expected in supply chains, and other delays such as the roll-out of the AstraZeneca vaccine being paused in some countries to investigate side-effects. . Given these circumstances it&#39;s possible future vaccine supply in the UK could be quite different to past supply. But as a starting point let&#39;s consider a simpler question - when will the UK population be vaccinated if doses continue to be given at the same rate as the last two weeks? In the last two weeks, vaccines have been given at a rate of: . n_days = 14 mean_doses_this_week = df[&quot;newTot&quot;].tail(n_days).mean() print( &quot;Between&quot;, df.index[-n_days].date(), &quot;and&quot;, df.index[-1].date(), f&quot;there was a mean of {mean_doses_this_week:.2f}&quot;, &quot;million doses given per day.&quot;, ) . . Between 2021-04-20 and 2021-05-03 there was a mean of 0.49 million doses given per day. . 🔧 Now all we need to run our forecast is to create the function to calculate how many doses are available each day. In this case it can be a simple function (const_doses below) that always returns the 0.49 million average daily doses calculated above. Even though we don&#39;t use them here, the function must have two inputs (df and date) to be compatible with our general forecast_vaccines function created above. Let&#39;s wrap all this into a function forecast_const we can easily use to run forecasts with other constant daily dose totals, then run it on our last week average: 🔧 . def forecast_const( df, avg_second_delay, daily_doses, uk_pop=priority_totals[&quot;All Adults&quot;], end_date=datetime(2021, 10, 1), min_second_delay=28, ): &quot;&quot;&quot; Forecast vaccines assumming &#39;daily_doses&#39; doses are given per day. &quot;&quot;&quot; def const_doses(df, date): return daily_doses df_forecast = forecast_vaccines( df, avg_second_delay, doses_fn=const_doses, uk_pop=uk_pop, end_date=end_date, min_second_delay=min_second_delay, ) return df_forecast df_forecast = forecast_const(df, avg_second_delay, mean_doses_this_week) . . We can re-use our plotting functions to examine our forecast. Let&#39;s start with the daily number of 1st and 2nd doses given per day: . last_data = df.index.max() plot_daily_doses( df_forecast, forecast_date=last_data, show_daily=False, title=f&quot;Daily Vaccinations Forecast (as of {df.index.date.max()})&quot;, ) . . As expected, the total number of (1st + 2nd) doses given per day remains constant throughout our simple forecast. In the 1st and 2nd doses we see an interesting pattern where every couple of months the doses being administered swap between being mostly first doses or mostly second doses. In fact, the period over which this happens is approximately the 77 day gap between first and second doses we have assumed. At the start of the year (almost) the whole vaccine capacity was dedicated to giving new first doses, and then starting from late March all those people must be given second doses, meaning there is little spare capacity for new first doses. Our forecast predicts we will need to go through this cycle two times to vaccinate the whole population with two doses. . Now let&#39;s look at when we predict the population will be vaccinated: . plot_cumulative_doses( df_forecast, forecast_date=last_data, figsize=(15, 8), title=f&quot;UK Vaccination Forecast (as of {df.index.date.max()})&quot;, ) . . &lt;AxesSubplot:title={&#39;center&#39;:&#39;UK Vaccination Forecast (as of 2021-05-03)&#39;}, ylabel=&#39;Number of Doses [millions]&#39;&gt; . The current phase of mostly second dose vaccines being given leads to 32 million people (the population of groups 1-9) being fully vaccinated by late June in our forecast. The rest of the adult population is given a first dose of the vaccine by 19th July, and then is fully vaccinated on 26th August. Note that this gap is only 38 days (less than the 77 days between doses we use initially), as we allow second doses to be given earlier once there is spare capacity to do so. . Alternative Forecasts . Our forecast assumed doses will continue to be given at the rate from the the last two weeks, but looking back at the data we can see that this is higher than at most other times so far this year. Although it&#39;s possible the number of daily doses increases further in the future, we could consider that to be fairly optimistic. It may seem unlikely that vaccination rates fall to the levels seen at the start of the year, but there are reasons this could be the case. In particular, near the end of the vaccination programme demand may be lower in the remaining population, which was the case in Israel earlier this year for example. So what if we ask a more pessimistic question - when will the population be vaccinated with two doses if vaccines are administered at the same rate as the whole year so far? Or, even better, what is the range of likely completion dates? . To answer this, we&#39;ll create a new doses_fn (rnd_doses below) where the total number of doses given on any date in the future is the same as the number given on a day in the past, with that day selected randomly. We also limit the date in the past to have the same weekday as the forecast date, to take into account the differences during the week seen earlier (with more doses given Thursday-Saturday). Because the number of doses is chosen randomly, each time the forecast is run we&#39;ll get a different result. By running the forecast many times we can get an estimate of the uncertainty in the completion dates. . 🔧 This is done using forecast_rnd function below, which returns a list of 200 forecasts: 🔧 . def forecast_rnd( df, avg_second_delay, uk_pop=priority_totals[&quot;All Adults&quot;], end_date=datetime(2021, 10, 1), min_second_delay=28, rng=np.random.default_rng(seed=123), n_forecasts=100, ): &quot;&quot;&quot; Run n_forecasts random forecasts, using the random number generator rng to randomly choose the number of doses today to be the same as a date in the past on the same weekday. &quot;&quot;&quot; def rnd_doses(df, date): doses = rng.choice( df.loc[df.index.dayofweek == date.dayofweek, &quot;newTot&quot;].dropna() ) return doses forecasts = [ forecast_vaccines( df, avg_second_delay, doses_fn=rnd_doses, uk_pop=uk_pop, end_date=end_date, min_second_delay=min_second_delay, ) for _ in range(n_forecasts) ] return forecasts n_forecasts = 200 rnd_forecasts = forecast_rnd(df, avg_second_delay, n_forecasts=n_forecasts) . . If we plot the number of daily doses in each of the 200 forecasts we get a spread of values centred around the average rate for the year, as expected: . plt.figure(figsize=(15, 5)) for fcast in rnd_forecasts: plt.plot( fcast[&quot;newTot&quot;].rolling(window=7).mean(), alpha=10 / n_forecasts, color=&quot;k&quot; ) plt.ylabel(&quot;Doses [millions]&quot;) plt.title(&quot;Daily New Doses (7 day Average)&quot;) . . Text(0.5, 1.0, &#39;Daily New Doses (7 day Average)&#39;) . Rather than plotting each of the 200 individual forecasts, let&#39;s calculate 50% (median), 2.5% and 97.5% quantiles of the forecasts, specifically of the cumulative total of first and second doses. 95% of the forecast values lie between the 2.5% and 97.5% quantiles, so we can be confident the future data will be in that range (but only under our assumption that vaccines are given at the same rate as the year so far). . 🔧 To do that we can combine all the data for one column into a single data frame with the pd.concat function, then calculate the quantiles with the pandas quantiles function: 🔧 . quantiles = [0.025, 0.5, 0.975] q_forecasts = {} for i, col in enumerate([&quot;cumFirst&quot;, &quot;cumSecond&quot;]): rnd_col = pd.concat( [fcast[col].rename(f&quot;forecast{i}&quot;) for fcast in rnd_forecasts], axis=1, names=[0, 1], ) q_forecasts[col] = rnd_col.quantile(quantiles, axis=1) . . Now let&#39;s plot the median of our forecasts, create a shaded range between the 2.5% and 97.5% quantiles to show the uncertainty (with the matplotlib function fill_between), and also display our original &quot;last week&quot; forecast to compare: . ax = plot_cumulative_doses( pd.DataFrame( { &quot;cumFirst&quot;: q_forecasts[&quot;cumFirst&quot;].loc[0.5], &quot;cumSecond&quot;: q_forecasts[&quot;cumSecond&quot;].loc[0.5], } ), forecast_date=last_data, figsize=(15, 8), ) q_start = 0.025 q_end = 0.975 alpha = 0.25 for col in [&quot;cumFirst&quot;, &quot;cumSecond&quot;]: # add shaded region between q_start and q_end quantiles ax.fill_between( q_forecasts[col].loc[q_start].index, q_forecasts[col].loc[q_start], q_forecasts[col].loc[q_end], color=col_format[col][&quot;color&quot;], alpha=alpha, label=f&quot;95% interval {col_format[col][&#39;label&#39;]}&quot;, ) # also show previous (last week average) forecast, to compare df_forecast[col].plot( linestyle=&quot;None&quot;, marker=&quot;.&quot;, markersize=4, color=col_format[col][&quot;color&quot;], label=f&quot;Last 2 weeks, {col_format[col][&#39;label&#39;]}&quot;, ax=ax, ) ax.legend() . . &lt;matplotlib.legend.Legend at 0x7fe930c85c50&gt; . Under these assumptions, the population is fully vaccinated with two doses a couple of weeks later in mid-September rather than late-August. Note that our original forecast using the rate from the last 2 weeks lies outside of the uncertainty band for our new forecast. In other words, the population will only be vaccinated by the end of August if vaccines continue to be given at their current high rate without reverting back to the lower rates seen earlier in the year. . If we implemented a more sophisticated forecasting algorithm, such as an autoregressive or Bayesian structural time series model, we may be able to get improved estimates that incorporate the likelihood of both our &quot;optimistic&quot; and &quot;pessimistic&quot; cases. . Government Targets and SAGE Vaccine Roll-out Estimates . The government has the target of all UK adults being offered a first dose of the vaccine by the end of July. This is roughly in line with both of our forecasting approaches, with our optimistic forecast being a bit earlier in mid-July and the pessimistic forecast early-August. At the end of March, the Scientific Advisory Group for Emergencies (SAGE) also produced a report including the following two scenarios for the vaccine roll-out in England: . Fast scenario: 0.39m doses per day in England until week commencing 26th July and 0.29m per day thereafter | Slow scenario: 0.36m doses per day in England until week commencing 26th July and 0.29m per day thereafter | . Approximately scaling these up for the whole UK (56 million population England, 67 million population UK) gives: . Fast scenario: 0.46m doses per day until week commencing 26th July and 0.34m per day thereafter | Slow scenario: 0.43m doses per day until week commencing 26th July and 0.34m per day thereafter | . The SAGE forecasts use an 11-week (77 day) period between doses, which is also in line with what we derived ourselves from the data. . We can implement the assumptions from SAGE ourselves in our own forecasts just by creating a new doses_fn (sage_doses below) that returns a fixed number of doses depending on whether we&#39;re using the fast or slow strategy, and whether the date is after the 26th July or not: . def forecast_sage( df, avg_second_delay=77, scenario=&quot;fast&quot;, uk_pop=priority_totals[&quot;All Adults&quot;], end_date=datetime(2021, 10, 1), min_second_delay=28, ): &quot;&quot;&quot; Forecast vaccines for the SAGE &#39;fast&#39; and &#39;slow&#39; scenarios. &quot;&quot;&quot; if not (scenario == &quot;fast&quot; or scenario == &quot;slow&quot;): raise ValueError(&quot;scenario must be &#39;fast&#39; or &#39;slow&#39;&quot;) def sage_doses(df, date, scenario=scenario): if date &gt; datetime(2021, 7, 25): return 0.34 else: if scenario == &quot;fast&quot;: return 0.46 else: return 0.43 df_forecast = forecast_vaccines( df, avg_second_delay, doses_fn=sage_doses, uk_pop=uk_pop, end_date=end_date, min_second_delay=min_second_delay, ) return df_forecast . . Then we can generate and plot the forecasts in the same way as we&#39;ve done before (displaying both the fast and slow strategies in the same figure): . df_sage_fast = forecast_sage( df, scenario=&quot;fast&quot;, ) df_sage_slow = forecast_sage( df, scenario=&quot;slow&quot;, ) ax = plot_cumulative_doses( df_sage_fast, forecast_date=last_data, figsize=(15, 8), title=f&quot;SAGE Scenarios&quot;, forecast_label=&quot;SAGE Fast&quot;, ) for col in [&quot;cumFirst&quot;, &quot;cumSecond&quot;]: ax.plot( df_sage_slow.loc[df_sage_slow.index &gt; last_data, col], color=col_format[col][&quot;color&quot;], linestyle=&quot;:&quot;, linewidth=2, label=f&quot;SAGE Slow {col_format[col][&#39;label&#39;]}&quot;, ) ax.plot( publish_date, publish_date_data[col], &quot;o&quot;, color=col_format[col][&quot;color&quot;], markersize=10, label=f&quot;{publish_date.strftime(&#39;%d %b&#39;)}, {col_format[col][&#39;label&#39;]}&quot;, ) ax.legend() . . &lt;matplotlib.legend.Legend at 0x7fe9712404d0&gt; . The SAGE forecasts are similar to our more pessimistic forecasts, with the population fully vaccinated in mid-September, though the difference between their &quot;slow&quot; and &quot;fast&quot; strategies is smaller than the uncertainty we calculated. This gives us confidence that our forecasting approaches are reasonable, though it&#39;s interesting that SAGE does not expect the current rate of vaccinations to be maintained. It may be that they are aware of upcoming difficulties in vaccine supplies, or simply that taking a cautious approach is more appropriate for their purposes. . We should also note that we&#39;ve allowed vaccines to be given sooner than 11 weeks in the latter stages of the programme in our &quot;SAGE forecasts&quot; above, but the original SAGE report does not account for this. If second doses are not given earlier it would push the completion dates of all our forecasts back a few weeks to early to mid-October, potentially missing the government target. . Finally, we&#39;ve included markers in the figure above that show the current status on 16th May, the time of publication. The actual values look similar to our forecast values, but there have actually been more total doses (first and second combined) overall than we predicted, with 6.7 million doses since the 4th May. In comparison, our optimistic forecast using the average doses in the 2 weeks leading up to 4th May predicted 6.4 million doses, or 5.7 million in our pessimistic forecast using the average rate from the whole year so far (the SAGE scenarios are 5.6 million and 6.0 million). However, we have correctly predicted how many second doses would be given by this stage - 4.66 million compared to 4.65 million in our forecasts assuming an eleven week gap between doses. We look forward to seeing how this develops, and plan to do a story in the future to evaluate how well our forecasts performed! . Conclusion . In this Turing Data Story, we have used data collected from the UK government&#39;s Covid-19 data dashboard (using their API) to estimate when the UK may finish vaccinating its adult population. . With the demands and challenges of worldwide vaccine supply, it&#39;s difficult to accurately estimate how many vaccine doses will be available in the future, so we generated two sets of forecasts - a more optimistic forecast assuming that vaccines will continue to be given at an average of 0.49 million doses per day, which was the rate in the two weeks up to the 4th of May, and a more pessimistic forecast assuming vaccines are given at a rate consistent with the whole year so far. In our optimistic forecast the population is fully vaccinated on 26th August, or in our pessimistic forecasts a few weeks later in mid-September. Our pessimistic forecast is broadly in agreement with the assumptions in modelling by SAGE and with government targets. . As well as the uncertainty in future vaccine supply and demand, our forecasts made a number of simple assumptions about the vaccine roll-out which may not prove to be correct. We assumed 100% of the adult population will be vaccinated, for example, but we know take up rates are much lower in certain sub-groups and some people are unable to be vaccinated due to other health conditions. The number of people vaccinated is therefore likely to plateau earlier than the dates seen in our forecasts (and with fewer people vaccinated). In addition, we haven&#39;t considered differences between current and new vaccine types (which may have different dosing regimens) or regional differences. Our forecasts also assume constant vaccination rates, but a model incorporating the possibility of upward or downward trends may be more accurate. Finally, once the whole adult population has been vaccinated with a first dose we&#39;ve assumed second doses will start to be given earlier than 11-weeks, but we don&#39;t know whether this will be the case. All these combined mean the range of feasible completion dates is wider than we&#39;ve calculated. . Nevertheless, we can be hopeful that the majority of the population will be vaccinated by early autumn, and that life in the UK will be much less impacted by Covid-19 on a daily basis by that time, though it&#39;s difficult to say whether it will return back to what was considered to be &quot;normal&quot; before 2020! Finishing by the autumn would also be perfect timing for the anticipated start of giving further booster doses to the most vulnerable in time for winter. . Worldwide, Covid-19 case rates are sadly still high and vaccination rates low in many countries at the time of writing. This excellent dashboard from Our World in Data shows vaccination progress worldwide, including links to data sources that (with some pre-processing) could also be fed into the forecasting functions developed here. For European countries, the European Centre for Disease Prevention and Control has a combined dataset available. Do feel free to experiment with the code from this story; ideas could include looking at the forecast results for different dates in the past (by changing run_as_date), using data from other countries, or trying different forecasting algorithms, for example. Thanks for reading! .",
            "url": "https://alan-turing-institute.github.io/TuringDataStories-fastpages/covid-19/vaccinations/forecasting/2021/05/19/COVID-19-Vaccine-Forecasting.html",
            "relUrl": "/covid-19/vaccinations/forecasting/2021/05/19/COVID-19-Vaccine-Forecasting.html",
            "date": " • May 19, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Modelling Mail-In Votes In the 2020 US Election",
            "content": "Author . Eric Daub, Alan Turing Institute, GitHub: @edaub. | . Other Contributors . Camila Rangel Smith, Alan Turing Institute, GitHub: @crangelsmith. Twitter: @CamilaRangelS. | Martin O&#39;Reilly, Alan Turing Institute, Github: @martintoreilly. | . Reviewers . Sam Van Stroud, University College London, GitHub: @samvanstroud | Kevin Xu, Civil Service Fast Stream, GitHub: @kevinxufs | . Introduction . The Covid-19 Pandemic led to record numbers of mail-in votes in the 2020 United States Presidential Election. Because of the high volume of mail ballots, plus rules that prevented some states from counting these ballots before election day, the result of the election remained uncertain for a week, with periodic updates coming as ballots were tabulated and reported. . In particular, several states had very close races that had the potential to tip the election in favor of either candidate. The US elects the president using the Electoral College system, where every state has a fixed number of electoral votes depending on its population. These electoral votes determine the outcome, not the national popular vote. The states almost universally employ a &quot;winner-take-all&quot; model for allocating their electoral votes. Because of this, each year a few &quot;swing states&quot; have a large effect on the outcome of the election. For example, in 2000 the election came down to around a 500 vote margin in Florida (out of over 6 million ballots cast), despite the fact that Al Gore easily won the national popular vote. In 2020, a few states with very close races dominated the headlines for the week after the election, of which we will look at Pennsylvania, Arizona, and Georgia in this post. The final outcome of the election hung on the results from these states, and the slow drip feed of additional ballots being released left the public constantly checking the news for updates. . In this Turing Data Story, I examine a few ways to analyze the data updates coming from each state to predict the final outcome. This originated from some Slack discussions with Camila Rangel Smith and Martin O&#39;Reilly, whom I list above as contributors for this reason. In particular, our initial interest in this question centered around uncertainties in the analysis done by Camila and Martin, which I have carried out using Bayesian inference to quantify uncertainty and determine when we might have reasonably called each state for the eventual winner based on the data as it underwent regular updates. . Data . To create the models in the post, I use the NYT Election Data Scraper, which is an open source repository that collected data from the New York Times website every few minutes over the months following the election. We can use this data to explore how the results evolved over time following election day, and compare our results with how the news media reported these changes over time. . In particular, the data includes an estimate of the number of votes remaining, which is a crucial figure that we need in order to mathematically forecast the outcome. The New York Times bases their model for the votes remaining using turnout estimates from Edison Research, which is mentioned here. Based on this turnout estimate, combined with the updates of votes as they are counted, we can use this data to forecast the outcome. . To load this data into a Python session for analysis, I can use Pandas to simply load from the CSV version of the data directly from the URL, and extract the state that I wish to examine: . %matplotlib inline . import pandas import datetime def load_data(state, timestamp=None): &quot;&quot;&quot; Loads election data updates from CSV file as a pandas data frame Retrieves data from the live file on Github, which is loaded into a data frame before extracting the relevant state data. State must be a string, which will be searched in the &quot;state&quot; field of the data frame. Timestamp must be a datetime string. Optional, default is current date and time. Returns a data frame holding all updates from a particular state, prior to the given timestamp. The &quot;vote_differential&quot; field is turned into a signed margin that is positive for a Biden lead. Also adds columns for the number of votes for Biden and Trump. &quot;&quot;&quot; if timestamp is None: timestamp = datetime.datetime.now().strftime(&quot;%Y-%m-%dT%H:%M:%S&quot;) try: data = pandas.read_csv(&quot;https://alex.github.io/nyt-2020-election-scraper/battleground-state-changes.csv&quot;) except: data = pandas.read_csv(&quot;battleground-state-changes.csv&quot;) data.loc[data[&quot;leading_candidate_name&quot;] == &quot;Trump&quot;, &quot;vote_differential&quot;] = -data.loc[data[&quot;leading_candidate_name&quot;] == &quot;Trump&quot;, &quot;vote_differential&quot;] data[&quot;biden_votes&quot;] = None data.loc[data[&quot;leading_candidate_name&quot;] == &quot;Biden&quot;, &quot;biden_votes&quot;] = data.loc[data[&quot;leading_candidate_name&quot;] == &quot;Biden&quot;, &quot;leading_candidate_votes&quot;] data.loc[data[&quot;trailing_candidate_name&quot;] == &quot;Biden&quot;, &quot;biden_votes&quot;] = data.loc[data[&quot;trailing_candidate_name&quot;] == &quot;Biden&quot;, &quot;trailing_candidate_votes&quot;] data[&quot;trump_votes&quot;] = None data.loc[data[&quot;leading_candidate_name&quot;] == &quot;Trump&quot;, &quot;trump_votes&quot;] = data.loc[data[&quot;leading_candidate_name&quot;] == &quot;Trump&quot;, &quot;leading_candidate_votes&quot;] data.loc[data[&quot;trailing_candidate_name&quot;] == &quot;Trump&quot;, &quot;trump_votes&quot;] = data.loc[data[&quot;trailing_candidate_name&quot;] == &quot;Trump&quot;, &quot;trailing_candidate_votes&quot;] data[&quot;timestamp&quot;] = pandas.to_datetime(data[&quot;timestamp&quot;]) data = data[data[&quot;timestamp&quot;] &lt; pandas.to_datetime(timestamp)] return data[data[&quot;state&quot;].str.contains(state)] . Note that rather than specifying the leading and trailing candidates, I instead just convert the vote differential into a margin that is positive if Biden is leading and negative if Trump is leading. I also add columns for the total number of votes for Biden and Trump, which I will use later. . For instance, if I would like to see the data for Georgia: . df = load_data(&quot;Georgia&quot;) df.head() . state timestamp leading_candidate_name trailing_candidate_name leading_candidate_votes trailing_candidate_votes vote_differential votes_remaining new_votes new_votes_relevant ... trailing_candidate_partition precincts_reporting precincts_total hurdle hurdle_change hurdle_mov_avg counties_partition total_votes_count biden_votes trump_votes . 112 Georgia (EV: 16) | 2020-12-07 20:17:22.360 | Biden | Trump | 2473633 | 2461854 | 11779 | -2224 | -8 | 1 | ... | 75.000000 | 2655 | 2655 | 0.0 | 0.0 | 0.360367 | {} | 4997716 | 2473633 | 2461854 | . 113 Georgia (EV: 16) | 2020-12-05 00:26:57.152 | Biden | Trump | 2473707 | 2461779 | 11928 | -2232 | -842 | -858 | ... | 0.067599 | 2655 | 2655 | 0.0 | 0.0 | 0.368200 | {&#39;Appling&#39;: 49, &#39;Ben Hill&#39;: 4, &#39;Bleckley&#39;: 2, ... | 4997724 | 2473707 | 2461779 | . 114 Georgia (EV: 16) | 2020-11-20 22:11:31.395 | Biden | Trump | 2474507 | 2461837 | 12670 | -3074 | -954 | -917 | ... | 0.214831 | 2655 | 2655 | 0.0 | 0.0 | 0.364533 | {} | 4998566 | 2474507 | 2461837 | . 115 Georgia (EV: 16) | 2020-11-20 21:57:11.453 | Biden | Trump | 2475227 | 2462034 | 13193 | -4028 | -770 | -532 | ... | 0.855263 | 2655 | 2655 | 0.0 | 0.0 | 0.349900 | {} | 4999520 | 2475227 | 2462034 | . 116 Georgia (EV: 16) | 2020-11-20 21:51:12.226 | Biden | Trump | 2475304 | 2462489 | 12815 | -4798 | -1958 | -1851 | ... | 0.518098 | 2655 | 2655 | 0.0 | 0.0 | 0.356867 | {} | 5000290 | 2475304 | 2462489 | . 5 rows × 22 columns . The data contains a timestamp, the number of votes for each candidate, the margin, and an estimate of the number of votes remaining. Note that because the number of votes remaining is just an estimate, it can eventually become negative if the eventual number of ballots exceeds the estimate used to forecast the number of remaining votes. We can also have situations where the number of votes is corrected downwards, so we will need to take care that these do not trip up our model. . When the data is captured in this way, we can see how the vote margin evolves over time as new ballots are counted. For example, we can look at the data for all states up to midnight on 5 November to see the evolution of the race: . import matplotlib.pyplot as plt state_list = [&quot;Pennsylvania&quot;, &quot;Georgia&quot;, &quot;Arizona&quot;] timestamp_list = [&quot;2020-11-05T00:00:00&quot;]*3 iter_vals = list(zip(state_list, timestamp_list)) def plot_data(state, timestamp=None): &quot;Plot the election data for a given state up through a given time&quot; df = load_data(state, timestamp) plt.figure() plt.plot(df[&quot;votes_remaining&quot;], df[&quot;vote_differential&quot;], &quot;o&quot;) plt.xlabel(&quot;Votes remaining&quot;) plt.ylabel(&quot;Biden margin&quot;) plt.title(&quot;{} Vote Updates through {}&quot;.format(state, timestamp)) for (state, tstamp) in iter_vals: plot_data(state, tstamp) . Note that the trend shows that Biden is catching up as more votes are counted in both Georgia and Pennsylvania, while Trump is catching up in Arizona. The trend is fairly linear. Thus, one might first consider doing a simple regression to estimate the final margin. . Linear Regression Analysis . As a first pass at building a model, I can do a simple regression analysis. A linear regression model will have two parameters that are fit: the slope will be related to the fraction of the outstanding votes that are for Biden, and the intercept, which will indicate the final margin when there are no votes remaining. (This is the initial analysis that was done by Camila for Pennsylvania and Martin for Arizona.) . import numpy as np def linear_regression(state, timestamp=None): &quot;&quot;&quot; Fit a linear regression model to the election updates Fits a line to the data updates for a given state and a given timestamp. Plots the data and returns the fitting parameters (slope, intercept) as a numpy array. &quot;&quot;&quot; plot_data(state, timestamp) df = load_data(state, timestamp) coeffs = np.polyfit(df[&quot;votes_remaining&quot;], df[&quot;vote_differential&quot;], 1) plotvals = np.linspace(0, df[&quot;votes_remaining&quot;].iloc[-1]) plt.plot(plotvals, coeffs[0]*plotvals + coeffs[1]) return coeffs for (state, tstamp) in iter_vals: coeffs = linear_regression(state, tstamp) print(&quot;Predicted margin for {} as of {}: {}&quot;.format(state, tstamp, coeffs[1])) . Predicted margin for Pennsylvania as of 2020-11-05T00:00:00: 139881.65460479335 Predicted margin for Georgia as of 2020-11-05T00:00:00: 11362.338299788926 Predicted margin for Arizona as of 2020-11-05T00:00:00: -87876.90143040325 . Note that at this point, the linear regression predicts a margin in Pennsylvania and Arizona that are quite different from the final margin. Georgia appears to be very close to the final margin. However, Arizona seems to have outlier points that muddles this analysis (which was first noted by Martin). Thus, while these models are useful starting points, they do not appear to be particularly robust and are somewhat dependent on when you choose to fit the data. . def get_margin(state, timestamp=None): &quot;Extract margin for a state at a given time&quot; df = load_data(state, timestamp) return df[&quot;vote_differential&quot;].iloc[0] for state in state_list: print(&quot;Current margin in {}: {}&quot;.format(state, get_margin(state))) . Current margin in Pennsylvania: 81660 Current margin in Georgia: 11779 Current margin in Arizona: 10457 . However, one thing to note about this is that even though the trends point clearly in favor of Biden in this analysis, we do not have a good idea of the uncertainties. Without an uncertainty, we cannot robustly evaluate if the model is making good predictions. How might we develop a model that explicitly captures this uncertainty? And given such a model, when can we be confident that a candidate has won the state, and how does it align with the narrative from the news media? The following describes one approach for doing so. . Modelling Uncertainty in the Votes . To address this shortcoming, we turn to Bayesian Inference. Bayesian statisticians think of model parameters not as a single number, but rather probability distributions -- in this way, we can get a sense of the range of values that the model thinks are consistent with the data. . Model Structure . As noted above, the regression model has two different parameters: the slope (related to the fraction of votes that are cast for Biden), and the intercept (which is essentially the prediction of the final margin). Note that while the linear regression fit these two things simultaneously, there is no reason why I had to let the final margin be a &quot;free&quot; parameter that was adjusted in the fitting: I could have instead just fit a single parameter for the slope (for instance, simply using the fraction of mail ballots cast thus far for one of the candidates), and then used that estimate to project the votes remaining in order to extrapolate and obtain an estimate of the final margin. . We would like to adjust our model to account for uncertainty in both of these pieces of the model. The main source of uncertainty in the vote probability is related to the fact that not all voters are identical -- the regression model assumes that this is the case, and the main challenge in building a more complex model is to relax this constraint while still ensuring that the model is simple enough that we can reliably fit it with the available data. For this, I will propose what is known as a hierarchical model, which is a common way of adding more complexity to a model in Bayesian inference. However, this is not the only way to do this, and there are certainly other methods based on Bayesian inference that would be able to account for this type of uncertainty. . There is also some uncertainty to account for in projecting the remaining votes, but it turns out that this is much smaller than the uncertainty in the vote probability. The way that I handle this type of uncertainty is a fairly standard problem in Bayesian inference, so I will focus most of my attention here on how to make a model that does not treat all voters identically, as this is the principal source of uncertainty. The following sections outline how to build such a model, fit its parameters, and then project the election outcome once it has been fit. . Bayesian Model of the Vote Probability . Bayesian inference tends to think of probability distributions as reflecting statements about our beliefs. Formally, I need to state my initial beliefs before I see any data, and then I can use that data to update my knowledge. This previous belief is known as a prior in Bayesian inference, and the updated beliefs once I look at the data is known as the posterior. . Bayesian Inference . Bayesian inference involves taking our previous beliefs about a system, described by a probability distribution of reasonable values we expect a particular parameter to take, and then using the data to update those beliefs about the distribution that we expect that parameter to take by computing the posterior. A key concept in Bayesian statistics is the idea of a conditional probability, written $p(A|B)$, which means the probability of $A$ given that we already know $B$ (or conditioned on $B$). Inference allows us to update our beliefs (or in other words condition them on something we have observed) by applying Bayes&#39; rule: . $$ p( theta|y) = frac{p(y| theta)p( theta)}{p(y)} $$ . Here, $p( theta)$ is the prior distribution (which we will specify before looking at the data), $p(y| theta)$ is the likelihood (the probability that we would have gotten the data conditioned on a particular value of $ theta$), and $p(y)$ is known as the evidence (the probability of getting that particular observation over all possible outcomes of the experiment). Note that we have two standard probability distributions (the prior and the evidence), and two conditional probabilities (the likelihood and the posterior). The one we really care about is the posterior (our belief in the model parameters conditioned on the data, since the model parameters are uncertain but the data is known), but in practice it is much easier to compute the likelihood; Bayes&#39; rule tells us how these two are connected and makes these kind of computations more practical. . In practice, for most models one cannot compute the evidence very easily, so instead of computing the posterior directly, one draws samples from it. A common technique for this is Markov Chain Monte Carlo (MCMC) sampling. A number of software libraries have been written in recent years to make carrying out this sampling straightforward using what are known as probabilistic programming languages. These languages formally treat variables as probability distributions with priors and then draw samples from the posterior to allow the user to more easily perform inference. . Note that because I will ultimately draw samples from the posterior, rather than compute the probability density function itself, most of the plots in this story will not have meaningful vertical axis scales, as the scale will depend on the number of samples that were drawn. Thus in most cases I simply omit labels on the vertical axes, as these are implicitly the number of samples in each case. . A Hierarchical Bayesian Model For Voting . In the linear regression model, we effectively treat the vote probability as a single, unchanging value. This is the same as saying that every voter in our model is identical. Given the political polarization in the US, this is probably not a very good assumption. Although the data seems to strongly suggest that the mail-in votes are consistently in favor of one candidate, this is not the same as saying all voters are identical. In the following, I build a model to relax this assumption, using what is known as a hierarchical Bayesian model. . If the above model of assuming that every voter is identical is one extreme, then the other extreme is to assume that every voter is different and we would need to estimate hundreds of thousands to millions of parameters to fit our model. This is not exactly practical, so a hierarchical model posits a middle ground that the vote probability is itself drawn from a probability distribution. In this manner, we can use a probability distribution to describe the overall population of voters, and thus rather than fitting a parameter for every single voter, we just need to fit a few parameters to specify the distribution. . This structure is why hierarchical models are so powerful: probability distributions can be described with only a small number of parameters, so they are easy to fit, but we will see that it vastly expands the range of outcomes that the model is able to produce. This is in essence why hierarchical models can be so powerful -- they guard against overfitting by using only a few parameters, but they can still produce a large variety of outcomes. . In the following, we model the vote probability by assuming that each vote update has a single vote probability associated with it, and that vote probability is drawn from a beta distribution. A beta distribution is a distribution defined over the interval $[0,1]$ with two shape parameters $a$ and $b$ that lets us flexibly specify a wide range of outcomes. If $a$ and $b$ are less than 1, then the distribution is biased towards the extreme values of 0 or 1, while if they are greater than 1 then the distribution is biased towards 0.5. If $a &gt; b$, then the model is more biased towards 1, while if $b &gt; a$ then the model is biased towards 0. Thus we can specify a huge range of distributions with just two parameters. . from scipy.stats import beta def plot_beta(a, b): &quot;Plot the beta distribution for shape paramters (a, b)&quot; xvals = np.linspace(0, 1) plt.plot(xvals, beta.pdf(xvals, a=a, b=b)) plt.xlabel(&quot;Biden vote probability&quot;) plt.title(&quot;PDF for the Beta distribution with a = {}, b = {}&quot;.format(a, b)) plot_beta(8., 4.) . Thus, instead of estimating the vote probability, I instead need to estimate $a$ and $b$, which will tell us what I expect the distribution of the vote probability to be. Having multiple levels of distributions described by distributions like this are what give hierarchical models their name -- parameters are drawn from distributions, and this distribution must be described by some parameters. But because all parameters in Bayesian inference are probability distributions, these parameters are also distributions themselves, hence the model is hierarchical. . Since all parameters in a Bayesian model must have priors, our task is now to encode our prior beliefs about the vote probability distribution by setting prior distributions for $a$ and $b$. . Prior . The prior represents our previous beliefs about the value of the model parameters before we see any data, or in other words what we expect to be reasonable. If you are observing outcomes from flipping a coin, you might reasonably expect the probability of getting heads to be close to 0.5 in the absence of any data, and you might be unwilling to accept the idea of this probability of being 0 or 1. This is encoded in a probability distribution function, usually by using a particular distribution that is convenient given the constraints of the particular problem (for instance, the beta distribution described above is one that is often used to model priors where the parameter in question is a probability). . Often, in Bayesian inference one does not have strong feelings about what values they might expect for a parameter. In those cases, we might prefer to use something simple, what is known as an uninformative prior. These might be expressed as a statement like &quot;every value is equally probable&quot;. Or in this case we might assume that the prior for the vote probability should be peaked close to 0.5, and then taper off towards 0 and 1, with the argument that US presidential elections are usually decided by a few percentage points difference in the national popular vote. This might seem very reasonable on the surface, as America is pretty evenly divided between Democrats and Republicans. . However, mail in votes in practice can be extremely biased towards one party. Historically, a large majority of mail in ballots are Democratic, for a variety of reasons that are largely demographic. Trump also spent much of the campaign sowing doubt about mail-in ballots (telegraphing his post-election strategy of trying to throw them out in court), so his supporters may be much less likely to vote in this manner. However, there could also be a situation where the mail-in ballots fall heavily towards a Republican candidate (as we have seen already, more of the Arizona ballots tend to be in favor of Trump, which was due to late arriving ballots being from Republicans that registered to vote just before the election). Thus, based on this I would argue that what we actually want is a prior that is reasonably likely to include some extremes in the vote probability to ensure that our estimate of the final outcome prior to looking at the data doesn&#39;t exclude a significant swing. . This issue illustrates a challenge with Bayesian Hierarchical models -- when the parameter that I have some knowledge about is itself described by a distribution, the priors for the distribution parameters can be more difficult to specify. For this reason, modellers often go one level further and specify prior distributions on the parameters used to specify the priors on the model parameters, which are known as hyperpriors, and see how varying the priors changes the outcome of inference. I will not explore this level of Bayesian modelling, but in building this model I had to try a number of different choices for the priors before arriving at something that I thought accurately reflected my prior beliefs about the outcome. . In the priors that I finally settled on, I use a Lognormal distribution for my prior on $a$ and $b$. Lognormal distributions are frequently used as an alternative to a normal distribution in situations when the parameter in question must be positive (effectively, lognormal distributions can thought of as having the logarithm of the random variable in question following a normal distribution). I choose the parameters of the lognormal distributions for $a$ and $b$ to be slightly different such that the resulting distributions are more likely to lean democratically (as mail in votes are historically more democratic leaning), but still have a decent chance of producing extremes for Trump. I also choose the parameters such that I get a mix of values more biased towards the extremes as well as those biased towards values closer to 0.5. . Priors like the ones used here are often referred to as subjective priors. Depending on who you ask, this is either a strength or a weakness in Bayesian inference. On one hand, the results are somewhat dependent on my parameter choices for my priors, but on the other hand, nearly every scientific study reflects some of the biases of the researchers that carry out the work. Subjective priors have the benefit of explicitly codifying the assumptions I made about what I expect to be reasonable outcomes, at the cost of some potential subjectivity in the final results. In this era of significant divides across party lines, exposing this part of the model as inherently subjective may also help ensure that the model parameters are not chosen in a way that explicitly favors one party over another. . As we will see, using this prior allows for the possibility that there is a decent chance based on historical data that the mail votes are heavily in favor of one candidate. The parameters I choose give a slight edge to the candidate from the Democratic party, but the prior includes a very reasonable chance that the swings will be towards the Republican candidate, which should help ensure that the model is not perceived to be biased against either candidate. Here are some histograms showing single samples of the vote probability drawn from this prior, and an aggregate histogram of 100 samples: . from pymc3 import Lognormal def plot_prior_samples(n_samples): &quot;Plot a random draw of the vote probability from the prior&quot; a = Lognormal.dist(mu=0.4, sd=0.5).random(size=n_samples) b = Lognormal.dist(mu=0.2, sd=0.5).random(size=n_samples) x = np.linspace(0., 1.) plt.figure() plt.hist(beta.rvs(size=(1000, n_samples), a=a, b=b).flatten(), bins=100) plt.xlabel(&quot;Biden vote probability&quot;) plt.title(&quot;Prior Vote Probability Distribution using {} samples&quot;.format(i)) for i in [1, 1, 1, 100]: plot_prior_samples(i) . From these individual samples, as well as the aggregated histogram, we see that we get a range of outcomes, with a slight bias towards those that favor democrats. As we acquire enough data to reliably estimate the underlying distribution of the vote probabilites, we should see better estimates of the true distribution, which will eliminate more of the extremes and reduce the uncertainty in the final outcome. . Likelihood . Finally, we need to explicitly model the likelihood. The likelihood is how Bayesian models connect the parameters to the data -- the likelihood tells us how probable the data is conditioned on a particular choice of parameters. As discussed earlier, this is actually the opposite of what we want, as we are interested in the parameters conditioned on the data. However, Bayes&#39; rule helps us compute the quantity we are interested in as long as we are able to to compute the likelihood. . For this particular problem, we can fortunately compute the likelihood easily in closed form. When one flips a fair coin a number of times, the distribution of outcomes follows a binomial distribution. Thus, I can use a binomial likelihood to model the range of vote probabilites that might be consistent with the votes that were cast. This can be computed analytically, and most probabilistic programming languages have built-in capacity for computing likelihoods of this type (so that we don&#39;t have to worry about writing down the correct formula and implementing and testing the code to do this ourselves!). This is done automatically when using a probabilistic programming language by setting this particular variable to have a known value, which indicates to the probabilistic programming language that this variable is used to compute the likelihood. This means that I can focus on describing the model, rather than how to do the computation, which is one of the strengths of this type of modelling. . PyMC3 Implementation . Thus, I can now write down a model in a probabilistic programming language in order to draw samples from the posterior. There are a number of popular lanaguages for this -- here I use PyMC3 to implement my model. PyMC3 can easily handle all of the features I specified above (hierarchical structure, and a binomial likelihood), which is written out in the function below. . In coding up the model, I need to convert the election data into a series of &quot;trials&quot; consisting of a number of total votes cast and the corresponding number of votes for Biden. This is the way that the information needs to be captured to compute the binomial likelihood, which can then be used to draw samples from the posterior. Earlier, I noted that the data sometimes contains some inconsistencies (i.e. there are more votes cast for one candidate than the total number in that batch), so to protect against this I perform some checks for consistency and throw out any data that doesn&#39;t make sense (in particular, I want to be sure the total number of votes is non-negative and the number of votes cast for Biden is smaller than the total number of ballots in this particular batch). I do this using a Numpy logical array in the extract_vote_trials function, as otherwise some inconsistent data can trip up the PyMC computations. . Once we have the trials defined, we can specify our model using PyMC3, perform inference, and plot the results: . import pymc3 import logging logger = logging.getLogger(&quot;pymc3&quot;) logger.propagate = False logger.setLevel(logging.ERROR) def extract_vote_trials(state, timestamp=None): &quot;&quot;&quot; Convert vote data into a series of bernoulli trials. If no data is valid (i.e. check that all numbers are nonzero and the number of total ballots cast is larger than the number of votes for, then return a list of a single zero for each. Returns two lists of positive integers for the total number of votes and the votes for Biden &quot;&quot;&quot; df = load_data(state, timestamp) total_votes = np.diff(-df[&quot;biden_votes&quot;]) + np.diff(-df[&quot;trump_votes&quot;]) biden_votes = np.diff(-df[&quot;biden_votes&quot;]) # throw out combinations that don&#39;t make any sense using numpy # logical arrays -- note that multiplication of logical arrays # is equivalent to a logical &quot;and&quot;; # if none remain then just return (0,0) trials_to_keep = ((total_votes &gt; 0)*(biden_votes &gt;= 0)* (biden_votes &lt;= total_votes)) total_votes = total_votes[trials_to_keep] biden_votes = biden_votes[trials_to_keep] if len(total_votes) == 0: total_votes = [0] biden_votes = [0] return (np.array(total_votes, dtype=np.int64), np.array(biden_votes, dtype=np.int64)) def estimate_theta_hierarchical(state, timestamp=None): &quot;Estimate the vote probability distribution using a hierarchical model and MCMC sampling&quot; total_votes, biden_votes = extract_vote_trials(state, timestamp) num_trials = len(total_votes) # build model and draw MCMC samples with pymc3.Model() as model: a = pymc3.Lognormal(&quot;a&quot;, mu=0.4, sd=0.5) b = pymc3.Lognormal(&quot;b&quot;, mu=0.2, sd=0.5) theta = pymc3.Beta(&quot;theta&quot;, alpha=a, beta=b, shape=num_trials) obs = pymc3.Binomial(&quot;obs&quot;, p=theta, n=total_votes, observed=biden_votes, shape=num_trials) trace = pymc3.sample(1000, progressbar=False, return_inferencedata=False) return trace def plot_posterior(state, timestamp): &quot;Plot the posterior distribution of the vote probability&quot; trace = estimate_theta_hierarchical(state, timestamp) rvs_size = (100, len(trace[&quot;a&quot;])) plt.figure() plt.hist(beta.rvs(size=rvs_size, a=np.broadcast_to(trace[&quot;a&quot;], rvs_size), b=np.broadcast_to(trace[&quot;b&quot;], rvs_size)).flatten(), bins=100) plt.xlabel(&quot;Biden vote probability&quot;) plt.title(&quot;{} Vote Probability Posterior as of {}&quot;.format(state, timestamp)) for (state, tstamp) in iter_vals: plot_posterior(state, tstamp) . Once I draw MCMC samples for $a$ and $b$, I convert those samples into samples of $ theta$ to see our posterior estimate of the vote probability. . Looking at these plots, I see that the model is now much more varied in its estimates for the vote probability (note that this is the posterior for the distribution expected for the vote probability, rather than the explicit values of the vote probability itself). The mean is still where I expect it based on the linear regression analysis, but the distribution is much wider due the fact that occasionally votes come in from places that are not as heavily in favor of Biden (or Trump in the case of Arizona). This wider distribution of the vote probability is how I quantify the larger uncertainty in the election outcome. Using this distribution to forecast the remaining votes should considerably increase the spread of the predicted final margin and assure that it is not overconfident in the final result. . Predicting the Final Margin . Once I have samples from the vote probability, I need to simulate the remaining votes to predict the final outcome. This is known as estimating the posterior predictive distribution in Bayesian inference, when one uses the updated knowledge about one of the model parameters to predict something that was not used to fit the data. . What is a reasonable way to simulate the remaining votes? As one can see from the data, the votes come in a steady drip feed as ballots are counted. Thus, I can simulate this by sampling randomly, with replacement, from the data for the number of ballots cast in each update until I get to the number of votes remaining. I can then use the posterior samples of $a$ and $b$ to generate a distribution of vote probabilities, and then draw from the vote probabilites to forecast the outcome of each batch of votes using a binomial distribution. I repeat this process 10 times to ensure that the result isn&#39;t dependent on the particular realization of the drip feed simulation, and aggregate those samples to get the final estimate of the posterior predictive distribution. This should give a reasonable estimate of the final outcome based on the model. . from scipy.stats import binom def get_votes_remaining(state, timestamp=None): &quot;Extract remaining votes for a state at a given timestamp&quot; df = load_data(state, timestamp) return df[&quot;votes_remaining&quot;].iloc[0] def draw_random_vote_updates(state, timestamp): &quot;Draw a random set of simulated vote updates for the remaining votes&quot; n_remain = get_votes_remaining(state, timestamp) n, k = extract_vote_trials(state, timestamp) if np.all(n == 0): n = np.array([1000], dtype=np.int64) simulated_vote_updates = [] while np.sum(simulated_vote_updates) &lt;= n_remain: simulated_vote_updates.append(np.random.choice(n)) simulated_vote_updates[-1] = n_remain - np.sum(simulated_vote_updates[:-1]) assert np.sum(simulated_vote_updates) == n_remain return np.array(simulated_vote_updates, dtype=np.int64) def project_remaining_votes(trace, simulated_vote_updates): &quot;Project the remaining votes using MCMC samples of the vote probability distribution parameters&quot; assert np.all(trace[&quot;a&quot;] &gt;= 0.) assert np.all(trace[&quot;b&quot;] &gt;= 0.) rvs_size = (len(trace[&quot;a&quot;]), len(simulated_vote_updates)) return np.sum(binom.rvs(size=rvs_size, p=beta.rvs(size=rvs_size, a=np.broadcast_to(trace[&quot;a&quot;][:, np.newaxis], rvs_size), b=np.broadcast_to(trace[&quot;b&quot;][:, np.newaxis], rvs_size)), n=np.broadcast_to(simulated_vote_updates, rvs_size)), axis=-1) def predict_final_margin(trace, state, timestamp=None): &quot;&quot;&quot; Use posterior samples of the vote probability to predict the remaining votes. The remaining votes are split into batches by sampling from the previous votes until enough are accumulated. Then each batch is forecast using the posterior samples, and the total is summed. Returns a numpy array of samples of the final margin &quot;&quot;&quot; # simulate remaining votes n_trials = 10 predicted_margin = np.zeros((n_trials, len(trace[&quot;a&quot;]))) for i in range(n_trials): simulated_vote_updates = draw_random_vote_updates(state, timestamp) predicted_margin[i] = project_remaining_votes(trace, simulated_vote_updates) n_remain = get_votes_remaining(state, timestamp) margin = get_margin(state, timestamp) return margin - n_remain + 2*predicted_margin.flatten() def plot_predictions(state, timestamp): &quot;Plot the posterior predictive distribution for the given state and time&quot; trace = estimate_theta_hierarchical(state, timestamp) predicted_margin = predict_final_margin(trace, state, timestamp) plt.figure() plt.hist(predicted_margin, bins=100) plt.xlabel(&quot;Biden Margin&quot;) plt.title(&quot;{} final predicted margin as of {}&quot;.format(state, timestamp)) for (state, tstamp) in iter_vals: plot_predictions(state, tstamp) . As we can see from this, the model has fairly wide intervals surrounding the predicted final margin based on the original linear regression model. Interestingly, when I fit Georgia in this way, it looks much more likely that Trump would win through this point than the linear regression model would suggest, though the final margin found by the regression analysis is well within the error bounds suggested from the predictions. Arizona looks up for grabs, indicating that the outlier points were definitely biasing the regression analysis. Pennsylvania is much more firmly leaning towards Biden. We can look at the results again a day later to see how the race evolved: . for (state, tstamp) in zip(state_list, [&quot;2020-11-06T00:00:00&quot;]*3): plot_predictions(state, tstamp) . Clearly, Georgia has swung in Biden&#39;s favor over the course of the day. The mean final margin in Pennsylvania has not moved much, though the uncertainty has tightened up and made the result more likely for Biden. Arizona could still go either way. . Animating the Updates . Now that I have built a model, I can build an animation that shows the evolution of the predicted results as a function of time. This will show how the uncertainty shrinks over time as fewer votes remain. I check for results every 30 minutes for the 12 days from 4 November onward, and update the model when new ballots are found. I also compute a Biden win probability and show the mean margin $ pm$ 2 standard deviations to give an idea of the equivalent regression result and its uncertainty. Building the animation requires some more clever manipulation of Matplotlib objects, so I will not go into detail to describe exactly what the plotting code is doing here. It is based on the code in this example, so please look at that example for a description of how to animate histograms. . Note: Because new MCMC samples need to be drawn for each new update, creating this animation ends up being fairly expensive to run (this took several hours on my laptop). I speed things up by saving the current prediction each time the MCMC samples are drawn, so that if the previous iteration is the same we do not need to re-run the model. However, this is still fairly expensive, so don&#39;t try and run this unless you are willing to wait! . %%capture import matplotlib.path as path import matplotlib.patches as patches import matplotlib.text as text import matplotlib.animation as animation def load_previous_model(filename, initialize=False): &quot;&quot;&quot; Load the previous model from file Load results from the previous simulation from disk, including the total votes cast, votes for Biden, number of votes remaining, and the previous set of samples from the predictive distribution. If the file cannot be loaded, or if we pass `initialize=True`, returns `None` for all values. &quot;&quot;&quot; total_votes = None biden_votes = None n_remain = None preds = None if not initialize: try: model = np.load(filename) total_votes = model[&quot;total_votes&quot;] biden_votes = model[&quot;biden_votes&quot;] n_remain = int(model[&quot;n_remain&quot;]) preds = model[&quot;preds&quot;] except (KeyError, IOError): total_votes = None biden_votes = None n_remain = None preds = None return total_votes, biden_votes, n_remain, preds def fit_model(state, timestamp=None, initialize=False): &quot;&quot;&quot; Fit a model to predict the final margin for the given date/time. Each iteration is saved as a numpy file, and the next step checks for a model that matches the existing vote count before doing the expensive MCMC fitting Returns the simulated final margin samples at the given time &quot;&quot;&quot; filename = &quot;model.npz&quot; total_votes_prev, biden_votes_prev, n_remain_prev, preds_prev = load_previous_model(filename, initialize) total_votes, biden_votes = extract_vote_trials(state, timestamp) n_remain = get_votes_remaining(state, timestamp) if (np.array_equal(total_votes_prev, total_votes) and np.array_equal(biden_votes_prev, biden_votes) and n_remain_prev == n_remain): return preds_prev else: theta = estimate_theta_hierarchical(state, timestamp) preds = predict_final_margin(theta, state, timestamp) np.savez(filename, total_votes=total_votes, biden_votes=biden_votes, preds=preds, n_remain=n_remain) return preds def initialize_verts(bins): &quot;Initialize the patch corners for the animation&quot; # get the corners of the rectangles for the histogram left = bins[:-1] right = bins[1:] vals = np.zeros(len(left)) nrects = len(left) nverts = nrects * (1 + 3 + 1) verts = np.zeros((nverts, 2)) codes = np.full(nverts, path.Path.LINETO) codes[0::5] = path.Path.MOVETO codes[4::5] = path.Path.CLOSEPOLY verts[0::5, 0] = left verts[0::5, 1] = vals verts[1::5, 0] = left verts[1::5, 1] = vals verts[2::5, 0] = right verts[2::5, 1] = vals verts[3::5, 0] = right verts[3::5, 1] = vals return verts, codes def update_verts(preds, bins, verts): &quot;Update the verticies on the histogram patches for animation&quot; n, bins = np.histogram(preds, bins) verts[1::5, 1] = n verts[2::5, 1] = n return verts def animate(i, state, start_time, bins_t, verts_t, patch_t, bins_b, verts_b, patch_b, date_text, vote_text, mean_text, prob_text): &quot;Updates the histogram patches and text to make the animated histogram plot&quot; hours = i//2 minutes = 30*i % 60 timestamp = ((datetime.datetime.strptime(start_time, &quot;%Y-%m-%dT%H:%M:%S&quot;) + datetime.timedelta(hours=hours, minutes=minutes)).strftime(&quot;%Y-%m-%dT%H:%M:%S&quot;)) if i == 0: preds = fit_model(state, timestamp, initialize=True) else: preds = fit_model(state, timestamp) verts_t = update_verts(preds, bins_t, verts_t) verts_b = update_verts(preds, bins_b, verts_b) date_text.set_text(datetime.datetime.strptime(timestamp, &quot;%Y-%m-%dT%H:%M:%S&quot;).strftime(&quot;%Y-%m-%d %H:%M&quot;)) n_remain = get_votes_remaining(state, timestamp) vote_text.set_text(&quot;{} Votes Remaining&quot;.format(str(n_remain))) mean_text.set_text(&quot;Margin = {:&gt;8} $ pm$ {:&gt;7}&quot;.format(int(np.mean(preds)), int(2.*np.std(preds)))) prob_text.set_text(&quot;Biden win prob = {:.2f}&quot;.format(np.sum(preds &gt; 0)/len(preds))) return [patch_t, patch_b, date_text, vote_text, mean_text, prob_text] def create_animation(state): &quot;Create an animation of the vote updates for the given state&quot; start_time = &quot;2020-11-04T14:00:00&quot; xlim = 100000 ylim = 500 nbins = 200 binsize = xlim//nbins bins_b = np.linspace(0, xlim, binsize, dtype=np.int64) bins_t = np.linspace(-xlim, 0, binsize, dtype=np.int64) verts_t, codes_t = initialize_verts(bins_t) verts_b, codes_b = initialize_verts(bins_b) patch_t = None patch_b = None fig, ax = plt.subplots() barpath_t = path.Path(verts_t, codes_t) patch_t = patches.PathPatch(barpath_t, facecolor=&#39;C3&#39;, edgecolor=&#39;C3&#39;, alpha=0.5) ax.add_patch(patch_t) barpath_b = path.Path(verts_b, codes_b) patch_b = patches.PathPatch(barpath_b, facecolor=&#39;C0&#39;, edgecolor=&#39;C0&#39;, alpha=0.5) ax.add_patch(patch_b) lefttext = -9*xlim//10 righttext = 9*xlim//10 uppertext = 9*ylim//10 lowertext = 8*ylim//10 date_text = text.Text(lefttext, uppertext, &quot;&quot;) ax.add_artist(date_text) vote_text = text.Text(lefttext, lowertext, &quot;&quot;) ax.add_artist(vote_text) prob_text = text.Text(righttext, uppertext, &quot;&quot;, ha=&#39;right&#39;) ax.add_artist(prob_text) mean_text = text.Text(righttext, lowertext, &quot;&quot;, ha=&#39;right&#39;) ax.add_artist(mean_text) ax.set_xlim(-xlim, xlim) ax.set_ylim(0, ylim) ax.set_xlabel(&quot;Biden margin&quot;) ax.set_title(&quot;{} Final Margin Prediction&quot;.format(state)) ani = animation.FuncAnimation(fig, animate, frames=2*24*12, interval=200, fargs=(state, start_time, bins_t, verts_t, patch_t, bins_b, verts_b, patch_b, date_text, vote_text, mean_text, prob_text), repeat=False, blit=True) return ani ani_pa = create_animation(&quot;Pennsylvania&quot;) ani_ga = create_animation(&quot;Georgia&quot;) ani_az = create_animation(&quot;Arizona&quot;) . There was 1 divergence after tuning. Increase `target_accept` or reparameterize. . Displaying these, we can see how the race evolves over time. . from IPython.display import HTML HTML(ani_pa.to_jshtml()) . There were 4 divergences after tuning. Increase `target_accept` or reparameterize. There was 1 divergence after tuning. Increase `target_accept` or reparameterize. . &lt;/input&gt; Once Loop Reflect HTML(ani_ga.to_jshtml()) . There was 1 divergence after tuning. Increase `target_accept` or reparameterize. There was 1 divergence after tuning. Increase `target_accept` or reparameterize. . &lt;/input&gt; Once Loop Reflect HTML(ani_az.to_jshtml()) . There was 1 divergence after tuning. Increase `target_accept` or reparameterize. . &lt;/input&gt; Once Loop Reflect Based on this model, we can see that Pennsylvania was very clearly going in Biden&#39;s direction from early on, despite Trump&#39;s substantial lead at the end of Election Day. This was reflected by comments made by other election data journalists, all of whom were fairly confident that the numbers were good news for Biden even as early as 4 November. Biden&#39;s win probability steadily increased, surpassing 99% on 6 November. The media called the state, and the election, for Biden on 7 November. . Georgia, on the other hand, was not a sure thing. For much of the early data, our model favored Trump, who had a win probability of 82% on the evening of 4 November. However, the uncertainties were wide enough at that point that Biden&#39;s eventual victory was still not an unreasonable outcome. As the ballots shifted towards Biden, we can see a clear change on 5 November, and by that evening Biden&#39;s win probability was 70%. Biden&#39;s chances steadily increased and surpassed 99% on the evening of 7 November. However, since the final margin was still fairly small in absolute terms, the media did not call Georgia until 12 or 13 November. . Arizona, despite being the first state among these that many news outlets called, showed the largest uncertainties for much of the time period we have data, with no candidate having a clear advantage until 9 November when Biden took a slight lead in the model predictions. From there, Biden inched ahead as the remaining ballots came in, and the outcome shifted clearly in his favor on 12 November with his win probability exceeding 99% that evening. The remaining media outlets called Arizona for Biden on 13 November. . As we can see, our model is able to call the outcome of these states slightly before the media does so (possibly due to some level of conservatism). Seeing the range of uncertainties shrink is helpful to know what range of outcomes could still be reasonably expected, and can be a much more interesting way to visualize the results (particularly when animated as above). . Conclusion . This Data Story examined how we could build a Bayesian hierarchical model for the US election data and use it to forecast the final outcome. The model showed how the outcome in three key battleground states evolved over the week following the election as mail ballots were counted, tipping the election in favor of Biden. Because the model includes uncertainties and prior beliefs about voting behavior, this gave a richer picture of how to forecast the final result than simply extrapolating using early returns (with considerable more thought and effort required, however!). Because of the time scales over which the election played out, we could imagine having put this in place to make prospective predictions (stay tuned for 2024!) in real time to see how this simple model aligns with more experienced election forecasters. .",
            "url": "https://alan-turing-institute.github.io/TuringDataStories-fastpages/us%20election/linear%20regression/bayesian%20modeling/2021/02/26/Modelling-Mail-In-Votes-In-the-2020-US-Election.html",
            "relUrl": "/us%20election/linear%20regression/bayesian%20modeling/2021/02/26/Modelling-Mail-In-Votes-In-the-2020-US-Election.html",
            "date": " • Feb 26, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Who was protected by the first COVID-19 lockdown in England?",
            "content": "Authors . David Beavan. The Alan Turing Institute. GitHub: @DavidBeavan. Twitter: @DavidBeavan. | Camila Rangel Smith. The Alan Turing Institute. GitHub: @crangelsmith. Twitter: @CamilaRangelS. | Sam Van Stroud. University College London. Github: @samvanstround. | Kevin Xu. Civil Service. Github: @kevinxufs. | . All the authors above contributed to this data story story with ideas, code development and story telling. . Reviewers . Nick Barlow. The Alan Turing Institute. Github: @nbarlowATI | Louise Bowler. The Alan Turing Institute. Github: @LouiseABowler | . Welcome to the first Turing Data Story! . Our goal at Turing Data Stories is to produce educational data science content by telling stories with data. . A data story begins with a question about a societal issue that is close to our hearts, and covers our entire analysis process in trying to answer it. From gathering and cleaning the data, to using it for data analysis. We hope that our stories will not only provide the reader with insight into some societal issues, but also to showcase the explanatory power of data science, and enable the reader to try out some of these techniques themselves. . Each of our stories comes in the form of a Jupyter notebook, which will contain all the code required to follow along with the analysis, along with an explanations of our thought process. . COVID-19 and Deprivation . Everyone has been impacted by the COVID-19 pandemic. On the 23rd of March 2020, the UK Government announced various lockdown measures with the intention of limiting the spread of the virus and reducing the number of COVID-19 related deaths. These lockdown measures meant the temporary closure of many commercial shops and businesses, as well as the limiting of work based travel to only those jobs that could not be done at home. . We are concerned that the impact of COVID-19 has disproportionately affected certain groups of people. In particular, that the lockdown may have had a worse impact on those in the most deprived areas, whose livelihoods may have required them to leave the house more frequently. . There have been a number of concerns with Government COVID-19 reporting, in particular with testing and mortality statistics. This motivates independent, open analysis to validate and expand on our understanding of our current state of the pandemic. . Earlier in June, the Office of National Statistics (ONS) published a report exploring this exact question: to assess whether those living in the most deprived areas of the UK were disproportionately affected by COVID-19. The report seems to confirm our fear - between the months of March to May 2020 those in the most deprived areas of the UK were more than twice as likely to die as a result of COVID-19 than those in the least deprived areas. . There are two caveats that we have with the ONS analysis. The first is reproducibility. We want to confirm the ONS results by making the analysis procedure open. The second caveat is that the ONS report aggregates data over time, and therefore that it might miss interesting differences in outcomes between the different stages of lockdown. The lockdown was most severe between March and May, with measures relaxing from June onwards. We wonder whether the ONS analysis will continue to be relevant as lockdown eases. For this purpose, we wish to extend the ONS analysis to cover all available data, and at the same time, make a comparison between the different stages of lockdown. . Thus for our first story we ask: . Have the COVID-19 lockdown measures protected people equally across all socio-economic groups in society? . We have two main objectives . 1) We want to replicate the ONS analysis using their provided data to ensure that we have all the inputs necessary to understand the problem. . 2) We want to extend the ONS analysis to consider different time periods - representing the severity of the different stages of lockdown - to see how this affects people from different socio-economic groups. . Key Metrics . Our analysis will involve exploring the relationship between the following key metrics: . COVID-19 mortality rates over time and across geographical regions. | Index of multiple deprivation (IMD) by geographical region - a measure of the geographic spread of social deprivation (see definition and explanation). | . Data Sources . We will use the following datasets: . Mortality count time series | IMD Rankings (England only) | Populations provided by the ONS | Local Authority District Code Region Lookup Table provided by the ONS | ONS Mortality and Depravation Data | . In case any of the data sources become unavailable in the future, a download mirror is available here. . For simplicity this study is only focusing on England. We understand the importance of investigating all of the regions of the UK. However due to the difference of lockdown measures across the nations of the UK, and also due to the way the IMD ranking is defined, an independent analysis is required for each nation. We encourage readers to replicate our analysis with the other nations. . Analysis Outline . Here&#39;s a list of the different steps of the analysis: . Download and process data from multiple deprivation and COVID-19 deaths. | Combine the different datasets into a single table by joining on geographical region. | Calculate age standardised mortality rates from mortality counts. | Replicate the ONS analysis, looking at mortality rate by region. | Visualise the distribution of COVID-19 deaths across the UK. | Segment the data into time periods, corresponding to the different stages of lockdown. | Explore at the relationship between our two key metrics (deprivation and mortality rates) in the different time periods. | Data Collation and Wrangling . &#128295; Setup . We begin by setting up our environment and importing various python libraries that we will be using for the analysis. In particular, pandas and numpy are key data science libraries used for data processing. matplotlib and seaborn will help us visualise our data. . import os import requests from datetime import datetime import zipfile import numpy as np import pandas as pd from scipy.stats import pearsonr import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&#39;white&#39;) . 🔧 Let&#39;s make some directories in which we can store the data we are going to download. . downloaded_data_dir = &#39;data/downloaded&#39; # processed data goes here derived_data_dirname = &#39;data/derived&#39; # create the directory if it does not already exist os.makedirs(downloaded_data_dir, exist_ok=True) os.makedirs(derived_data_dirname, exist_ok=True) . 🔧 Here is a small helper function which will download files from a URL. . def download_file(url, filename): # create the directory if it does not already exist os.makedirs(os.path.dirname(filename), exist_ok=True) # make the HTTP request r = requests.get(url, allow_redirects=True) # save file _ = open(filename, &#39;wb&#39;).write(r.content) . Index of Multiple Deprivation (IMD) . 🔧 Now let&#39;s download and process our deprivation data. This data provides a deprivation rank (lower rank meaning more deprived) for each geographical region in England (the geographical regions are here are called Lower Super Output Areas, or LSOAs). As a rough idea of scale, LSOAs contain on average around 1,500 people. . Download . url = &#39;https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/833970/File_1_-_IMD2019_Index_of_Multiple_Deprivation.xlsx&#39; # specify filename filename = &#39;ONS_2019_Index_of_Multiple_Deprivation.xlsx&#39; # construct file path filepath = os.path.join(downloaded_data_dir, filename) # download and save file at the specified URL download_file(url, filepath) # read the relevant sheet imd_df = pd.read_excel(filepath, sheet_name=&#39;IMD2019&#39;) . If we sort by deprivation rank, we can get an idea of the most / least deprived LSOAs. . imd_df.sort_values(by=&#39;Index of Multiple Deprivation (IMD) Rank&#39;).head() . LSOA code (2011) LSOA name (2011) Local Authority District code (2019) Local Authority District name (2019) Index of Multiple Deprivation (IMD) Rank Index of Multiple Deprivation (IMD) Decile . 21400 E01021988 | Tendring 018A | E07000076 | Tendring | 1 | 1 | . 12280 E01012673 | Blackpool 010A | E06000009 | Blackpool | 2 | 1 | . 12288 E01012681 | Blackpool 006A | E06000009 | Blackpool | 3 | 1 | . 12279 E01012672 | Blackpool 013B | E06000009 | Blackpool | 4 | 1 | . 12278 E01012671 | Blackpool 013A | E06000009 | Blackpool | 5 | 1 | . imd_df.sort_values(by=&#39;Index of Multiple Deprivation (IMD) Rank&#39;).tail() . LSOA code (2011) LSOA name (2011) Local Authority District code (2019) Local Authority District name (2019) Index of Multiple Deprivation (IMD) Rank Index of Multiple Deprivation (IMD) Decile . 17759 E01018293 | South Cambridgeshire 012B | E07000012 | South Cambridgeshire | 32840 | 10 | . 15715 E01016187 | Bracknell Forest 002D | E06000036 | Bracknell Forest | 32841 | 10 | . 30976 E01031773 | Mid Sussex 008D | E07000228 | Mid Sussex | 32842 | 10 | . 26986 E01027699 | Harrogate 021A | E07000165 | Harrogate | 32843 | 10 | . 17268 E01017787 | Chiltern 005E | E07000005 | Chiltern | 32844 | 10 | . Derive Mean IMD Decile . At this point we want to join the two datasets together in order to explore the relationship between our two key metrics. . A problem is that the index of multiple deprivation comes with a geographical granularity at the LSOA level, whilst the COVID-19 mortality counts come with a geographical granularity at the Local Authority District (LAD) level. To complicate things, for each LAD there are generally multiple LSOAs, each with different indexes of multiple deprivation. For more information about the different geographical regions in the UK, read this. . We need to aggregate the LSOAs into LADs by averaging out the indexes of multiple deprivation. First let&#39;s write some functions to help us. . def get_mean_IMD_decile(LAD_code): # select relevant LSOAs LSOAs = imd_df[imd_df[&#39;Local Authority District code (2019)&#39;] == LAD_code] # calculate mean IMD rank mean_IMD_decile = round(LSOAs[&#39;Index of Multiple Deprivation (IMD) Decile&#39;].mean(), 2) std_IMD_decile = round(LSOAs[&#39;Index of Multiple Deprivation (IMD) Decile&#39;].std(), 2) return mean_IMD_decile, std_IMD_decile . Now we can use these functions to calculate the mean IMD decile in each Local Authority District. . LAD_codes = imd_df[&#39;Local Authority District code (2019)&#39;].unique() mean_IMD_decile, std_IMD_decile = np.vectorize(get_mean_IMD_decile)(LAD_codes) LAD_df = pd.DataFrame({&#39;LAD Code&#39;: LAD_codes, &#39;LAD Name&#39;: imd_df[&#39;Local Authority District name (2019)&#39;].unique(), &#39;Mean IMD decile&#39;: mean_IMD_decile, &#39;Std IMD decile&#39;: std_IMD_decile}) LAD_df = LAD_df.set_index(&#39;LAD Code&#39;) . Let&#39;s make a quick histogram of the mean IMD decile. . LAD_df[&#39;Mean IMD decile&#39;].hist(range=(1,11), bins=10) plt.xlabel(&#39;Mean IMD Decile&#39;) plt.ylabel(&#39;Count&#39;) plt.show() . It should be noted that we lose some information when averaging the IMD ranks in this way. The central region of the distribution is relatively flat, and so we cannot differentiate well between LADs in this region. . Notice there are no Local Authority Districts that have a mean IMD decile of 1 or 10. This is due to the presence of variance inside each Local Authority District. For example, there is no single LAD whose constituent LSOAs all have a IMD deciles of 1 (or 10). See the table below for the maximum and minimum mean IMD deciles. Note that Blackpool, the most deprived (on average) LAD in England, has a mean IMD decile of 2.41. This demonstrates that this LAD has some LSOAs that are not in the most deprived deciles. The opposite is true for the least deprived areas. The &quot;Std IMD decile&quot; column in the below table shows the level of variation of the IMD (measured by the standard deviation) within each LAD. . LAD_df.sort_values(by=&#39;Mean IMD decile&#39;) . LAD Name Mean IMD decile Std IMD decile . LAD Code . E06000009 Blackpool | 2.41 | 1.58 | . E08000003 Manchester | 2.54 | 1.84 | . E08000011 Knowsley | 2.56 | 1.91 | . E09000002 Barking and Dagenham | 2.68 | 1.01 | . E09000012 Hackney | 2.74 | 1.11 | . ... ... | ... | ... | . E07000155 South Northamptonshire | 8.78 | 1.32 | . E07000176 Rushcliffe | 8.82 | 1.58 | . E07000005 Chiltern | 8.86 | 1.51 | . E06000041 Wokingham | 9.27 | 1.43 | . E07000089 Hart | 9.39 | 1.08 | . 317 rows × 3 columns . Derive Age Standardisation Weight . To account for the different population sizes in the different Local Area Districts, we want to use a mortality rate rather than an overall count. When we do this we convert a count into a rate per 100,000 people. Furthermore, we want to account for differences in the age distributions of the different LADs in order to make a valid comparison between the different geographic areas. An age standardised rate allows for this comparison. Ideally we would calculate this rate directly from the data, but as our mortality over time dataset does not contain information about age, we instead will need to extract a standardisation factor from a different dataset. . The dataset we will use to do this comes from the ONS study on COVID-19 and deprivation. We will use it to derive a standardisation factor which will allow us to convert our mortality counts into an age and population standardise mortality rate. This mortality rate is a European standard (2013 ESP). As we mentioned, we cannot calculate the factor directly as our mortality over time dataset does not include age information, so this reverse engineering is the best we can do. . For more information on how the mortality rate is calculated, see here. Simply put, this is the formula that we are assuming approximates the relationship between the age standardised rate and the mortality count: . age standardised mortality rate = [standardisation factor] * [mortality count] . ⚠️ The above procedure is not ideal because it assumes that the distribution of ages of those who died inside each Local Area District is constant in time, and therefore the standardisation factor we derive in one dataset (which doesn&#39;t have information about time) can be applied to the other (which has information about time). . First, let&#39;s download the data. . url = &#39;https://www.ons.gov.uk/file?uri=%2fpeoplepopulationandcommunity%2fbirthsdeathsandmarriages%2fdeaths%2fdatasets%2fdeathsinvolvingcovid19bylocalareaanddeprivation%2f1march2020to17april2020/referencetablesdraft.xlsx&#39; # specify filename filename = &#39;ONS_age_standarisation_April2020.xlsx&#39; # construct file path filepath = os.path.join(downloaded_data_dir, filename) # download and save file at the specified URL download_file(url, filepath) # read the relevant sheet age_rate_df = pd.read_excel(filepath, sheet_name=&#39;Table 2&#39;, header=3) . Next, we can do some minor selection and reformatting of the DataFrame. . age_rate_persons_df = age_rate_df[age_rate_df[&#39;Sex&#39;] == &#39;Persons&#39;] # rename columns age_rate_persons_df.columns = [&#39;Sex&#39;, &#39;Geography type&#39;, &#39;LAD Code&#39;, &#39;Area name&#39;, &#39;All causes Deaths&#39;, &#39;All causes Rate&#39;,&#39;&#39; ,&#39;All causes Lower CI&#39;, &#39;All causes Upper CI&#39;,&#39;&#39; ,&#39;COVID-19 Deaths&#39;, &#39;COVID-19 Rate&#39;, &#39;&#39;,&#39;COVID-19 Lower CI&#39;, &#39;COVID-19 Upper CI&#39; ] # remove anomalous row (Isles of Scilly) without numerical data age_rate_persons_df = age_rate_persons_df[age_rate_persons_df[&#39;All causes Rate&#39;] != &#39;:&#39;] age_rate_persons_df = age_rate_persons_df[age_rate_persons_df[&#39;COVID-19 Rate&#39;] != &#39;:&#39;] # remove columns where all entries are NaN due to the spreadsheet formating. age_rate_persons_df.dropna(axis=1) age_rate_persons_df.head() . Sex Geography type LAD Code Area name All causes Deaths All causes Rate All causes Lower CI All causes Upper CI COVID-19 Deaths COVID-19 Rate COVID-19 Lower CI COVID-19 Upper CI . 1 Persons | Unitary Authority | E06000001 | Hartlepool | 154 | 170.7 | NaN | 143.5 | 197.8 | NaN | 29 | 31 | NaN | 20.7 | 44.5 | . 2 Persons | Unitary Authority | E06000002 | Middlesbrough | 289 | 256 | NaN | 226.1 | 286 | NaN | 89 | 79 | NaN | 63.2 | 97.6 | . 3 Persons | Unitary Authority | E06000003 | Redcar and Cleveland | 215 | 142.6 | NaN | 123.5 | 161.8 | NaN | 40 | 26.5 | NaN | 18.9 | 36.2 | . 4 Persons | Unitary Authority | E06000004 | Stockton-on-Tees | 297 | 167 | NaN | 147.8 | 186.1 | NaN | 38 | 21 | NaN | 14.8 | 28.9 | . 5 Persons | Unitary Authority | E06000005 | Darlington | 169 | 151.5 | NaN | 128.6 | 174.4 | NaN | 26 | 22.9 | NaN | 15 | 33.7 | . Let us now calculate the factor by which we need to multiply the count of deaths to derive the age-standardised mortality rate per 100,000 habitants. . age_rate_persons_df[&#39;All causes rate factor&#39;] = ( age_rate_persons_df[&#39;All causes Rate&#39;] / age_rate_persons_df[&#39;All causes Deaths&#39;] ) age_rate_persons_df[&#39;COVID-19 rate factor&#39;] = ( age_rate_persons_df[&#39;COVID-19 Rate&#39;] / age_rate_persons_df[&#39;COVID-19 Deaths&#39;] ) # drop columns age_rate_persons_df = age_rate_persons_df[[&#39;LAD Code&#39;, &#39;All causes rate factor&#39;, &#39;COVID-19 rate factor&#39;]] . We can merge this into the previous DataFrame so all the information is accessible in one place. . LAD_df = LAD_df.reset_index() LAD_df = LAD_df.merge(age_rate_persons_df, on=&#39;LAD Code&#39;, how=&#39;inner&#39;) LAD_df = LAD_df.set_index(&#39;LAD Code&#39;) . Finally, let&#39;s save the standardisation factors for each LAD, stored in the DataFrame LAD_df, so that we can easily use them later. . LAD_df_filename = &#39;Local_Authority_District_Lookup.csv&#39; LAD_df_filepath = os.path.join(derived_data_dirname, LAD_df_filename) # write to csv LAD_df.to_csv(LAD_df_filepath, index=False) . Mortality Counts . Now we are ready to download the main dataset that we will be analysing: the number of COVID-19 and non COVID-19 deaths across time and place. . Download and Format . Let&#39;s download the ONS dataset containing mortality counts by week and Local Authority District. . url = &#39;https://www.ons.gov.uk/file?uri=%2fpeoplepopulationandcommunity%2fhealthandsocialcare%2fcausesofdeath%2fdatasets%2fdeathregistrationsandoccurrencesbylocalauthorityandhealthboard%2f2020/lahbtablesweek35.xlsx&#39; # specify filename filename = &#39;ONS_COVID_Mortality_Counts.xlsx&#39; # construct file path filepath = os.path.join(downloaded_data_dir, filename) # download and save file at the specified URL download_file(url, filepath) . sheet_name = &#39;Occurrences - All data&#39; # read the sheet into a pandas DataFrame mortality_df = pd.read_excel(filepath, sheet_name=sheet_name, header=3) . Let&#39;s quickly check if all the LADs are represented in both datasets so that we can join the IMD rank with the mortality information for each LAD. . not_in_imd = set(mortality_df[&#39;Area code&#39;]) - set(imd_df[&#39;Local Authority District code (2019)&#39;]) not_in_mortality = set(imd_df[&#39;Local Authority District code (2019)&#39;]) - set(mortality_df[&#39;Area code&#39;]) print(&#39;There are&#39;, len(not_in_mortality), &#39;codes in the IMD dataset but not in the mortality dataset.&#39;) print(&#39;There are&#39;, len(not_in_imd), &#39;codes in the mortality dataset but not in the IMD dataset.&#39;) . There are 4 codes in the IMD dataset but not in the mortality dataset. There are 30 codes in the mortality dataset but not in the IMD dataset. . We have 346 LAD codes in the mortality data set, and only 317 in the IMD dataset. Upon closer inspection, it turned out that IMD dataset does not contain any Welsh entries (as the IMD ranking is defined for England only). Additionally, the mortality dataset contains a single entry for Buckinghamshire, a new unitary authority in 2020 (E06000060). The IMD dataset, meanwhile, contains 4 LAD codes for Buckinghamshire. We will drop these anomalous locations from the analysis for now. . missing_LAD_codes_df = mortality_df[~mortality_df[&#39;Area code&#39;].isin(imd_df[&#39;Local Authority District code (2019)&#39;])] missing_LAD_codes = missing_LAD_codes_df[&#39;Area code&#39;].unique() # filter by common LAD codes mortality_df = mortality_df[~mortality_df[&#39;Area code&#39;].isin(missing_LAD_codes)] . Furthermore, the age standardisation factor derived previously was not able to be derived for one LAD (the Isles of Scilly). Let&#39;s drop that now too to avoid any problems later down the line. . mortality_df = mortality_df[mortality_df[&#39;Area code&#39;].isin(LAD_df.index)] . Finally, since we are interested in looking at the effect of COVID-19 and the lockdown policies on the working population, we can remove deaths that took place in care homes or hospices. . mortality_df = mortality_df[(mortality_df[&#39;Place of death&#39;] != &#39;Care home&#39;) &amp; (mortality_df[&#39;Place of death&#39;] != &#39;Hospice&#39;)] # to instead select only deaths in care homes or hospices, use this line: #mortality_df = mortality_df[(mortality_df[&#39;Place of death&#39;]==&#39;Care home&#39;) | # (mortality_df[&#39;Place of death&#39;]==&#39;Hospice&#39;)] . The mortality data starts from Wednesday 1st Jan 2020. Let&#39;s use that to convert the supplied week numbers into a date. . mortality_df[&#39;Date&#39;] = [datetime.strptime(f&#39;2020 {n-1} 3&#39;, &#39;%Y %W %w&#39;).strftime(&#39;%Y-%m-%d&#39;) for n in mortality_df[&#39;Week number&#39;]] # drop week number column mortality_df = mortality_df.drop(columns=&#39;Week number&#39;) . Finally, we can take a random sample of 5 rows from the DataFrame to check everything looks okay, and to get an idea of its structure. . mortality_df.sample(n=5) . Area code Geography type Area name Cause of death Place of death Number of deaths Date . 43031 E07000136 | Local Authority | Boston | COVID 19 | Other communal establishment | 0 | 2020-03-11 | . 27659 E08000002 | Local Authority | Bury | COVID 19 | Other communal establishment | 0 | 2020-02-12 | . 41644 E06000043 | Local Authority | Brighton and Hove | All causes | Hospital | 13 | 2020-03-11 | . 28045 E08000036 | Local Authority | Wakefield | All causes | Elsewhere | 2 | 2020-02-12 | . 77533 E09000007 | Local Authority | Camden | All causes | Elsewhere | 0 | 2020-05-06 | . If you want to reproduce the results from the initial ONS report, you can restrict the date ranges of the data by uncommenting these lines. . #mortality_df = mortality_df[mortality_df[&#39;Date&#39;] &lt; &#39;2020-04-18&#39;] . Download Local Area District to Region Lookup Table . As shown in the ONS report, a nice plot to make is the total number of mortalities in each region of England (a region is composed of many LADs). To do this, we need to know which region each LAD belongs. Let&#39;s download this data now from the following website: https://geoportal.statistics.gov.uk/datasets/local-authority-district-to-region-april-2019-lookup-in-england. . url = &#39;https://opendata.arcgis.com/datasets/3ba3daf9278f47daba0f561889c3521a_0.csv&#39; # specify filename filename = &#39;LAD_Code_Region_Lookup.csv&#39; # construct file path filepath = os.path.join (downloaded_data_dir, filename) # download and save file at the specified URL download_file(url, filepath) # read the relevant sheet LAD_code_region_lookup_df = pd.read_csv(filepath, index_col=&#39;FID&#39;).set_index(&#39;LAD19CD&#39;) . Taking a look at the data, we can see that the index &quot;LAD19CD&quot; contains our familiar LAD code, and the column &quot;RGN12NM&quot; gives us the name of the region in which that LAD is located. Perfect! . LAD_code_region_lookup_df.head() . LAD19NM RGN19CD RGN19NM . LAD19CD . E09000001 City of London | E12000007 | London | . E06000054 Wiltshire | E12000009 | South West | . E09000002 Barking and Dagenham | E12000007 | London | . E09000003 Barnet | E12000007 | London | . E09000004 Bexley | E12000007 | London | . Split Data Into Different Time Periods . Now, the final step before we can really start our analysis is to split our dataset into different time periods. As mentioned in the introduction, we want to compare COVID-19 mortality before, during and after lockdown was in place. Within each time period, we sum over all deaths, and add the IMD decile for each LAD. Finally, we&#39;ll also include Region information. . Let&#39;s write a function to sum the mortality data over time to get the total number of deaths. Then, we&#39;ll reformat the DataFrame to separate COVID-19 and non COVID-19 deaths. Finally, we&#39;ll use the table downloaded in the previous section to get the Region name for each LAD. The function combines information from all the previous DataFrames and produces a DataFrame with everything we need to do our analysis. . def filter_date_and_aggregate(df, date_range=None): &quot;&quot;&quot; The function: - Selects dates that are inside the supplied date range. - Sums over time in this date range. - Separates COVID-19 vs non COVID-19 deaths. - Decorates rows with area and region name columns. - Calculates the standardised mortality rate using previously calculated factors. - Pulls in the mean IMD decile as previously calculated. &quot;&quot;&quot; # filter dates if date_range: df = df[(df[&#39;Date&#39;] &gt;= date_range[0]) &amp; (df[&#39;Date&#39;] &lt; date_range[1])] if len(df) == 0: print(&#39;Error: Please make sure there is some data availbile for the supplied date range!&#39;) return None # sum over time df = df.groupby(by=[&#39;Area code&#39;, &#39;Cause of death&#39;]).sum() df = df.reset_index(level=[-1]) # seperate out all deaths and COVID deaths as their own columns df = df.pivot(columns=&#39;Cause of death&#39;, values=&#39;Number of deaths&#39;) df.columns.name = &#39;&#39; # rename columns df = df.rename(columns={&#39;All causes&#39;: &#39;Total deaths&#39;, &#39;COVID 19&#39;: &#39;COVID deaths&#39;}) # add non-COVID deaths as column df[&#39;Non COVID deaths&#39;] = df[&#39;Total deaths&#39;] - df[&#39;COVID deaths&#39;] # add area names df[&#39;Area name&#39;] = LAD_df.loc[df.index][&#39;LAD Name&#39;] # add region names df[&#39;Region name&#39;] = LAD_code_region_lookup_df.loc[df.index][&#39;RGN19NM&#39;] # Calculate the rate per 100k using the age-standardisation factor estimated previously df[&#39;COVID-19 rate&#39;] = (LAD_df.loc[df.index][&#39;COVID-19 rate factor&#39;] * df[&#39;COVID deaths&#39;]).astype(float) df[&#39;All causes rate&#39;] = (LAD_df.loc[df.index][&#39;All causes rate factor&#39;] * df[&#39;Total deaths&#39;]).astype(float) # import mean IMD rank df[&#39;Mean IMD decile&#39;] = LAD_df[&#39;Mean IMD decile&#39;] return df . mortality_sum_df = mortality_df.groupby(by=[&#39;Area code&#39;, &#39;Date&#39;, &#39;Cause of death&#39;]).sum().reset_index() . First, let&#39;s agreggate the data without splitting into different time periods. . # and also includes information about deprivation, no date filtering yet. total_deaths_df = filter_date_and_aggregate(mortality_sum_df) . Now we can split up the data into three periods. The first period is from January 1st to April 7th - 16 days from the beginning of lockdown. The second period runs from April 7th to June 1st - 16 days after the stay at home order was lifted. The final period runs from June 1st to August 28th. . We use a time delay of 16 days after key policy decisions to account for the time lag between onset of the disase and death. The number was taken from this study: &quot;Clinical characteristics of 113 deceased patients with coronavirus disease 2019: retrospective study&quot; BMJ 2020;368:m1091. . first_date_range = (&#39;2020-01-01&#39;, &#39;2020-04-07&#39;) first_df = filter_date_and_aggregate(mortality_sum_df, first_date_range) first_df[&#39;period&#39;] = 1 # second date range second_date_range = (&#39;2020-04-07&#39;, &#39;2020-06-01&#39;) second_df = filter_date_and_aggregate(mortality_sum_df, second_date_range) second_df[&#39;period&#39;] = 2 # second date range third_date_range = (&#39;2020-06-01&#39;, &#39;2020-08-28&#39;) third_df = filter_date_and_aggregate(mortality_sum_df, third_date_range) third_df[&#39;period&#39;] = 3 . print(&#39;Total deaths from COVID-19 in before lockdown period: t&#39;, first_df[&#39;COVID deaths&#39;].sum()) print(&#39;Total deaths from COVID-19 in during lockdown period: t&#39;, second_df[&#39;COVID deaths&#39;].sum()) print(&#39;Total deaths from COVID-19 in after lockdown period: t&#39;, third_df[&#39;COVID deaths&#39;].sum()) . Total deaths from COVID-19 in before lockdown period: 6521 Total deaths from COVID-19 in during lockdown period: 24179 Total deaths from COVID-19 in after lockdown period: 3217 . Let&#39;s also divide the rate by the number of days in each time period, which will give us the the age standardised mortality rate per day. . def get_num_days(date_range): d0 = datetime.strptime(date_range[1], &#39;%Y-%m-%d&#39;) d1 = datetime.strptime(date_range[0], &#39;%Y-%m-%d&#39;) return (d0 - d1).days full_date_range = (&#39;2020-01-01&#39;, &#39;2020-08-28&#39;) total_deaths_df[&#39;All causes rate&#39;] = total_deaths_df[&#39;All causes rate&#39;] / get_num_days(full_date_range) total_deaths_df[&#39;COVID-19 rate&#39;] = total_deaths_df[&#39;COVID-19 rate&#39;] / get_num_days(full_date_range) first_df[&#39;All causes rate&#39;] = first_df[&#39;All causes rate&#39;] / get_num_days(first_date_range) first_df[&#39;COVID-19 rate&#39;] = first_df[&#39;COVID-19 rate&#39;] / get_num_days(first_date_range) second_df[&#39;All causes rate&#39;] = second_df[&#39;All causes rate&#39;] / get_num_days(second_date_range) second_df[&#39;COVID-19 rate&#39;] = second_df[&#39;COVID-19 rate&#39;] / get_num_days(second_date_range) third_df[&#39;All causes rate&#39;] = third_df[&#39;All causes rate&#39;] / get_num_days(third_date_range) third_df[&#39;COVID-19 rate&#39;] = third_df[&#39;COVID-19 rate&#39;] / get_num_days(third_date_range) . all_df = pd.concat([first_df,second_df, third_df]) . Now we are finished with all of the processing steps and we are ready for the fun part: analysing the data! . Study #1 - Regional Mortality Counts &amp; Rates . Our first objective was to reproduce the ONS analysis to ensure that we have all the pieces we need to understand the problem. The first plots that we will replicate compare COVID-19 mortality across the different regions in England (Figures 1 &amp; 2 in the ONS analysis). . For more information about what a &quot;replicate&quot; means in this context, check out the definitions over at the Turing Way. In this case, a replicate means a different team coming to the same conclusion, using the same analysis procedure. . Total Mortalities by Region . For Figure 1, we will produce a stacked bar chart showing the mortality count (split up into COVID-19 and non COVID-19 deaths) for each Region in England. . Summing over region and sorting the values, we are almost ready to make the plot. . total_deaths_by_region_df = total_deaths_df.groupby(by=&#39;Region name&#39;).sum() # sort ascending total_deaths_by_region_df = total_deaths_by_region_df.sort_values(by=&#39;Total deaths&#39;, ascending=True) . Finally, let&#39;s write the code to actually make the plot. . xs = total_deaths_by_region_df.index # mortality counts non_covid_deaths = total_deaths_by_region_df[&#39;Non COVID deaths&#39;] covid_deaths = total_deaths_by_region_df[&#39;COVID deaths&#39;] # set bar width width = 0.75 # colors similar to ONS covid_color = (251/255, 213/255, 59/255, 0.9) noncovid_color = (25/255, 142/255, 188/255, 0.9) # create a figure and plot data plt.figure(figsize=(7,10)) p1 = plt.barh(xs, covid_deaths, width, color=covid_color, label=&#39;COVID-19 Deaths&#39;) p2 = plt.barh(xs, non_covid_deaths, width, left=covid_deaths, color=noncovid_color, label=&#39;Non COVID-19 Deaths&#39;) # label axes plt.xlabel(&#39;Deaths Since 01/01/2020&#39;, fontsize=16) plt.ylabel(&#39;Region&#39;, fontsize=16) plt.yticks(rotation=30) # add vertical grid lines plt.gca().xaxis.grid(True, linestyle=&#39;-&#39;, which=&#39;major&#39;, color=&#39;grey&#39;, alpha=.25) # show legend and plot plt.legend(fontsize=14) plt.show() . There it is! A lot of work but now we can already begin to try and understand what this data is telling us. Here are some conclusions: . For all regions, the number of COVID-19 deaths is smaller than the number of non COVID-19 deaths. | The number of deaths varies a lot between different regions. This can be due to the fact that there are different numbers of people living in each region (for example, there are more people living in the South East than there are in the North East). On top of that, we know that older people have a higher risk of dying after contracting COVID-19, and as the age distributions are different for different regions, this can also affect the overall number of deaths. | . Standardised Mortality Rate by Region . To account for the varying population sizes and age distributions, let&#39;s look at the age-standardised mortality rates per 100,000 people, standardised to the 2013 European Standard Population. Age-standardised mortality rates allow for differences in the age structure of populations and therefore allow valid comparisons to be made between geographical areas, the sexes and over time. . total_rates_df_by_region = total_deaths_df.groupby(by=&#39;Region name&#39;, as_index=False).agg(&#39;mean&#39;) total_rates_df_by_region = total_rates_df_by_region.sort_values(by=&#39;All causes rate&#39;, ascending=True) . x_labels = total_rates_df_by_region[&#39;Region name&#39;] xs = np.array(range(len(x_labels))) # mortality counts non_covid_rate = total_rates_df_by_region[&#39;All causes rate&#39;] covid_rate = total_rates_df_by_region[&#39;COVID-19 rate&#39;] # set bar width width = 0.4 # create a figure and plot data plt.figure(figsize=(7,10)) p2 = plt.barh(xs+0.2, non_covid_rate, width, color=noncovid_color, label=&#39;All Causes Mortality Rate&#39;, tick_label=x_labels) p1 = plt.barh(xs-0.2, covid_rate, width, color=covid_color, label=&#39;COVID-19 Mortality Rate&#39;) # label axes plt.xlabel(&#39;Age standardised mortality rate per 100,000 people per day since 01/01/2020&#39;, fontsize=16) plt.ylabel(&#39;Region&#39;, fontsize=16) plt.yticks(rotation=30) # add vertical grid lines plt.gca().xaxis.grid(True, linestyle=&#39;-&#39;, which=&#39;major&#39;, color=&#39;grey&#39;, alpha=.25) # show legend and plot plt.legend(fontsize=14, loc=&#39;lower right&#39;) plt.show() . Note that as we plot the rates, we switch from a stacked bar chart (showing counts of COVID-19 and non COVID-19 mortalities), to two bar charts side by side (showing the COVID-19 mortality rate, and the all causes mortality rate). Even with this caveat in mind, when looking at the chart we see it tells a very different story to the previous plot. For example, in the previous plot, the South East had the highest number of total deaths, but looking at the standardised rates in this plot we see that it is ranked second from the bottom. This shows that the raw mortality counts do not tell the whole story, and so we cannot rely solely on them to make meaningful comparisons between different Regions. . Study #2 - Mortality by Deprivation . We can now study the relationship between COVID-19 mortality and deprivation. To do this we will make some plots showing the standardised mortality rate as a function of the mean IMD decile for each LAD in England. Recall that the rate has been normalised by the number of days in each time period, so that they are comparable. . In the plots, you will see the $y$ axis labelled with &quot;Standardised Mortality Rate&quot;. In fact, this rate is the age standardised count of deaths observed per 100,000 people per day. . def get_corr_and_slope(xs, ys): # calculate the correlation coefficient corr = round(pearsonr(xs, ys)[0], 2) # calcualte the slope of a linear fit slope = round(np.polyfit(xs, ys, 1)[0], 2) return corr, slope . Comparing All Causes and COVID-19 Mortality Rates . To get started, let&#39;s overlay the mortality rates for all causes of death and COVID-19 on the same plot. . po = {&#39;s&#39;: 10, &#39;alpha&#39;:0.5} # select data IMD_decile = total_deaths_df[&#39;Mean IMD decile&#39;] all_causes_rate = total_deaths_df[&#39;All causes rate&#39;] covid_rate = total_deaths_df[&#39;COVID-19 rate&#39;] # calcualte correlations and slopes ac_stats = get_corr_and_slope(IMD_decile, all_causes_rate) c19_stats = get_corr_and_slope(IMD_decile, covid_rate) # make plots plt.figure(figsize=(10,6)) sns.regplot(x=IMD_decile, y=all_causes_rate, label=f&#39;All causes $r={ac_stats[0]}$&#39;, scatter_kws=po) sns.regplot(x=IMD_decile, y=covid_rate, color=&#39;red&#39;, label=f&#39;COVID-19 $r={c19_stats[0]}$&#39;, scatter_kws=po) # format plot plt.ylabel(&#39;Standardised Mortality Rate&#39;, fontsize=14) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=14) plt.legend(fontsize=14); plt.ylim((0, 3.5)) plt.show() . In the plot legends, $r$ is the correlation coefficient. If you are unfamiliar with the concept of correlation, or want a refresher, take a look here. . Recall that the lower the mean IMD rank in each LAD, the more deprived the area is. There is a negative correlation between the standardised rate and the IMD decile, for both the all causes rate and the COVID-19 rate. The negative correlation tells us that in more deprived areas (those with a lower mean IMD decile), the standardised mortality rate is higher. . Note however that the strength of the correlations are quite different. COVID-19 appears to discriminate less based on social deprivation than all causes of death combined. This link between social deprivation and mortality has been previously observed - see discussions here and here. . Time Periods . We are now finally ready to investigate the relationship between mortality and deprivation in the different periods of lockdown. The three periods we defined are: . Before lockdown: January 1st to April 7th | Duing lockdown: April 7th to June 1st | After lockdown: June 1st to August 28th | . We will look at this relationship for all causes of death, and for COVID-19 deaths separately. . All Causes . ymax = 4.5 plt.figure(figsize=(16,5)) # calcualte correlations and slopes pre_stats = get_corr_and_slope(first_df[&#39;Mean IMD decile&#39;], first_df[&#39;All causes rate&#39;]) dur_stats = get_corr_and_slope(second_df[&#39;Mean IMD decile&#39;], second_df[&#39;All causes rate&#39;]) pos_stats = get_corr_and_slope(third_df[&#39;Mean IMD decile&#39;], third_df[&#39;All causes rate&#39;]) plt.subplot(131) plt.title(&#39;Before Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;All causes rate&#39;, data=first_df, label=f&quot;$r={pre_stats[0]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;All Causes Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, ymax)) plt.subplot(132) plt.title(&#39;During Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;All causes rate&#39;, data=second_df, label=f&quot;$r={dur_stats[0]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;All Causes Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, ymax)) plt.subplot(133) plt.title(&#39;After Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;All causes rate&#39;, data=third_df, label=f&quot;$r={pos_stats[0]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;All Causes Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, ymax)) plt.show() . After splitting the data into the three time periods, we that the the negative correlation persists for each period, but has different strengths. The potential reasons for the differences in strength are numerous. The middle plot refers to the peak period in the number of COVID-19 deaths. This could be one explanation for the interesting effect that we observe in the middle plot: the correlation is lower (the variance is larger), but the slope seems to be steeper. . To get a better sense of the number of deaths as a function of time take a look at this ONS study. . COVID-19 . Next we&#39;ll make the same set of three plots, but look specifically at deaths involving COVID-19. . ymax = 2.5 plt.figure(figsize=(16,5)) # calcualte correlations and slopes pre_stats = get_corr_and_slope(first_df[&#39;Mean IMD decile&#39;], first_df[&#39;COVID-19 rate&#39;]) dur_stats = get_corr_and_slope(second_df[&#39;Mean IMD decile&#39;], second_df[&#39;COVID-19 rate&#39;]) pos_stats = get_corr_and_slope(third_df[&#39;Mean IMD decile&#39;], third_df[&#39;COVID-19 rate&#39;]) plt.subplot(131) plt.title(&#39;Before Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;COVID-19 rate&#39;, data=first_df, label=f&quot; t$r={pre_stats[0]}$ $m={pre_stats[1]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;COVID-19 Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, 1)) plt.subplot(132) plt.title(&#39;During Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;COVID-19 rate&#39;, data=second_df, label=f&quot; t$r={dur_stats[0]}$ $m={dur_stats[1]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;COVID-19 Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, ymax)) plt.subplot(133) plt.title(&#39;After Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;COVID-19 rate&#39;, data=third_df, label=f&quot; t$r={pos_stats[0]}$ $m={pos_stats[1]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;COVID-19 Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, 1)) plt.show() . ⚠️ The &quot;During Lockdown&quot; middle plot contains the peak of COVID-19 mortalities in the UK. The standardised rate is therefore much higher in this plot, and the range of the $y$-axis has been increased to reflect this. . Looking only at COVID-19 mortalities, we observe that during lockdown and the peak of the pandemic, the strength of the correlation increases. Again, there are many things that could be the cause of this. Our hypothesis is that, during lockdown, those in more socially deprived areas were more likely to be in circumstances that increased their exposure to COVID-19 (for example key workers who are unable to work remotely - see here and here). . Conclusions . We started writing this story in order to investigate whether COVID-19 deaths were related to social deprivation. We&#39;ve also learnt a lot of other things along the way. . First, there is a very strong relationship between deprivation and general mortality. This means that deprived areas have a higher rate of mortality from all causes than less deprived areas. Life is more difficult if you live in deprivation. This effect is still observed when looking at COVID-19 specific morality rates, although is less strong than the trend from all causes. So COVID-19 appears to be less discriminatory across the different parts of society compared to other causes of death. . We suspected at the beginning that the the state of lockdown may have different affects on different groups of people. We thus wanted to know if this relationship between COVID-19 and death rates changed during the different stages of lockdown. Our analysis shows that the relationship is stronger during the main lockdown period. Note that the relationship we see is only a correlation. More work would need to be done to give any answers about the causal processes that generate this correlation. . There are many things that could be the cause of the observed correlation. Speculatively, it could be down to the fact that people from working class backgrounds are less likely to be able to work from home made them more prone to contracting the virus during lockdown and take it home with them. This would explain their higher rates of mortality. But, as stated, more sophisticated data and analysis techniques would be needed to attempt answer the question of what is the cause of what. . At the moment of writing we are entering a second wave. We hope that we will be able to learn from the challenges that were faced earlier this year, and that more consideration and support is offered to people living in the most deprived areas of the country. . Thank you for taking the time to read this first Turing Data Story, we hope you have found it both interesting and informative. We encourage you to expand on the ideas presented in this story and as well as explore your own questions on this topic. 🙂 . We&#39;re now taking in external submissions for new stories 📗 so if you are interested in contributing, please get in touch! .",
            "url": "https://alan-turing-institute.github.io/TuringDataStories-fastpages/covid-19/data%20wrangling/data%20exploration/2020/11/20/Who_was_protected_by_the_first_COVID-19_lockdown.html",
            "relUrl": "/covid-19/data%20wrangling/data%20exploration/2020/11/20/Who_was_protected_by_the_first_COVID-19_lockdown.html",
            "date": " • Nov 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Our vision . Our aim is to help people understand the data driven world around us. We want to inspire an open community around a central platform. One that encourages us all to harness the potential of open data by creating ‘data stories’. These ‘data stories’ will mix computer code, narrative, visuals and real world data to document an insightful result. They should relate to society in a way that people care about, and be educational. They must maintain a high standard of openness and reproducibility and be approved by the community in a peer review process. The stories will develop data literacy and critical thinking in the general readership. . About the project . This project was initially formed by a desire to contribute and advance to the analysis of government COVID-19 data. . As part of this process we recognised that government reporting of COVID-19 data was not always in the most accessible format. We also recognised that especially during these times, many invididuals may be interested in developing their technical skills in an impactful way, but not know where to start. . Our goal was therefore to help provide educational data science content that would guide the user through the process of making the data accessible, to using the data for analysis. . We hope that by using the story telling medium, we can bring people along the data science journey and showcase how these techniques can answer both fascinating and socially relevant questions. . What is a Turing Data Story? . The Turing Data Stories should be detailed and pedagogic Jupyter notebooks that document an interesting insight or result using real world data. The aim of the Turing Data Stories is to spark curiosity and motivate more people to play with data. . We expect that the notebook of a data story takes the reader through each step of the analysis done to create the data story results. Turing Data Stories should follow these principles: . The story should be told in a pedagogical way, describing both the context of the story and the methods used in the analysis. The analysis must be fully reproducible (the notebooks should be able to be ran by others using a defined computer environment). The results should be transparent, all data sources are correctly refered to and included. In order to mantain the quality of the results, the Turing Data Story should be peer-reviewed by other contributors before published. We don’t expect sophisticated analyses, just insteresting stories told with data. If you have an idea of a Turing Data Story you want to develop please follow our contributing guidelines to make sure your contributions can be easily integrated in the project. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alan-turing-institute.github.io/TuringDataStories-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alan-turing-institute.github.io/TuringDataStories-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}